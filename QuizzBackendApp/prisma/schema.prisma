generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model user {
    id       Int      @id @default(autoincrement())
    nom      String?
    prenom   String?
    email    String   @unique
    password String
    createAt DateTime @default(now())
    updateAt DateTime @updatedAt
}

model student {
    id           Int            @id @default(autoincrement())
    nom          String?
    prenom       String?
    email        String         @unique
    password     String
    status       Boolean @default(true)
    studentExams studentExam[]
    studentTopic studentTopic[]
    payExams     payExam[]
    createAt     DateTime       @default(now())
    updateAt     DateTime       @updatedAt
}

model exam {
    id           Int           @id @default(autoincrement())
    titre        String
    total_point  Float
    Start_Date   DateTime
    End_Date     DateTime
    studentExams studentExam[]
    topics       topic[]
    createAt     DateTime      @default(now())
    updateAt     DateTime      @updatedAt
}

model topic {
    id           Int            @id @default(autoincrement())
    nom          String
    description  String
    total_point  Float
    timer        DateTime
    exam         exam           @relation(fields: [ExamId], references: [id])
    ExamId       Int
    questions    question[]
    studentTopic studentTopic[]
    createAt     DateTime       @default(now())
    updateAt     DateTime       @updatedAt
}

model question {
    id        Int        @id @default(autoincrement())
    titre     String
    point     Float
    topic     topic      @relation(fields: [topicId], references: [id])
    topicId   Int
    responses response[]
    createAt  DateTime   @default(now())
    updateAt  DateTime   @updatedAt
}

model response {
    id         Int      @id @default(autoincrement())
    titre      String
    question   question @relation(fields: [QuestionId], references: [id])
    QuestionId Int
    createAt   DateTime @default(now())
    updateAt   DateTime @updatedAt
}

model studentExam {
    id         Int      @id @default(autoincrement())
    student    student  @relation(fields: [StudentId], references: [id])
    StudentId  Int
    exam       exam     @relation(fields: [ExamId], references: [id])
    ExamId     Int
    point_exam Float
    status     Boolean @default(true)
    createAt   DateTime @default(now())
    updateAt   DateTime @updatedAt
}

model studentTopic {
    id         Int      @id @default(autoincrement())
    student    student  @relation(fields: [StudentId], references: [id])
    StudentId  Int
    topic      topic    @relation(fields: [TopicId], references: [id])
    TopicId    Int
    point_exam Float
    status     Boolean @default(true)
    createAt   DateTime @default(now())
    updateAt   DateTime @updatedAt
}

model payExam {
    id        Int      @id @default(autoincrement())
    date      DateTime
    amount    Float
    student   student  @relation(fields: [StudentId], references: [id])
    StudentId Int
    createAt  DateTime @default(now())
    updateAt  DateTime @updatedAt
}

model permission {
    id              Int              @id @default(autoincrement())
    name            String
    permissionRoles permissionRole[]
    createAt        DateTime         @default(now())
    updateAt        DateTime         @updatedAt
}

model role {
    id              Int              @id @default(autoincrement())
    name            String
    permissionRoles permissionRole[]
    createAt        DateTime         @default(now())
    updateAt        DateTime         @updatedAt
}

model permissionRole {
    id           Int        @id @default(autoincrement())
    persmission  permission @relation(fields: [permissionId], references: [id])
    permissionId Int
    role         role       @relation(fields: [roleId], references: [id])
    roleId       Int
    createAt     DateTime   @default(now())
    updateAt     DateTime   @updatedAt
}
