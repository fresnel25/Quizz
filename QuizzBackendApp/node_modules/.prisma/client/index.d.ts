
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model user
 * 
 */
export type user = $Result.DefaultSelection<Prisma.$userPayload>
/**
 * Model student
 * 
 */
export type student = $Result.DefaultSelection<Prisma.$studentPayload>
/**
 * Model exam
 * 
 */
export type exam = $Result.DefaultSelection<Prisma.$examPayload>
/**
 * Model category
 * 
 */
export type category = $Result.DefaultSelection<Prisma.$categoryPayload>
/**
 * Model question
 * 
 */
export type question = $Result.DefaultSelection<Prisma.$questionPayload>
/**
 * Model response
 * 
 */
export type response = $Result.DefaultSelection<Prisma.$responsePayload>
/**
 * Model studentExam
 * 
 */
export type studentExam = $Result.DefaultSelection<Prisma.$studentExamPayload>
/**
 * Model payExam
 * 
 */
export type payExam = $Result.DefaultSelection<Prisma.$payExamPayload>
/**
 * Model permission
 * 
 */
export type permission = $Result.DefaultSelection<Prisma.$permissionPayload>
/**
 * Model role
 * 
 */
export type role = $Result.DefaultSelection<Prisma.$rolePayload>
/**
 * Model permissionRole
 * 
 */
export type permissionRole = $Result.DefaultSelection<Prisma.$permissionRolePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<ExtArgs>;

  /**
   * `prisma.student`: Exposes CRUD operations for the **student** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.student.findMany()
    * ```
    */
  get student(): Prisma.studentDelegate<ExtArgs>;

  /**
   * `prisma.exam`: Exposes CRUD operations for the **exam** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exams
    * const exams = await prisma.exam.findMany()
    * ```
    */
  get exam(): Prisma.examDelegate<ExtArgs>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.categoryDelegate<ExtArgs>;

  /**
   * `prisma.question`: Exposes CRUD operations for the **question** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questions
    * const questions = await prisma.question.findMany()
    * ```
    */
  get question(): Prisma.questionDelegate<ExtArgs>;

  /**
   * `prisma.response`: Exposes CRUD operations for the **response** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Responses
    * const responses = await prisma.response.findMany()
    * ```
    */
  get response(): Prisma.responseDelegate<ExtArgs>;

  /**
   * `prisma.studentExam`: Exposes CRUD operations for the **studentExam** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudentExams
    * const studentExams = await prisma.studentExam.findMany()
    * ```
    */
  get studentExam(): Prisma.studentExamDelegate<ExtArgs>;

  /**
   * `prisma.payExam`: Exposes CRUD operations for the **payExam** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PayExams
    * const payExams = await prisma.payExam.findMany()
    * ```
    */
  get payExam(): Prisma.payExamDelegate<ExtArgs>;

  /**
   * `prisma.permission`: Exposes CRUD operations for the **permission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Permissions
    * const permissions = await prisma.permission.findMany()
    * ```
    */
  get permission(): Prisma.permissionDelegate<ExtArgs>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.roleDelegate<ExtArgs>;

  /**
   * `prisma.permissionRole`: Exposes CRUD operations for the **permissionRole** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PermissionRoles
    * const permissionRoles = await prisma.permissionRole.findMany()
    * ```
    */
  get permissionRole(): Prisma.permissionRoleDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.12.1
   * Query Engine version: 473ed3124229e22d881cb7addf559799debae1ab
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    user: 'user',
    student: 'student',
    exam: 'exam',
    category: 'category',
    question: 'question',
    response: 'response',
    studentExam: 'studentExam',
    payExam: 'payExam',
    permission: 'permission',
    role: 'role',
    permissionRole: 'permissionRole'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'student' | 'exam' | 'category' | 'question' | 'response' | 'studentExam' | 'payExam' | 'permission' | 'role' | 'permissionRole'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      user: {
        payload: Prisma.$userPayload<ExtArgs>
        fields: Prisma.userFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findFirst: {
            args: Prisma.userFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findMany: {
            args: Prisma.userFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          create: {
            args: Prisma.userCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          createMany: {
            args: Prisma.userCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.userDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          update: {
            args: Prisma.userUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          deleteMany: {
            args: Prisma.userDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.userUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.userUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.userGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.userCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      student: {
        payload: Prisma.$studentPayload<ExtArgs>
        fields: Prisma.studentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.studentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$studentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.studentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$studentPayload>
          }
          findFirst: {
            args: Prisma.studentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$studentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.studentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$studentPayload>
          }
          findMany: {
            args: Prisma.studentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$studentPayload>[]
          }
          create: {
            args: Prisma.studentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$studentPayload>
          }
          createMany: {
            args: Prisma.studentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.studentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$studentPayload>
          }
          update: {
            args: Prisma.studentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$studentPayload>
          }
          deleteMany: {
            args: Prisma.studentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.studentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.studentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$studentPayload>
          }
          aggregate: {
            args: Prisma.StudentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStudent>
          }
          groupBy: {
            args: Prisma.studentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StudentGroupByOutputType>[]
          }
          count: {
            args: Prisma.studentCountArgs<ExtArgs>,
            result: $Utils.Optional<StudentCountAggregateOutputType> | number
          }
        }
      }
      exam: {
        payload: Prisma.$examPayload<ExtArgs>
        fields: Prisma.examFieldRefs
        operations: {
          findUnique: {
            args: Prisma.examFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$examPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.examFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$examPayload>
          }
          findFirst: {
            args: Prisma.examFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$examPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.examFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$examPayload>
          }
          findMany: {
            args: Prisma.examFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$examPayload>[]
          }
          create: {
            args: Prisma.examCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$examPayload>
          }
          createMany: {
            args: Prisma.examCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.examDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$examPayload>
          }
          update: {
            args: Prisma.examUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$examPayload>
          }
          deleteMany: {
            args: Prisma.examDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.examUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.examUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$examPayload>
          }
          aggregate: {
            args: Prisma.ExamAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateExam>
          }
          groupBy: {
            args: Prisma.examGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ExamGroupByOutputType>[]
          }
          count: {
            args: Prisma.examCountArgs<ExtArgs>,
            result: $Utils.Optional<ExamCountAggregateOutputType> | number
          }
        }
      }
      category: {
        payload: Prisma.$categoryPayload<ExtArgs>
        fields: Prisma.categoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.categoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.categoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoryPayload>
          }
          findFirst: {
            args: Prisma.categoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.categoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoryPayload>
          }
          findMany: {
            args: Prisma.categoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoryPayload>[]
          }
          create: {
            args: Prisma.categoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoryPayload>
          }
          createMany: {
            args: Prisma.categoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.categoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoryPayload>
          }
          update: {
            args: Prisma.categoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoryPayload>
          }
          deleteMany: {
            args: Prisma.categoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.categoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.categoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.categoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.categoryCountArgs<ExtArgs>,
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      question: {
        payload: Prisma.$questionPayload<ExtArgs>
        fields: Prisma.questionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.questionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.questionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionPayload>
          }
          findFirst: {
            args: Prisma.questionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.questionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionPayload>
          }
          findMany: {
            args: Prisma.questionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionPayload>[]
          }
          create: {
            args: Prisma.questionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionPayload>
          }
          createMany: {
            args: Prisma.questionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.questionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionPayload>
          }
          update: {
            args: Prisma.questionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionPayload>
          }
          deleteMany: {
            args: Prisma.questionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.questionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.questionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionPayload>
          }
          aggregate: {
            args: Prisma.QuestionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateQuestion>
          }
          groupBy: {
            args: Prisma.questionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<QuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.questionCountArgs<ExtArgs>,
            result: $Utils.Optional<QuestionCountAggregateOutputType> | number
          }
        }
      }
      response: {
        payload: Prisma.$responsePayload<ExtArgs>
        fields: Prisma.responseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.responseFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$responsePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.responseFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$responsePayload>
          }
          findFirst: {
            args: Prisma.responseFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$responsePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.responseFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$responsePayload>
          }
          findMany: {
            args: Prisma.responseFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$responsePayload>[]
          }
          create: {
            args: Prisma.responseCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$responsePayload>
          }
          createMany: {
            args: Prisma.responseCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.responseDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$responsePayload>
          }
          update: {
            args: Prisma.responseUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$responsePayload>
          }
          deleteMany: {
            args: Prisma.responseDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.responseUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.responseUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$responsePayload>
          }
          aggregate: {
            args: Prisma.ResponseAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateResponse>
          }
          groupBy: {
            args: Prisma.responseGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ResponseGroupByOutputType>[]
          }
          count: {
            args: Prisma.responseCountArgs<ExtArgs>,
            result: $Utils.Optional<ResponseCountAggregateOutputType> | number
          }
        }
      }
      studentExam: {
        payload: Prisma.$studentExamPayload<ExtArgs>
        fields: Prisma.studentExamFieldRefs
        operations: {
          findUnique: {
            args: Prisma.studentExamFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$studentExamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.studentExamFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$studentExamPayload>
          }
          findFirst: {
            args: Prisma.studentExamFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$studentExamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.studentExamFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$studentExamPayload>
          }
          findMany: {
            args: Prisma.studentExamFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$studentExamPayload>[]
          }
          create: {
            args: Prisma.studentExamCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$studentExamPayload>
          }
          createMany: {
            args: Prisma.studentExamCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.studentExamDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$studentExamPayload>
          }
          update: {
            args: Prisma.studentExamUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$studentExamPayload>
          }
          deleteMany: {
            args: Prisma.studentExamDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.studentExamUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.studentExamUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$studentExamPayload>
          }
          aggregate: {
            args: Prisma.StudentExamAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStudentExam>
          }
          groupBy: {
            args: Prisma.studentExamGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StudentExamGroupByOutputType>[]
          }
          count: {
            args: Prisma.studentExamCountArgs<ExtArgs>,
            result: $Utils.Optional<StudentExamCountAggregateOutputType> | number
          }
        }
      }
      payExam: {
        payload: Prisma.$payExamPayload<ExtArgs>
        fields: Prisma.payExamFieldRefs
        operations: {
          findUnique: {
            args: Prisma.payExamFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payExamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.payExamFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payExamPayload>
          }
          findFirst: {
            args: Prisma.payExamFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payExamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.payExamFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payExamPayload>
          }
          findMany: {
            args: Prisma.payExamFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payExamPayload>[]
          }
          create: {
            args: Prisma.payExamCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payExamPayload>
          }
          createMany: {
            args: Prisma.payExamCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.payExamDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payExamPayload>
          }
          update: {
            args: Prisma.payExamUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payExamPayload>
          }
          deleteMany: {
            args: Prisma.payExamDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.payExamUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.payExamUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payExamPayload>
          }
          aggregate: {
            args: Prisma.PayExamAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePayExam>
          }
          groupBy: {
            args: Prisma.payExamGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PayExamGroupByOutputType>[]
          }
          count: {
            args: Prisma.payExamCountArgs<ExtArgs>,
            result: $Utils.Optional<PayExamCountAggregateOutputType> | number
          }
        }
      }
      permission: {
        payload: Prisma.$permissionPayload<ExtArgs>
        fields: Prisma.permissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.permissionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$permissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.permissionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$permissionPayload>
          }
          findFirst: {
            args: Prisma.permissionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$permissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.permissionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$permissionPayload>
          }
          findMany: {
            args: Prisma.permissionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$permissionPayload>[]
          }
          create: {
            args: Prisma.permissionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$permissionPayload>
          }
          createMany: {
            args: Prisma.permissionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.permissionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$permissionPayload>
          }
          update: {
            args: Prisma.permissionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$permissionPayload>
          }
          deleteMany: {
            args: Prisma.permissionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.permissionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.permissionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$permissionPayload>
          }
          aggregate: {
            args: Prisma.PermissionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePermission>
          }
          groupBy: {
            args: Prisma.permissionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.permissionCountArgs<ExtArgs>,
            result: $Utils.Optional<PermissionCountAggregateOutputType> | number
          }
        }
      }
      role: {
        payload: Prisma.$rolePayload<ExtArgs>
        fields: Prisma.roleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.roleFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$rolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.roleFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$rolePayload>
          }
          findFirst: {
            args: Prisma.roleFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$rolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.roleFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$rolePayload>
          }
          findMany: {
            args: Prisma.roleFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$rolePayload>[]
          }
          create: {
            args: Prisma.roleCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$rolePayload>
          }
          createMany: {
            args: Prisma.roleCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.roleDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$rolePayload>
          }
          update: {
            args: Prisma.roleUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$rolePayload>
          }
          deleteMany: {
            args: Prisma.roleDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.roleUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.roleUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$rolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.roleGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.roleCountArgs<ExtArgs>,
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
      permissionRole: {
        payload: Prisma.$permissionRolePayload<ExtArgs>
        fields: Prisma.permissionRoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.permissionRoleFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$permissionRolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.permissionRoleFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$permissionRolePayload>
          }
          findFirst: {
            args: Prisma.permissionRoleFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$permissionRolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.permissionRoleFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$permissionRolePayload>
          }
          findMany: {
            args: Prisma.permissionRoleFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$permissionRolePayload>[]
          }
          create: {
            args: Prisma.permissionRoleCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$permissionRolePayload>
          }
          createMany: {
            args: Prisma.permissionRoleCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.permissionRoleDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$permissionRolePayload>
          }
          update: {
            args: Prisma.permissionRoleUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$permissionRolePayload>
          }
          deleteMany: {
            args: Prisma.permissionRoleDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.permissionRoleUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.permissionRoleUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$permissionRolePayload>
          }
          aggregate: {
            args: Prisma.PermissionRoleAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePermissionRole>
          }
          groupBy: {
            args: Prisma.permissionRoleGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PermissionRoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.permissionRoleCountArgs<ExtArgs>,
            result: $Utils.Optional<PermissionRoleCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type StudentCountOutputType
   */

  export type StudentCountOutputType = {
    studentExams: number
    payExams: number
  }

  export type StudentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    studentExams?: boolean | StudentCountOutputTypeCountStudentExamsArgs
    payExams?: boolean | StudentCountOutputTypeCountPayExamsArgs
  }

  // Custom InputTypes

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentCountOutputType
     */
    select?: StudentCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountStudentExamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: studentExamWhereInput
  }


  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountPayExamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: payExamWhereInput
  }



  /**
   * Count Type ExamCountOutputType
   */

  export type ExamCountOutputType = {
    studentExams: number
    categories: number
  }

  export type ExamCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    studentExams?: boolean | ExamCountOutputTypeCountStudentExamsArgs
    categories?: boolean | ExamCountOutputTypeCountCategoriesArgs
  }

  // Custom InputTypes

  /**
   * ExamCountOutputType without action
   */
  export type ExamCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExamCountOutputType
     */
    select?: ExamCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ExamCountOutputType without action
   */
  export type ExamCountOutputTypeCountStudentExamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: studentExamWhereInput
  }


  /**
   * ExamCountOutputType without action
   */
  export type ExamCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: categoryWhereInput
  }



  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    questions: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | CategoryCountOutputTypeCountQuestionsArgs
  }

  // Custom InputTypes

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: questionWhereInput
  }



  /**
   * Count Type QuestionCountOutputType
   */

  export type QuestionCountOutputType = {
    responses: number
  }

  export type QuestionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    responses?: boolean | QuestionCountOutputTypeCountResponsesArgs
  }

  // Custom InputTypes

  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionCountOutputType
     */
    select?: QuestionCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeCountResponsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: responseWhereInput
  }



  /**
   * Count Type PermissionCountOutputType
   */

  export type PermissionCountOutputType = {
    permissionRoles: number
  }

  export type PermissionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    permissionRoles?: boolean | PermissionCountOutputTypeCountPermissionRolesArgs
  }

  // Custom InputTypes

  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionCountOutputType
     */
    select?: PermissionCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeCountPermissionRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: permissionRoleWhereInput
  }



  /**
   * Count Type RoleCountOutputType
   */

  export type RoleCountOutputType = {
    permissionRoles: number
  }

  export type RoleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    permissionRoles?: boolean | RoleCountOutputTypeCountPermissionRolesArgs
  }

  // Custom InputTypes

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     */
    select?: RoleCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountPermissionRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: permissionRoleWhereInput
  }



  /**
   * Models
   */

  /**
   * Model user
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    nom: string | null
    prenom: string | null
    email: string | null
    password: string | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    prenom: string | null
    email: string | null
    password: string | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    nom: number
    prenom: number
    email: number
    password: number
    createAt: number
    updateAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    email?: true
    password?: true
    createAt?: true
    updateAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    email?: true
    password?: true
    createAt?: true
    updateAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    email?: true
    password?: true
    createAt?: true
    updateAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user to aggregate.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type userGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userWhereInput
    orderBy?: userOrderByWithAggregationInput | userOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    nom: string | null
    prenom: string | null
    email: string
    password: string
    createAt: Date
    updateAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends userGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    prenom?: boolean
    email?: boolean
    password?: boolean
    createAt?: boolean
    updateAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type userSelectScalar = {
    id?: boolean
    nom?: boolean
    prenom?: boolean
    email?: boolean
    password?: boolean
    createAt?: boolean
    updateAt?: boolean
  }


  export type $userPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string | null
      prenom: string | null
      email: string
      password: string
      createAt: Date
      updateAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type userGetPayload<S extends boolean | null | undefined | userDefaultArgs> = $Result.GetResult<Prisma.$userPayload, S>

  type userCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<userFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface userDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user'], meta: { name: 'user' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, userFindUniqueArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindFirstArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends userFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends userFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends userCreateArgs<ExtArgs>>(
      args: SelectSubset<T, userCreateArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {userCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends userCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends userDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, userDeleteArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, userUpdateArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, userUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends userUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, userUpsertArgs<ExtArgs>>
    ): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userGroupByArgs['orderBy'] }
        : { orderBy?: userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user model
   */
  readonly fields: userFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the user model
   */ 
  interface userFieldRefs {
    readonly id: FieldRef<"user", 'Int'>
    readonly nom: FieldRef<"user", 'String'>
    readonly prenom: FieldRef<"user", 'String'>
    readonly email: FieldRef<"user", 'String'>
    readonly password: FieldRef<"user", 'String'>
    readonly createAt: FieldRef<"user", 'DateTime'>
    readonly updateAt: FieldRef<"user", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * user findUnique
   */
  export type userFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }


  /**
   * user findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }


  /**
   * user findFirst
   */
  export type userFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * user findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * user findMany
   */
  export type userFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * user create
   */
  export type userCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * The data needed to create a user.
     */
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }


  /**
   * user createMany
   */
  export type userCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * user update
   */
  export type userUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * The data needed to update a user.
     */
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     */
    where: userWhereUniqueInput
  }


  /**
   * user updateMany
   */
  export type userUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: userWhereInput
  }


  /**
   * user upsert
   */
  export type userUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * The filter to search for the user to update in case it exists.
     */
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     */
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }


  /**
   * user delete
   */
  export type userDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Filter which user to delete.
     */
    where: userWhereUniqueInput
  }


  /**
   * user deleteMany
   */
  export type userDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: userWhereInput
  }


  /**
   * user without action
   */
  export type userDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
  }



  /**
   * Model student
   */

  export type AggregateStudent = {
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  export type StudentAvgAggregateOutputType = {
    id: number | null
  }

  export type StudentSumAggregateOutputType = {
    id: number | null
  }

  export type StudentMinAggregateOutputType = {
    id: number | null
    nom: string | null
    prenom: string | null
    email: string | null
    password: string | null
    status: boolean | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type StudentMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    prenom: string | null
    email: string | null
    password: string | null
    status: boolean | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type StudentCountAggregateOutputType = {
    id: number
    nom: number
    prenom: number
    email: number
    password: number
    status: number
    createAt: number
    updateAt: number
    _all: number
  }


  export type StudentAvgAggregateInputType = {
    id?: true
  }

  export type StudentSumAggregateInputType = {
    id?: true
  }

  export type StudentMinAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    email?: true
    password?: true
    status?: true
    createAt?: true
    updateAt?: true
  }

  export type StudentMaxAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    email?: true
    password?: true
    status?: true
    createAt?: true
    updateAt?: true
  }

  export type StudentCountAggregateInputType = {
    id?: true
    nom?: true
    prenom?: true
    email?: true
    password?: true
    status?: true
    createAt?: true
    updateAt?: true
    _all?: true
  }

  export type StudentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which student to aggregate.
     */
    where?: studentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of students to fetch.
     */
    orderBy?: studentOrderByWithRelationInput | studentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: studentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned students
    **/
    _count?: true | StudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentMaxAggregateInputType
  }

  export type GetStudentAggregateType<T extends StudentAggregateArgs> = {
        [P in keyof T & keyof AggregateStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent[P]>
      : GetScalarType<T[P], AggregateStudent[P]>
  }




  export type studentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: studentWhereInput
    orderBy?: studentOrderByWithAggregationInput | studentOrderByWithAggregationInput[]
    by: StudentScalarFieldEnum[] | StudentScalarFieldEnum
    having?: studentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentCountAggregateInputType | true
    _avg?: StudentAvgAggregateInputType
    _sum?: StudentSumAggregateInputType
    _min?: StudentMinAggregateInputType
    _max?: StudentMaxAggregateInputType
  }

  export type StudentGroupByOutputType = {
    id: number
    nom: string | null
    prenom: string | null
    email: string
    password: string
    status: boolean
    createAt: Date
    updateAt: Date
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  type GetStudentGroupByPayload<T extends studentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentGroupByOutputType[P]>
            : GetScalarType<T[P], StudentGroupByOutputType[P]>
        }
      >
    >


  export type studentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    prenom?: boolean
    email?: boolean
    password?: boolean
    status?: boolean
    createAt?: boolean
    updateAt?: boolean
    studentExams?: boolean | student$studentExamsArgs<ExtArgs>
    payExams?: boolean | student$payExamsArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type studentSelectScalar = {
    id?: boolean
    nom?: boolean
    prenom?: boolean
    email?: boolean
    password?: boolean
    status?: boolean
    createAt?: boolean
    updateAt?: boolean
  }

  export type studentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    studentExams?: boolean | student$studentExamsArgs<ExtArgs>
    payExams?: boolean | student$payExamsArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $studentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "student"
    objects: {
      studentExams: Prisma.$studentExamPayload<ExtArgs>[]
      payExams: Prisma.$payExamPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string | null
      prenom: string | null
      email: string
      password: string
      status: boolean
      createAt: Date
      updateAt: Date
    }, ExtArgs["result"]["student"]>
    composites: {}
  }


  type studentGetPayload<S extends boolean | null | undefined | studentDefaultArgs> = $Result.GetResult<Prisma.$studentPayload, S>

  type studentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<studentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StudentCountAggregateInputType | true
    }

  export interface studentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['student'], meta: { name: 'student' } }
    /**
     * Find zero or one Student that matches the filter.
     * @param {studentFindUniqueArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends studentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, studentFindUniqueArgs<ExtArgs>>
    ): Prisma__studentClient<$Result.GetResult<Prisma.$studentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Student that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {studentFindUniqueOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends studentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, studentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__studentClient<$Result.GetResult<Prisma.$studentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Student that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentFindFirstArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends studentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, studentFindFirstArgs<ExtArgs>>
    ): Prisma__studentClient<$Result.GetResult<Prisma.$studentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Student that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentFindFirstOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends studentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, studentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__studentClient<$Result.GetResult<Prisma.$studentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students
     * const students = await prisma.student.findMany()
     * 
     * // Get first 10 Students
     * const students = await prisma.student.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentWithIdOnly = await prisma.student.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends studentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, studentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$studentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Student.
     * @param {studentCreateArgs} args - Arguments to create a Student.
     * @example
     * // Create one Student
     * const Student = await prisma.student.create({
     *   data: {
     *     // ... data to create a Student
     *   }
     * })
     * 
    **/
    create<T extends studentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, studentCreateArgs<ExtArgs>>
    ): Prisma__studentClient<$Result.GetResult<Prisma.$studentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Students.
     *     @param {studentCreateManyArgs} args - Arguments to create many Students.
     *     @example
     *     // Create many Students
     *     const student = await prisma.student.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends studentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, studentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Student.
     * @param {studentDeleteArgs} args - Arguments to delete one Student.
     * @example
     * // Delete one Student
     * const Student = await prisma.student.delete({
     *   where: {
     *     // ... filter to delete one Student
     *   }
     * })
     * 
    **/
    delete<T extends studentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, studentDeleteArgs<ExtArgs>>
    ): Prisma__studentClient<$Result.GetResult<Prisma.$studentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Student.
     * @param {studentUpdateArgs} args - Arguments to update one Student.
     * @example
     * // Update one Student
     * const student = await prisma.student.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends studentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, studentUpdateArgs<ExtArgs>>
    ): Prisma__studentClient<$Result.GetResult<Prisma.$studentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Students.
     * @param {studentDeleteManyArgs} args - Arguments to filter Students to delete.
     * @example
     * // Delete a few Students
     * const { count } = await prisma.student.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends studentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, studentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends studentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, studentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Student.
     * @param {studentUpsertArgs} args - Arguments to update or create a Student.
     * @example
     * // Update or create a Student
     * const student = await prisma.student.upsert({
     *   create: {
     *     // ... data to create a Student
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student we want to update
     *   }
     * })
    **/
    upsert<T extends studentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, studentUpsertArgs<ExtArgs>>
    ): Prisma__studentClient<$Result.GetResult<Prisma.$studentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentCountArgs} args - Arguments to filter Students to count.
     * @example
     * // Count the number of Students
     * const count = await prisma.student.count({
     *   where: {
     *     // ... the filter for the Students we want to count
     *   }
     * })
    **/
    count<T extends studentCountArgs>(
      args?: Subset<T, studentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAggregateArgs>(args: Subset<T, StudentAggregateArgs>): Prisma.PrismaPromise<GetStudentAggregateType<T>>

    /**
     * Group by Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends studentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: studentGroupByArgs['orderBy'] }
        : { orderBy?: studentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, studentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the student model
   */
  readonly fields: studentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for student.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__studentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    studentExams<T extends student$studentExamsArgs<ExtArgs> = {}>(args?: Subset<T, student$studentExamsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$studentExamPayload<ExtArgs>, T, 'findMany'> | Null>;

    payExams<T extends student$payExamsArgs<ExtArgs> = {}>(args?: Subset<T, student$payExamsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$payExamPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the student model
   */ 
  interface studentFieldRefs {
    readonly id: FieldRef<"student", 'Int'>
    readonly nom: FieldRef<"student", 'String'>
    readonly prenom: FieldRef<"student", 'String'>
    readonly email: FieldRef<"student", 'String'>
    readonly password: FieldRef<"student", 'String'>
    readonly status: FieldRef<"student", 'Boolean'>
    readonly createAt: FieldRef<"student", 'DateTime'>
    readonly updateAt: FieldRef<"student", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * student findUnique
   */
  export type studentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student
     */
    select?: studentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: studentInclude<ExtArgs> | null
    /**
     * Filter, which student to fetch.
     */
    where: studentWhereUniqueInput
  }


  /**
   * student findUniqueOrThrow
   */
  export type studentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student
     */
    select?: studentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: studentInclude<ExtArgs> | null
    /**
     * Filter, which student to fetch.
     */
    where: studentWhereUniqueInput
  }


  /**
   * student findFirst
   */
  export type studentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student
     */
    select?: studentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: studentInclude<ExtArgs> | null
    /**
     * Filter, which student to fetch.
     */
    where?: studentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of students to fetch.
     */
    orderBy?: studentOrderByWithRelationInput | studentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for students.
     */
    cursor?: studentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }


  /**
   * student findFirstOrThrow
   */
  export type studentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student
     */
    select?: studentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: studentInclude<ExtArgs> | null
    /**
     * Filter, which student to fetch.
     */
    where?: studentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of students to fetch.
     */
    orderBy?: studentOrderByWithRelationInput | studentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for students.
     */
    cursor?: studentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }


  /**
   * student findMany
   */
  export type studentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student
     */
    select?: studentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: studentInclude<ExtArgs> | null
    /**
     * Filter, which students to fetch.
     */
    where?: studentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of students to fetch.
     */
    orderBy?: studentOrderByWithRelationInput | studentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing students.
     */
    cursor?: studentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` students.
     */
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }


  /**
   * student create
   */
  export type studentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student
     */
    select?: studentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: studentInclude<ExtArgs> | null
    /**
     * The data needed to create a student.
     */
    data: XOR<studentCreateInput, studentUncheckedCreateInput>
  }


  /**
   * student createMany
   */
  export type studentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many students.
     */
    data: studentCreateManyInput | studentCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * student update
   */
  export type studentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student
     */
    select?: studentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: studentInclude<ExtArgs> | null
    /**
     * The data needed to update a student.
     */
    data: XOR<studentUpdateInput, studentUncheckedUpdateInput>
    /**
     * Choose, which student to update.
     */
    where: studentWhereUniqueInput
  }


  /**
   * student updateMany
   */
  export type studentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update students.
     */
    data: XOR<studentUpdateManyMutationInput, studentUncheckedUpdateManyInput>
    /**
     * Filter which students to update
     */
    where?: studentWhereInput
  }


  /**
   * student upsert
   */
  export type studentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student
     */
    select?: studentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: studentInclude<ExtArgs> | null
    /**
     * The filter to search for the student to update in case it exists.
     */
    where: studentWhereUniqueInput
    /**
     * In case the student found by the `where` argument doesn't exist, create a new student with this data.
     */
    create: XOR<studentCreateInput, studentUncheckedCreateInput>
    /**
     * In case the student was found with the provided `where` argument, update it with this data.
     */
    update: XOR<studentUpdateInput, studentUncheckedUpdateInput>
  }


  /**
   * student delete
   */
  export type studentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student
     */
    select?: studentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: studentInclude<ExtArgs> | null
    /**
     * Filter which student to delete.
     */
    where: studentWhereUniqueInput
  }


  /**
   * student deleteMany
   */
  export type studentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which students to delete
     */
    where?: studentWhereInput
  }


  /**
   * student.studentExams
   */
  export type student$studentExamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studentExam
     */
    select?: studentExamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: studentExamInclude<ExtArgs> | null
    where?: studentExamWhereInput
    orderBy?: studentExamOrderByWithRelationInput | studentExamOrderByWithRelationInput[]
    cursor?: studentExamWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentExamScalarFieldEnum | StudentExamScalarFieldEnum[]
  }


  /**
   * student.payExams
   */
  export type student$payExamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payExam
     */
    select?: payExamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: payExamInclude<ExtArgs> | null
    where?: payExamWhereInput
    orderBy?: payExamOrderByWithRelationInput | payExamOrderByWithRelationInput[]
    cursor?: payExamWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PayExamScalarFieldEnum | PayExamScalarFieldEnum[]
  }


  /**
   * student without action
   */
  export type studentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the student
     */
    select?: studentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: studentInclude<ExtArgs> | null
  }



  /**
   * Model exam
   */

  export type AggregateExam = {
    _count: ExamCountAggregateOutputType | null
    _avg: ExamAvgAggregateOutputType | null
    _sum: ExamSumAggregateOutputType | null
    _min: ExamMinAggregateOutputType | null
    _max: ExamMaxAggregateOutputType | null
  }

  export type ExamAvgAggregateOutputType = {
    id: number | null
  }

  export type ExamSumAggregateOutputType = {
    id: number | null
  }

  export type ExamMinAggregateOutputType = {
    id: number | null
    titre: string | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type ExamMaxAggregateOutputType = {
    id: number | null
    titre: string | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type ExamCountAggregateOutputType = {
    id: number
    titre: number
    createAt: number
    updateAt: number
    _all: number
  }


  export type ExamAvgAggregateInputType = {
    id?: true
  }

  export type ExamSumAggregateInputType = {
    id?: true
  }

  export type ExamMinAggregateInputType = {
    id?: true
    titre?: true
    createAt?: true
    updateAt?: true
  }

  export type ExamMaxAggregateInputType = {
    id?: true
    titre?: true
    createAt?: true
    updateAt?: true
  }

  export type ExamCountAggregateInputType = {
    id?: true
    titre?: true
    createAt?: true
    updateAt?: true
    _all?: true
  }

  export type ExamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which exam to aggregate.
     */
    where?: examWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exams to fetch.
     */
    orderBy?: examOrderByWithRelationInput | examOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: examWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned exams
    **/
    _count?: true | ExamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExamAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExamSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExamMaxAggregateInputType
  }

  export type GetExamAggregateType<T extends ExamAggregateArgs> = {
        [P in keyof T & keyof AggregateExam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExam[P]>
      : GetScalarType<T[P], AggregateExam[P]>
  }




  export type examGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: examWhereInput
    orderBy?: examOrderByWithAggregationInput | examOrderByWithAggregationInput[]
    by: ExamScalarFieldEnum[] | ExamScalarFieldEnum
    having?: examScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExamCountAggregateInputType | true
    _avg?: ExamAvgAggregateInputType
    _sum?: ExamSumAggregateInputType
    _min?: ExamMinAggregateInputType
    _max?: ExamMaxAggregateInputType
  }

  export type ExamGroupByOutputType = {
    id: number
    titre: string
    createAt: Date
    updateAt: Date
    _count: ExamCountAggregateOutputType | null
    _avg: ExamAvgAggregateOutputType | null
    _sum: ExamSumAggregateOutputType | null
    _min: ExamMinAggregateOutputType | null
    _max: ExamMaxAggregateOutputType | null
  }

  type GetExamGroupByPayload<T extends examGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExamGroupByOutputType[P]>
            : GetScalarType<T[P], ExamGroupByOutputType[P]>
        }
      >
    >


  export type examSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titre?: boolean
    createAt?: boolean
    updateAt?: boolean
    studentExams?: boolean | exam$studentExamsArgs<ExtArgs>
    categories?: boolean | exam$categoriesArgs<ExtArgs>
    _count?: boolean | ExamCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exam"]>

  export type examSelectScalar = {
    id?: boolean
    titre?: boolean
    createAt?: boolean
    updateAt?: boolean
  }

  export type examInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    studentExams?: boolean | exam$studentExamsArgs<ExtArgs>
    categories?: boolean | exam$categoriesArgs<ExtArgs>
    _count?: boolean | ExamCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $examPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "exam"
    objects: {
      studentExams: Prisma.$studentExamPayload<ExtArgs>[]
      categories: Prisma.$categoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      titre: string
      createAt: Date
      updateAt: Date
    }, ExtArgs["result"]["exam"]>
    composites: {}
  }


  type examGetPayload<S extends boolean | null | undefined | examDefaultArgs> = $Result.GetResult<Prisma.$examPayload, S>

  type examCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<examFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ExamCountAggregateInputType | true
    }

  export interface examDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['exam'], meta: { name: 'exam' } }
    /**
     * Find zero or one Exam that matches the filter.
     * @param {examFindUniqueArgs} args - Arguments to find a Exam
     * @example
     * // Get one Exam
     * const exam = await prisma.exam.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends examFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, examFindUniqueArgs<ExtArgs>>
    ): Prisma__examClient<$Result.GetResult<Prisma.$examPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Exam that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {examFindUniqueOrThrowArgs} args - Arguments to find a Exam
     * @example
     * // Get one Exam
     * const exam = await prisma.exam.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends examFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, examFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__examClient<$Result.GetResult<Prisma.$examPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Exam that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {examFindFirstArgs} args - Arguments to find a Exam
     * @example
     * // Get one Exam
     * const exam = await prisma.exam.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends examFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, examFindFirstArgs<ExtArgs>>
    ): Prisma__examClient<$Result.GetResult<Prisma.$examPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Exam that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {examFindFirstOrThrowArgs} args - Arguments to find a Exam
     * @example
     * // Get one Exam
     * const exam = await prisma.exam.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends examFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, examFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__examClient<$Result.GetResult<Prisma.$examPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Exams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {examFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Exams
     * const exams = await prisma.exam.findMany()
     * 
     * // Get first 10 Exams
     * const exams = await prisma.exam.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const examWithIdOnly = await prisma.exam.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends examFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, examFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$examPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Exam.
     * @param {examCreateArgs} args - Arguments to create a Exam.
     * @example
     * // Create one Exam
     * const Exam = await prisma.exam.create({
     *   data: {
     *     // ... data to create a Exam
     *   }
     * })
     * 
    **/
    create<T extends examCreateArgs<ExtArgs>>(
      args: SelectSubset<T, examCreateArgs<ExtArgs>>
    ): Prisma__examClient<$Result.GetResult<Prisma.$examPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Exams.
     *     @param {examCreateManyArgs} args - Arguments to create many Exams.
     *     @example
     *     // Create many Exams
     *     const exam = await prisma.exam.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends examCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, examCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Exam.
     * @param {examDeleteArgs} args - Arguments to delete one Exam.
     * @example
     * // Delete one Exam
     * const Exam = await prisma.exam.delete({
     *   where: {
     *     // ... filter to delete one Exam
     *   }
     * })
     * 
    **/
    delete<T extends examDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, examDeleteArgs<ExtArgs>>
    ): Prisma__examClient<$Result.GetResult<Prisma.$examPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Exam.
     * @param {examUpdateArgs} args - Arguments to update one Exam.
     * @example
     * // Update one Exam
     * const exam = await prisma.exam.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends examUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, examUpdateArgs<ExtArgs>>
    ): Prisma__examClient<$Result.GetResult<Prisma.$examPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Exams.
     * @param {examDeleteManyArgs} args - Arguments to filter Exams to delete.
     * @example
     * // Delete a few Exams
     * const { count } = await prisma.exam.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends examDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, examDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {examUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Exams
     * const exam = await prisma.exam.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends examUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, examUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Exam.
     * @param {examUpsertArgs} args - Arguments to update or create a Exam.
     * @example
     * // Update or create a Exam
     * const exam = await prisma.exam.upsert({
     *   create: {
     *     // ... data to create a Exam
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Exam we want to update
     *   }
     * })
    **/
    upsert<T extends examUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, examUpsertArgs<ExtArgs>>
    ): Prisma__examClient<$Result.GetResult<Prisma.$examPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Exams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {examCountArgs} args - Arguments to filter Exams to count.
     * @example
     * // Count the number of Exams
     * const count = await prisma.exam.count({
     *   where: {
     *     // ... the filter for the Exams we want to count
     *   }
     * })
    **/
    count<T extends examCountArgs>(
      args?: Subset<T, examCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Exam.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExamAggregateArgs>(args: Subset<T, ExamAggregateArgs>): Prisma.PrismaPromise<GetExamAggregateType<T>>

    /**
     * Group by Exam.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {examGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends examGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: examGroupByArgs['orderBy'] }
        : { orderBy?: examGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, examGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the exam model
   */
  readonly fields: examFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for exam.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__examClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    studentExams<T extends exam$studentExamsArgs<ExtArgs> = {}>(args?: Subset<T, exam$studentExamsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$studentExamPayload<ExtArgs>, T, 'findMany'> | Null>;

    categories<T extends exam$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, exam$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the exam model
   */ 
  interface examFieldRefs {
    readonly id: FieldRef<"exam", 'Int'>
    readonly titre: FieldRef<"exam", 'String'>
    readonly createAt: FieldRef<"exam", 'DateTime'>
    readonly updateAt: FieldRef<"exam", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * exam findUnique
   */
  export type examFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exam
     */
    select?: examSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: examInclude<ExtArgs> | null
    /**
     * Filter, which exam to fetch.
     */
    where: examWhereUniqueInput
  }


  /**
   * exam findUniqueOrThrow
   */
  export type examFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exam
     */
    select?: examSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: examInclude<ExtArgs> | null
    /**
     * Filter, which exam to fetch.
     */
    where: examWhereUniqueInput
  }


  /**
   * exam findFirst
   */
  export type examFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exam
     */
    select?: examSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: examInclude<ExtArgs> | null
    /**
     * Filter, which exam to fetch.
     */
    where?: examWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exams to fetch.
     */
    orderBy?: examOrderByWithRelationInput | examOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for exams.
     */
    cursor?: examWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of exams.
     */
    distinct?: ExamScalarFieldEnum | ExamScalarFieldEnum[]
  }


  /**
   * exam findFirstOrThrow
   */
  export type examFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exam
     */
    select?: examSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: examInclude<ExtArgs> | null
    /**
     * Filter, which exam to fetch.
     */
    where?: examWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exams to fetch.
     */
    orderBy?: examOrderByWithRelationInput | examOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for exams.
     */
    cursor?: examWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of exams.
     */
    distinct?: ExamScalarFieldEnum | ExamScalarFieldEnum[]
  }


  /**
   * exam findMany
   */
  export type examFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exam
     */
    select?: examSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: examInclude<ExtArgs> | null
    /**
     * Filter, which exams to fetch.
     */
    where?: examWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exams to fetch.
     */
    orderBy?: examOrderByWithRelationInput | examOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing exams.
     */
    cursor?: examWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exams.
     */
    skip?: number
    distinct?: ExamScalarFieldEnum | ExamScalarFieldEnum[]
  }


  /**
   * exam create
   */
  export type examCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exam
     */
    select?: examSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: examInclude<ExtArgs> | null
    /**
     * The data needed to create a exam.
     */
    data: XOR<examCreateInput, examUncheckedCreateInput>
  }


  /**
   * exam createMany
   */
  export type examCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many exams.
     */
    data: examCreateManyInput | examCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * exam update
   */
  export type examUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exam
     */
    select?: examSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: examInclude<ExtArgs> | null
    /**
     * The data needed to update a exam.
     */
    data: XOR<examUpdateInput, examUncheckedUpdateInput>
    /**
     * Choose, which exam to update.
     */
    where: examWhereUniqueInput
  }


  /**
   * exam updateMany
   */
  export type examUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update exams.
     */
    data: XOR<examUpdateManyMutationInput, examUncheckedUpdateManyInput>
    /**
     * Filter which exams to update
     */
    where?: examWhereInput
  }


  /**
   * exam upsert
   */
  export type examUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exam
     */
    select?: examSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: examInclude<ExtArgs> | null
    /**
     * The filter to search for the exam to update in case it exists.
     */
    where: examWhereUniqueInput
    /**
     * In case the exam found by the `where` argument doesn't exist, create a new exam with this data.
     */
    create: XOR<examCreateInput, examUncheckedCreateInput>
    /**
     * In case the exam was found with the provided `where` argument, update it with this data.
     */
    update: XOR<examUpdateInput, examUncheckedUpdateInput>
  }


  /**
   * exam delete
   */
  export type examDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exam
     */
    select?: examSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: examInclude<ExtArgs> | null
    /**
     * Filter which exam to delete.
     */
    where: examWhereUniqueInput
  }


  /**
   * exam deleteMany
   */
  export type examDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which exams to delete
     */
    where?: examWhereInput
  }


  /**
   * exam.studentExams
   */
  export type exam$studentExamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studentExam
     */
    select?: studentExamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: studentExamInclude<ExtArgs> | null
    where?: studentExamWhereInput
    orderBy?: studentExamOrderByWithRelationInput | studentExamOrderByWithRelationInput[]
    cursor?: studentExamWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentExamScalarFieldEnum | StudentExamScalarFieldEnum[]
  }


  /**
   * exam.categories
   */
  export type exam$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    where?: categoryWhereInput
    orderBy?: categoryOrderByWithRelationInput | categoryOrderByWithRelationInput[]
    cursor?: categoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }


  /**
   * exam without action
   */
  export type examDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exam
     */
    select?: examSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: examInclude<ExtArgs> | null
  }



  /**
   * Model category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
    ExamId: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
    ExamId: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    nom: string | null
    ExamId: number | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    ExamId: number | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    nom: number
    ExamId: number
    createAt: number
    updateAt: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
    ExamId?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
    ExamId?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    nom?: true
    ExamId?: true
    createAt?: true
    updateAt?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    nom?: true
    ExamId?: true
    createAt?: true
    updateAt?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    nom?: true
    ExamId?: true
    createAt?: true
    updateAt?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which category to aggregate.
     */
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoryOrderByWithRelationInput | categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type categoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: categoryWhereInput
    orderBy?: categoryOrderByWithAggregationInput | categoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: categoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: number
    nom: string
    ExamId: number
    createAt: Date
    updateAt: Date
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends categoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type categorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    ExamId?: boolean
    createAt?: boolean
    updateAt?: boolean
    exam?: boolean | examDefaultArgs<ExtArgs>
    questions?: boolean | category$questionsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type categorySelectScalar = {
    id?: boolean
    nom?: boolean
    ExamId?: boolean
    createAt?: boolean
    updateAt?: boolean
  }

  export type categoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exam?: boolean | examDefaultArgs<ExtArgs>
    questions?: boolean | category$questionsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $categoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "category"
    objects: {
      exam: Prisma.$examPayload<ExtArgs>
      questions: Prisma.$questionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
      ExamId: number
      createAt: Date
      updateAt: Date
    }, ExtArgs["result"]["category"]>
    composites: {}
  }


  type categoryGetPayload<S extends boolean | null | undefined | categoryDefaultArgs> = $Result.GetResult<Prisma.$categoryPayload, S>

  type categoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<categoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface categoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['category'], meta: { name: 'category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {categoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends categoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, categoryFindUniqueArgs<ExtArgs>>
    ): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Category that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {categoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends categoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, categoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends categoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, categoryFindFirstArgs<ExtArgs>>
    ): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends categoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, categoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends categoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Category.
     * @param {categoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends categoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, categoryCreateArgs<ExtArgs>>
    ): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Categories.
     *     @param {categoryCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const category = await prisma.category.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends categoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {categoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends categoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, categoryDeleteArgs<ExtArgs>>
    ): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Category.
     * @param {categoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends categoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, categoryUpdateArgs<ExtArgs>>
    ): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {categoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends categoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends categoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, categoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {categoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends categoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, categoryUpsertArgs<ExtArgs>>
    ): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends categoryCountArgs>(
      args?: Subset<T, categoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends categoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: categoryGroupByArgs['orderBy'] }
        : { orderBy?: categoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, categoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the category model
   */
  readonly fields: categoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__categoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    exam<T extends examDefaultArgs<ExtArgs> = {}>(args?: Subset<T, examDefaultArgs<ExtArgs>>): Prisma__examClient<$Result.GetResult<Prisma.$examPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    questions<T extends category$questionsArgs<ExtArgs> = {}>(args?: Subset<T, category$questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$questionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the category model
   */ 
  interface categoryFieldRefs {
    readonly id: FieldRef<"category", 'Int'>
    readonly nom: FieldRef<"category", 'String'>
    readonly ExamId: FieldRef<"category", 'Int'>
    readonly createAt: FieldRef<"category", 'DateTime'>
    readonly updateAt: FieldRef<"category", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * category findUnique
   */
  export type categoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter, which category to fetch.
     */
    where: categoryWhereUniqueInput
  }


  /**
   * category findUniqueOrThrow
   */
  export type categoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter, which category to fetch.
     */
    where: categoryWhereUniqueInput
  }


  /**
   * category findFirst
   */
  export type categoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter, which category to fetch.
     */
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoryOrderByWithRelationInput | categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     */
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }


  /**
   * category findFirstOrThrow
   */
  export type categoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter, which category to fetch.
     */
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoryOrderByWithRelationInput | categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     */
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }


  /**
   * category findMany
   */
  export type categoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoryOrderByWithRelationInput | categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing categories.
     */
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }


  /**
   * category create
   */
  export type categoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * The data needed to create a category.
     */
    data: XOR<categoryCreateInput, categoryUncheckedCreateInput>
  }


  /**
   * category createMany
   */
  export type categoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many categories.
     */
    data: categoryCreateManyInput | categoryCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * category update
   */
  export type categoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * The data needed to update a category.
     */
    data: XOR<categoryUpdateInput, categoryUncheckedUpdateInput>
    /**
     * Choose, which category to update.
     */
    where: categoryWhereUniqueInput
  }


  /**
   * category updateMany
   */
  export type categoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update categories.
     */
    data: XOR<categoryUpdateManyMutationInput, categoryUncheckedUpdateManyInput>
    /**
     * Filter which categories to update
     */
    where?: categoryWhereInput
  }


  /**
   * category upsert
   */
  export type categoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * The filter to search for the category to update in case it exists.
     */
    where: categoryWhereUniqueInput
    /**
     * In case the category found by the `where` argument doesn't exist, create a new category with this data.
     */
    create: XOR<categoryCreateInput, categoryUncheckedCreateInput>
    /**
     * In case the category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<categoryUpdateInput, categoryUncheckedUpdateInput>
  }


  /**
   * category delete
   */
  export type categoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter which category to delete.
     */
    where: categoryWhereUniqueInput
  }


  /**
   * category deleteMany
   */
  export type categoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which categories to delete
     */
    where?: categoryWhereInput
  }


  /**
   * category.questions
   */
  export type category$questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question
     */
    select?: questionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionInclude<ExtArgs> | null
    where?: questionWhereInput
    orderBy?: questionOrderByWithRelationInput | questionOrderByWithRelationInput[]
    cursor?: questionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }


  /**
   * category without action
   */
  export type categoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoryInclude<ExtArgs> | null
  }



  /**
   * Model question
   */

  export type AggregateQuestion = {
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  export type QuestionAvgAggregateOutputType = {
    id: number | null
    CategoryId: number | null
  }

  export type QuestionSumAggregateOutputType = {
    id: number | null
    CategoryId: number | null
  }

  export type QuestionMinAggregateOutputType = {
    id: number | null
    titre: string | null
    CategoryId: number | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type QuestionMaxAggregateOutputType = {
    id: number | null
    titre: string | null
    CategoryId: number | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type QuestionCountAggregateOutputType = {
    id: number
    titre: number
    CategoryId: number
    createAt: number
    updateAt: number
    _all: number
  }


  export type QuestionAvgAggregateInputType = {
    id?: true
    CategoryId?: true
  }

  export type QuestionSumAggregateInputType = {
    id?: true
    CategoryId?: true
  }

  export type QuestionMinAggregateInputType = {
    id?: true
    titre?: true
    CategoryId?: true
    createAt?: true
    updateAt?: true
  }

  export type QuestionMaxAggregateInputType = {
    id?: true
    titre?: true
    CategoryId?: true
    createAt?: true
    updateAt?: true
  }

  export type QuestionCountAggregateInputType = {
    id?: true
    titre?: true
    CategoryId?: true
    createAt?: true
    updateAt?: true
    _all?: true
  }

  export type QuestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which question to aggregate.
     */
    where?: questionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questions to fetch.
     */
    orderBy?: questionOrderByWithRelationInput | questionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: questionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned questions
    **/
    _count?: true | QuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionMaxAggregateInputType
  }

  export type GetQuestionAggregateType<T extends QuestionAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestion[P]>
      : GetScalarType<T[P], AggregateQuestion[P]>
  }




  export type questionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: questionWhereInput
    orderBy?: questionOrderByWithAggregationInput | questionOrderByWithAggregationInput[]
    by: QuestionScalarFieldEnum[] | QuestionScalarFieldEnum
    having?: questionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionCountAggregateInputType | true
    _avg?: QuestionAvgAggregateInputType
    _sum?: QuestionSumAggregateInputType
    _min?: QuestionMinAggregateInputType
    _max?: QuestionMaxAggregateInputType
  }

  export type QuestionGroupByOutputType = {
    id: number
    titre: string
    CategoryId: number
    createAt: Date
    updateAt: Date
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  type GetQuestionGroupByPayload<T extends questionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionGroupByOutputType[P]>
        }
      >
    >


  export type questionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titre?: boolean
    CategoryId?: boolean
    createAt?: boolean
    updateAt?: boolean
    category?: boolean | categoryDefaultArgs<ExtArgs>
    responses?: boolean | question$responsesArgs<ExtArgs>
    _count?: boolean | QuestionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type questionSelectScalar = {
    id?: boolean
    titre?: boolean
    CategoryId?: boolean
    createAt?: boolean
    updateAt?: boolean
  }

  export type questionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | categoryDefaultArgs<ExtArgs>
    responses?: boolean | question$responsesArgs<ExtArgs>
    _count?: boolean | QuestionCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $questionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "question"
    objects: {
      category: Prisma.$categoryPayload<ExtArgs>
      responses: Prisma.$responsePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      titre: string
      CategoryId: number
      createAt: Date
      updateAt: Date
    }, ExtArgs["result"]["question"]>
    composites: {}
  }


  type questionGetPayload<S extends boolean | null | undefined | questionDefaultArgs> = $Result.GetResult<Prisma.$questionPayload, S>

  type questionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<questionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: QuestionCountAggregateInputType | true
    }

  export interface questionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['question'], meta: { name: 'question' } }
    /**
     * Find zero or one Question that matches the filter.
     * @param {questionFindUniqueArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends questionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, questionFindUniqueArgs<ExtArgs>>
    ): Prisma__questionClient<$Result.GetResult<Prisma.$questionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Question that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {questionFindUniqueOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends questionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, questionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__questionClient<$Result.GetResult<Prisma.$questionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Question that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionFindFirstArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends questionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, questionFindFirstArgs<ExtArgs>>
    ): Prisma__questionClient<$Result.GetResult<Prisma.$questionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Question that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionFindFirstOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends questionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, questionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__questionClient<$Result.GetResult<Prisma.$questionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questions
     * const questions = await prisma.question.findMany()
     * 
     * // Get first 10 Questions
     * const questions = await prisma.question.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionWithIdOnly = await prisma.question.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends questionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, questionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$questionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Question.
     * @param {questionCreateArgs} args - Arguments to create a Question.
     * @example
     * // Create one Question
     * const Question = await prisma.question.create({
     *   data: {
     *     // ... data to create a Question
     *   }
     * })
     * 
    **/
    create<T extends questionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, questionCreateArgs<ExtArgs>>
    ): Prisma__questionClient<$Result.GetResult<Prisma.$questionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Questions.
     *     @param {questionCreateManyArgs} args - Arguments to create many Questions.
     *     @example
     *     // Create many Questions
     *     const question = await prisma.question.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends questionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, questionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Question.
     * @param {questionDeleteArgs} args - Arguments to delete one Question.
     * @example
     * // Delete one Question
     * const Question = await prisma.question.delete({
     *   where: {
     *     // ... filter to delete one Question
     *   }
     * })
     * 
    **/
    delete<T extends questionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, questionDeleteArgs<ExtArgs>>
    ): Prisma__questionClient<$Result.GetResult<Prisma.$questionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Question.
     * @param {questionUpdateArgs} args - Arguments to update one Question.
     * @example
     * // Update one Question
     * const question = await prisma.question.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends questionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, questionUpdateArgs<ExtArgs>>
    ): Prisma__questionClient<$Result.GetResult<Prisma.$questionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Questions.
     * @param {questionDeleteManyArgs} args - Arguments to filter Questions to delete.
     * @example
     * // Delete a few Questions
     * const { count } = await prisma.question.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends questionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, questionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questions
     * const question = await prisma.question.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends questionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, questionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Question.
     * @param {questionUpsertArgs} args - Arguments to update or create a Question.
     * @example
     * // Update or create a Question
     * const question = await prisma.question.upsert({
     *   create: {
     *     // ... data to create a Question
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Question we want to update
     *   }
     * })
    **/
    upsert<T extends questionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, questionUpsertArgs<ExtArgs>>
    ): Prisma__questionClient<$Result.GetResult<Prisma.$questionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionCountArgs} args - Arguments to filter Questions to count.
     * @example
     * // Count the number of Questions
     * const count = await prisma.question.count({
     *   where: {
     *     // ... the filter for the Questions we want to count
     *   }
     * })
    **/
    count<T extends questionCountArgs>(
      args?: Subset<T, questionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionAggregateArgs>(args: Subset<T, QuestionAggregateArgs>): Prisma.PrismaPromise<GetQuestionAggregateType<T>>

    /**
     * Group by Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends questionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: questionGroupByArgs['orderBy'] }
        : { orderBy?: questionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, questionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the question model
   */
  readonly fields: questionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for question.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__questionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    category<T extends categoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, categoryDefaultArgs<ExtArgs>>): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    responses<T extends question$responsesArgs<ExtArgs> = {}>(args?: Subset<T, question$responsesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$responsePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the question model
   */ 
  interface questionFieldRefs {
    readonly id: FieldRef<"question", 'Int'>
    readonly titre: FieldRef<"question", 'String'>
    readonly CategoryId: FieldRef<"question", 'Int'>
    readonly createAt: FieldRef<"question", 'DateTime'>
    readonly updateAt: FieldRef<"question", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * question findUnique
   */
  export type questionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question
     */
    select?: questionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionInclude<ExtArgs> | null
    /**
     * Filter, which question to fetch.
     */
    where: questionWhereUniqueInput
  }


  /**
   * question findUniqueOrThrow
   */
  export type questionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question
     */
    select?: questionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionInclude<ExtArgs> | null
    /**
     * Filter, which question to fetch.
     */
    where: questionWhereUniqueInput
  }


  /**
   * question findFirst
   */
  export type questionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question
     */
    select?: questionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionInclude<ExtArgs> | null
    /**
     * Filter, which question to fetch.
     */
    where?: questionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questions to fetch.
     */
    orderBy?: questionOrderByWithRelationInput | questionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for questions.
     */
    cursor?: questionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }


  /**
   * question findFirstOrThrow
   */
  export type questionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question
     */
    select?: questionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionInclude<ExtArgs> | null
    /**
     * Filter, which question to fetch.
     */
    where?: questionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questions to fetch.
     */
    orderBy?: questionOrderByWithRelationInput | questionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for questions.
     */
    cursor?: questionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }


  /**
   * question findMany
   */
  export type questionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question
     */
    select?: questionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionInclude<ExtArgs> | null
    /**
     * Filter, which questions to fetch.
     */
    where?: questionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questions to fetch.
     */
    orderBy?: questionOrderByWithRelationInput | questionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing questions.
     */
    cursor?: questionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions.
     */
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }


  /**
   * question create
   */
  export type questionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question
     */
    select?: questionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionInclude<ExtArgs> | null
    /**
     * The data needed to create a question.
     */
    data: XOR<questionCreateInput, questionUncheckedCreateInput>
  }


  /**
   * question createMany
   */
  export type questionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many questions.
     */
    data: questionCreateManyInput | questionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * question update
   */
  export type questionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question
     */
    select?: questionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionInclude<ExtArgs> | null
    /**
     * The data needed to update a question.
     */
    data: XOR<questionUpdateInput, questionUncheckedUpdateInput>
    /**
     * Choose, which question to update.
     */
    where: questionWhereUniqueInput
  }


  /**
   * question updateMany
   */
  export type questionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update questions.
     */
    data: XOR<questionUpdateManyMutationInput, questionUncheckedUpdateManyInput>
    /**
     * Filter which questions to update
     */
    where?: questionWhereInput
  }


  /**
   * question upsert
   */
  export type questionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question
     */
    select?: questionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionInclude<ExtArgs> | null
    /**
     * The filter to search for the question to update in case it exists.
     */
    where: questionWhereUniqueInput
    /**
     * In case the question found by the `where` argument doesn't exist, create a new question with this data.
     */
    create: XOR<questionCreateInput, questionUncheckedCreateInput>
    /**
     * In case the question was found with the provided `where` argument, update it with this data.
     */
    update: XOR<questionUpdateInput, questionUncheckedUpdateInput>
  }


  /**
   * question delete
   */
  export type questionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question
     */
    select?: questionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionInclude<ExtArgs> | null
    /**
     * Filter which question to delete.
     */
    where: questionWhereUniqueInput
  }


  /**
   * question deleteMany
   */
  export type questionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which questions to delete
     */
    where?: questionWhereInput
  }


  /**
   * question.responses
   */
  export type question$responsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the response
     */
    select?: responseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: responseInclude<ExtArgs> | null
    where?: responseWhereInput
    orderBy?: responseOrderByWithRelationInput | responseOrderByWithRelationInput[]
    cursor?: responseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResponseScalarFieldEnum | ResponseScalarFieldEnum[]
  }


  /**
   * question without action
   */
  export type questionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the question
     */
    select?: questionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionInclude<ExtArgs> | null
  }



  /**
   * Model response
   */

  export type AggregateResponse = {
    _count: ResponseCountAggregateOutputType | null
    _avg: ResponseAvgAggregateOutputType | null
    _sum: ResponseSumAggregateOutputType | null
    _min: ResponseMinAggregateOutputType | null
    _max: ResponseMaxAggregateOutputType | null
  }

  export type ResponseAvgAggregateOutputType = {
    id: number | null
    QuestionId: number | null
  }

  export type ResponseSumAggregateOutputType = {
    id: number | null
    QuestionId: number | null
  }

  export type ResponseMinAggregateOutputType = {
    id: number | null
    titre: string | null
    QuestionId: number | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type ResponseMaxAggregateOutputType = {
    id: number | null
    titre: string | null
    QuestionId: number | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type ResponseCountAggregateOutputType = {
    id: number
    titre: number
    QuestionId: number
    createAt: number
    updateAt: number
    _all: number
  }


  export type ResponseAvgAggregateInputType = {
    id?: true
    QuestionId?: true
  }

  export type ResponseSumAggregateInputType = {
    id?: true
    QuestionId?: true
  }

  export type ResponseMinAggregateInputType = {
    id?: true
    titre?: true
    QuestionId?: true
    createAt?: true
    updateAt?: true
  }

  export type ResponseMaxAggregateInputType = {
    id?: true
    titre?: true
    QuestionId?: true
    createAt?: true
    updateAt?: true
  }

  export type ResponseCountAggregateInputType = {
    id?: true
    titre?: true
    QuestionId?: true
    createAt?: true
    updateAt?: true
    _all?: true
  }

  export type ResponseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which response to aggregate.
     */
    where?: responseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of responses to fetch.
     */
    orderBy?: responseOrderByWithRelationInput | responseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: responseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` responses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` responses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned responses
    **/
    _count?: true | ResponseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResponseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResponseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResponseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResponseMaxAggregateInputType
  }

  export type GetResponseAggregateType<T extends ResponseAggregateArgs> = {
        [P in keyof T & keyof AggregateResponse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResponse[P]>
      : GetScalarType<T[P], AggregateResponse[P]>
  }




  export type responseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: responseWhereInput
    orderBy?: responseOrderByWithAggregationInput | responseOrderByWithAggregationInput[]
    by: ResponseScalarFieldEnum[] | ResponseScalarFieldEnum
    having?: responseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResponseCountAggregateInputType | true
    _avg?: ResponseAvgAggregateInputType
    _sum?: ResponseSumAggregateInputType
    _min?: ResponseMinAggregateInputType
    _max?: ResponseMaxAggregateInputType
  }

  export type ResponseGroupByOutputType = {
    id: number
    titre: string
    QuestionId: number
    createAt: Date
    updateAt: Date
    _count: ResponseCountAggregateOutputType | null
    _avg: ResponseAvgAggregateOutputType | null
    _sum: ResponseSumAggregateOutputType | null
    _min: ResponseMinAggregateOutputType | null
    _max: ResponseMaxAggregateOutputType | null
  }

  type GetResponseGroupByPayload<T extends responseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResponseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResponseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResponseGroupByOutputType[P]>
            : GetScalarType<T[P], ResponseGroupByOutputType[P]>
        }
      >
    >


  export type responseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titre?: boolean
    QuestionId?: boolean
    createAt?: boolean
    updateAt?: boolean
    question?: boolean | questionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["response"]>

  export type responseSelectScalar = {
    id?: boolean
    titre?: boolean
    QuestionId?: boolean
    createAt?: boolean
    updateAt?: boolean
  }

  export type responseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | questionDefaultArgs<ExtArgs>
  }


  export type $responsePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "response"
    objects: {
      question: Prisma.$questionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      titre: string
      QuestionId: number
      createAt: Date
      updateAt: Date
    }, ExtArgs["result"]["response"]>
    composites: {}
  }


  type responseGetPayload<S extends boolean | null | undefined | responseDefaultArgs> = $Result.GetResult<Prisma.$responsePayload, S>

  type responseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<responseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ResponseCountAggregateInputType | true
    }

  export interface responseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['response'], meta: { name: 'response' } }
    /**
     * Find zero or one Response that matches the filter.
     * @param {responseFindUniqueArgs} args - Arguments to find a Response
     * @example
     * // Get one Response
     * const response = await prisma.response.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends responseFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, responseFindUniqueArgs<ExtArgs>>
    ): Prisma__responseClient<$Result.GetResult<Prisma.$responsePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Response that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {responseFindUniqueOrThrowArgs} args - Arguments to find a Response
     * @example
     * // Get one Response
     * const response = await prisma.response.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends responseFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, responseFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__responseClient<$Result.GetResult<Prisma.$responsePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Response that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {responseFindFirstArgs} args - Arguments to find a Response
     * @example
     * // Get one Response
     * const response = await prisma.response.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends responseFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, responseFindFirstArgs<ExtArgs>>
    ): Prisma__responseClient<$Result.GetResult<Prisma.$responsePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Response that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {responseFindFirstOrThrowArgs} args - Arguments to find a Response
     * @example
     * // Get one Response
     * const response = await prisma.response.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends responseFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, responseFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__responseClient<$Result.GetResult<Prisma.$responsePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Responses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {responseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Responses
     * const responses = await prisma.response.findMany()
     * 
     * // Get first 10 Responses
     * const responses = await prisma.response.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const responseWithIdOnly = await prisma.response.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends responseFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, responseFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$responsePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Response.
     * @param {responseCreateArgs} args - Arguments to create a Response.
     * @example
     * // Create one Response
     * const Response = await prisma.response.create({
     *   data: {
     *     // ... data to create a Response
     *   }
     * })
     * 
    **/
    create<T extends responseCreateArgs<ExtArgs>>(
      args: SelectSubset<T, responseCreateArgs<ExtArgs>>
    ): Prisma__responseClient<$Result.GetResult<Prisma.$responsePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Responses.
     *     @param {responseCreateManyArgs} args - Arguments to create many Responses.
     *     @example
     *     // Create many Responses
     *     const response = await prisma.response.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends responseCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, responseCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Response.
     * @param {responseDeleteArgs} args - Arguments to delete one Response.
     * @example
     * // Delete one Response
     * const Response = await prisma.response.delete({
     *   where: {
     *     // ... filter to delete one Response
     *   }
     * })
     * 
    **/
    delete<T extends responseDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, responseDeleteArgs<ExtArgs>>
    ): Prisma__responseClient<$Result.GetResult<Prisma.$responsePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Response.
     * @param {responseUpdateArgs} args - Arguments to update one Response.
     * @example
     * // Update one Response
     * const response = await prisma.response.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends responseUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, responseUpdateArgs<ExtArgs>>
    ): Prisma__responseClient<$Result.GetResult<Prisma.$responsePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Responses.
     * @param {responseDeleteManyArgs} args - Arguments to filter Responses to delete.
     * @example
     * // Delete a few Responses
     * const { count } = await prisma.response.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends responseDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, responseDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Responses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {responseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Responses
     * const response = await prisma.response.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends responseUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, responseUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Response.
     * @param {responseUpsertArgs} args - Arguments to update or create a Response.
     * @example
     * // Update or create a Response
     * const response = await prisma.response.upsert({
     *   create: {
     *     // ... data to create a Response
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Response we want to update
     *   }
     * })
    **/
    upsert<T extends responseUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, responseUpsertArgs<ExtArgs>>
    ): Prisma__responseClient<$Result.GetResult<Prisma.$responsePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Responses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {responseCountArgs} args - Arguments to filter Responses to count.
     * @example
     * // Count the number of Responses
     * const count = await prisma.response.count({
     *   where: {
     *     // ... the filter for the Responses we want to count
     *   }
     * })
    **/
    count<T extends responseCountArgs>(
      args?: Subset<T, responseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResponseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Response.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResponseAggregateArgs>(args: Subset<T, ResponseAggregateArgs>): Prisma.PrismaPromise<GetResponseAggregateType<T>>

    /**
     * Group by Response.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {responseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends responseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: responseGroupByArgs['orderBy'] }
        : { orderBy?: responseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, responseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResponseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the response model
   */
  readonly fields: responseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for response.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__responseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    question<T extends questionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, questionDefaultArgs<ExtArgs>>): Prisma__questionClient<$Result.GetResult<Prisma.$questionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the response model
   */ 
  interface responseFieldRefs {
    readonly id: FieldRef<"response", 'Int'>
    readonly titre: FieldRef<"response", 'String'>
    readonly QuestionId: FieldRef<"response", 'Int'>
    readonly createAt: FieldRef<"response", 'DateTime'>
    readonly updateAt: FieldRef<"response", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * response findUnique
   */
  export type responseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the response
     */
    select?: responseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: responseInclude<ExtArgs> | null
    /**
     * Filter, which response to fetch.
     */
    where: responseWhereUniqueInput
  }


  /**
   * response findUniqueOrThrow
   */
  export type responseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the response
     */
    select?: responseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: responseInclude<ExtArgs> | null
    /**
     * Filter, which response to fetch.
     */
    where: responseWhereUniqueInput
  }


  /**
   * response findFirst
   */
  export type responseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the response
     */
    select?: responseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: responseInclude<ExtArgs> | null
    /**
     * Filter, which response to fetch.
     */
    where?: responseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of responses to fetch.
     */
    orderBy?: responseOrderByWithRelationInput | responseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for responses.
     */
    cursor?: responseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` responses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` responses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of responses.
     */
    distinct?: ResponseScalarFieldEnum | ResponseScalarFieldEnum[]
  }


  /**
   * response findFirstOrThrow
   */
  export type responseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the response
     */
    select?: responseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: responseInclude<ExtArgs> | null
    /**
     * Filter, which response to fetch.
     */
    where?: responseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of responses to fetch.
     */
    orderBy?: responseOrderByWithRelationInput | responseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for responses.
     */
    cursor?: responseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` responses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` responses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of responses.
     */
    distinct?: ResponseScalarFieldEnum | ResponseScalarFieldEnum[]
  }


  /**
   * response findMany
   */
  export type responseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the response
     */
    select?: responseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: responseInclude<ExtArgs> | null
    /**
     * Filter, which responses to fetch.
     */
    where?: responseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of responses to fetch.
     */
    orderBy?: responseOrderByWithRelationInput | responseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing responses.
     */
    cursor?: responseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` responses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` responses.
     */
    skip?: number
    distinct?: ResponseScalarFieldEnum | ResponseScalarFieldEnum[]
  }


  /**
   * response create
   */
  export type responseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the response
     */
    select?: responseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: responseInclude<ExtArgs> | null
    /**
     * The data needed to create a response.
     */
    data: XOR<responseCreateInput, responseUncheckedCreateInput>
  }


  /**
   * response createMany
   */
  export type responseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many responses.
     */
    data: responseCreateManyInput | responseCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * response update
   */
  export type responseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the response
     */
    select?: responseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: responseInclude<ExtArgs> | null
    /**
     * The data needed to update a response.
     */
    data: XOR<responseUpdateInput, responseUncheckedUpdateInput>
    /**
     * Choose, which response to update.
     */
    where: responseWhereUniqueInput
  }


  /**
   * response updateMany
   */
  export type responseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update responses.
     */
    data: XOR<responseUpdateManyMutationInput, responseUncheckedUpdateManyInput>
    /**
     * Filter which responses to update
     */
    where?: responseWhereInput
  }


  /**
   * response upsert
   */
  export type responseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the response
     */
    select?: responseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: responseInclude<ExtArgs> | null
    /**
     * The filter to search for the response to update in case it exists.
     */
    where: responseWhereUniqueInput
    /**
     * In case the response found by the `where` argument doesn't exist, create a new response with this data.
     */
    create: XOR<responseCreateInput, responseUncheckedCreateInput>
    /**
     * In case the response was found with the provided `where` argument, update it with this data.
     */
    update: XOR<responseUpdateInput, responseUncheckedUpdateInput>
  }


  /**
   * response delete
   */
  export type responseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the response
     */
    select?: responseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: responseInclude<ExtArgs> | null
    /**
     * Filter which response to delete.
     */
    where: responseWhereUniqueInput
  }


  /**
   * response deleteMany
   */
  export type responseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which responses to delete
     */
    where?: responseWhereInput
  }


  /**
   * response without action
   */
  export type responseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the response
     */
    select?: responseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: responseInclude<ExtArgs> | null
  }



  /**
   * Model studentExam
   */

  export type AggregateStudentExam = {
    _count: StudentExamCountAggregateOutputType | null
    _avg: StudentExamAvgAggregateOutputType | null
    _sum: StudentExamSumAggregateOutputType | null
    _min: StudentExamMinAggregateOutputType | null
    _max: StudentExamMaxAggregateOutputType | null
  }

  export type StudentExamAvgAggregateOutputType = {
    id: number | null
    StudentId: number | null
    ExamId: number | null
  }

  export type StudentExamSumAggregateOutputType = {
    id: number | null
    StudentId: number | null
    ExamId: number | null
  }

  export type StudentExamMinAggregateOutputType = {
    id: number | null
    StudentId: number | null
    ExamId: number | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type StudentExamMaxAggregateOutputType = {
    id: number | null
    StudentId: number | null
    ExamId: number | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type StudentExamCountAggregateOutputType = {
    id: number
    StudentId: number
    ExamId: number
    createAt: number
    updateAt: number
    _all: number
  }


  export type StudentExamAvgAggregateInputType = {
    id?: true
    StudentId?: true
    ExamId?: true
  }

  export type StudentExamSumAggregateInputType = {
    id?: true
    StudentId?: true
    ExamId?: true
  }

  export type StudentExamMinAggregateInputType = {
    id?: true
    StudentId?: true
    ExamId?: true
    createAt?: true
    updateAt?: true
  }

  export type StudentExamMaxAggregateInputType = {
    id?: true
    StudentId?: true
    ExamId?: true
    createAt?: true
    updateAt?: true
  }

  export type StudentExamCountAggregateInputType = {
    id?: true
    StudentId?: true
    ExamId?: true
    createAt?: true
    updateAt?: true
    _all?: true
  }

  export type StudentExamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which studentExam to aggregate.
     */
    where?: studentExamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of studentExams to fetch.
     */
    orderBy?: studentExamOrderByWithRelationInput | studentExamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: studentExamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` studentExams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` studentExams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned studentExams
    **/
    _count?: true | StudentExamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentExamAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentExamSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentExamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentExamMaxAggregateInputType
  }

  export type GetStudentExamAggregateType<T extends StudentExamAggregateArgs> = {
        [P in keyof T & keyof AggregateStudentExam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudentExam[P]>
      : GetScalarType<T[P], AggregateStudentExam[P]>
  }




  export type studentExamGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: studentExamWhereInput
    orderBy?: studentExamOrderByWithAggregationInput | studentExamOrderByWithAggregationInput[]
    by: StudentExamScalarFieldEnum[] | StudentExamScalarFieldEnum
    having?: studentExamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentExamCountAggregateInputType | true
    _avg?: StudentExamAvgAggregateInputType
    _sum?: StudentExamSumAggregateInputType
    _min?: StudentExamMinAggregateInputType
    _max?: StudentExamMaxAggregateInputType
  }

  export type StudentExamGroupByOutputType = {
    id: number
    StudentId: number
    ExamId: number
    createAt: Date
    updateAt: Date
    _count: StudentExamCountAggregateOutputType | null
    _avg: StudentExamAvgAggregateOutputType | null
    _sum: StudentExamSumAggregateOutputType | null
    _min: StudentExamMinAggregateOutputType | null
    _max: StudentExamMaxAggregateOutputType | null
  }

  type GetStudentExamGroupByPayload<T extends studentExamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentExamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentExamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentExamGroupByOutputType[P]>
            : GetScalarType<T[P], StudentExamGroupByOutputType[P]>
        }
      >
    >


  export type studentExamSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    StudentId?: boolean
    ExamId?: boolean
    createAt?: boolean
    updateAt?: boolean
    student?: boolean | studentDefaultArgs<ExtArgs>
    exam?: boolean | examDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentExam"]>

  export type studentExamSelectScalar = {
    id?: boolean
    StudentId?: boolean
    ExamId?: boolean
    createAt?: boolean
    updateAt?: boolean
  }

  export type studentExamInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | studentDefaultArgs<ExtArgs>
    exam?: boolean | examDefaultArgs<ExtArgs>
  }


  export type $studentExamPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "studentExam"
    objects: {
      student: Prisma.$studentPayload<ExtArgs>
      exam: Prisma.$examPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      StudentId: number
      ExamId: number
      createAt: Date
      updateAt: Date
    }, ExtArgs["result"]["studentExam"]>
    composites: {}
  }


  type studentExamGetPayload<S extends boolean | null | undefined | studentExamDefaultArgs> = $Result.GetResult<Prisma.$studentExamPayload, S>

  type studentExamCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<studentExamFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StudentExamCountAggregateInputType | true
    }

  export interface studentExamDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['studentExam'], meta: { name: 'studentExam' } }
    /**
     * Find zero or one StudentExam that matches the filter.
     * @param {studentExamFindUniqueArgs} args - Arguments to find a StudentExam
     * @example
     * // Get one StudentExam
     * const studentExam = await prisma.studentExam.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends studentExamFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, studentExamFindUniqueArgs<ExtArgs>>
    ): Prisma__studentExamClient<$Result.GetResult<Prisma.$studentExamPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one StudentExam that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {studentExamFindUniqueOrThrowArgs} args - Arguments to find a StudentExam
     * @example
     * // Get one StudentExam
     * const studentExam = await prisma.studentExam.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends studentExamFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, studentExamFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__studentExamClient<$Result.GetResult<Prisma.$studentExamPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first StudentExam that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentExamFindFirstArgs} args - Arguments to find a StudentExam
     * @example
     * // Get one StudentExam
     * const studentExam = await prisma.studentExam.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends studentExamFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, studentExamFindFirstArgs<ExtArgs>>
    ): Prisma__studentExamClient<$Result.GetResult<Prisma.$studentExamPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first StudentExam that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentExamFindFirstOrThrowArgs} args - Arguments to find a StudentExam
     * @example
     * // Get one StudentExam
     * const studentExam = await prisma.studentExam.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends studentExamFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, studentExamFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__studentExamClient<$Result.GetResult<Prisma.$studentExamPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more StudentExams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentExamFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudentExams
     * const studentExams = await prisma.studentExam.findMany()
     * 
     * // Get first 10 StudentExams
     * const studentExams = await prisma.studentExam.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentExamWithIdOnly = await prisma.studentExam.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends studentExamFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, studentExamFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$studentExamPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a StudentExam.
     * @param {studentExamCreateArgs} args - Arguments to create a StudentExam.
     * @example
     * // Create one StudentExam
     * const StudentExam = await prisma.studentExam.create({
     *   data: {
     *     // ... data to create a StudentExam
     *   }
     * })
     * 
    **/
    create<T extends studentExamCreateArgs<ExtArgs>>(
      args: SelectSubset<T, studentExamCreateArgs<ExtArgs>>
    ): Prisma__studentExamClient<$Result.GetResult<Prisma.$studentExamPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many StudentExams.
     *     @param {studentExamCreateManyArgs} args - Arguments to create many StudentExams.
     *     @example
     *     // Create many StudentExams
     *     const studentExam = await prisma.studentExam.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends studentExamCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, studentExamCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a StudentExam.
     * @param {studentExamDeleteArgs} args - Arguments to delete one StudentExam.
     * @example
     * // Delete one StudentExam
     * const StudentExam = await prisma.studentExam.delete({
     *   where: {
     *     // ... filter to delete one StudentExam
     *   }
     * })
     * 
    **/
    delete<T extends studentExamDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, studentExamDeleteArgs<ExtArgs>>
    ): Prisma__studentExamClient<$Result.GetResult<Prisma.$studentExamPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one StudentExam.
     * @param {studentExamUpdateArgs} args - Arguments to update one StudentExam.
     * @example
     * // Update one StudentExam
     * const studentExam = await prisma.studentExam.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends studentExamUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, studentExamUpdateArgs<ExtArgs>>
    ): Prisma__studentExamClient<$Result.GetResult<Prisma.$studentExamPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more StudentExams.
     * @param {studentExamDeleteManyArgs} args - Arguments to filter StudentExams to delete.
     * @example
     * // Delete a few StudentExams
     * const { count } = await prisma.studentExam.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends studentExamDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, studentExamDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentExams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentExamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudentExams
     * const studentExam = await prisma.studentExam.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends studentExamUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, studentExamUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StudentExam.
     * @param {studentExamUpsertArgs} args - Arguments to update or create a StudentExam.
     * @example
     * // Update or create a StudentExam
     * const studentExam = await prisma.studentExam.upsert({
     *   create: {
     *     // ... data to create a StudentExam
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudentExam we want to update
     *   }
     * })
    **/
    upsert<T extends studentExamUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, studentExamUpsertArgs<ExtArgs>>
    ): Prisma__studentExamClient<$Result.GetResult<Prisma.$studentExamPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of StudentExams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentExamCountArgs} args - Arguments to filter StudentExams to count.
     * @example
     * // Count the number of StudentExams
     * const count = await prisma.studentExam.count({
     *   where: {
     *     // ... the filter for the StudentExams we want to count
     *   }
     * })
    **/
    count<T extends studentExamCountArgs>(
      args?: Subset<T, studentExamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentExamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudentExam.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentExamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentExamAggregateArgs>(args: Subset<T, StudentExamAggregateArgs>): Prisma.PrismaPromise<GetStudentExamAggregateType<T>>

    /**
     * Group by StudentExam.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentExamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends studentExamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: studentExamGroupByArgs['orderBy'] }
        : { orderBy?: studentExamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, studentExamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentExamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the studentExam model
   */
  readonly fields: studentExamFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for studentExam.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__studentExamClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    student<T extends studentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, studentDefaultArgs<ExtArgs>>): Prisma__studentClient<$Result.GetResult<Prisma.$studentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    exam<T extends examDefaultArgs<ExtArgs> = {}>(args?: Subset<T, examDefaultArgs<ExtArgs>>): Prisma__examClient<$Result.GetResult<Prisma.$examPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the studentExam model
   */ 
  interface studentExamFieldRefs {
    readonly id: FieldRef<"studentExam", 'Int'>
    readonly StudentId: FieldRef<"studentExam", 'Int'>
    readonly ExamId: FieldRef<"studentExam", 'Int'>
    readonly createAt: FieldRef<"studentExam", 'DateTime'>
    readonly updateAt: FieldRef<"studentExam", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * studentExam findUnique
   */
  export type studentExamFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studentExam
     */
    select?: studentExamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: studentExamInclude<ExtArgs> | null
    /**
     * Filter, which studentExam to fetch.
     */
    where: studentExamWhereUniqueInput
  }


  /**
   * studentExam findUniqueOrThrow
   */
  export type studentExamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studentExam
     */
    select?: studentExamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: studentExamInclude<ExtArgs> | null
    /**
     * Filter, which studentExam to fetch.
     */
    where: studentExamWhereUniqueInput
  }


  /**
   * studentExam findFirst
   */
  export type studentExamFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studentExam
     */
    select?: studentExamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: studentExamInclude<ExtArgs> | null
    /**
     * Filter, which studentExam to fetch.
     */
    where?: studentExamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of studentExams to fetch.
     */
    orderBy?: studentExamOrderByWithRelationInput | studentExamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for studentExams.
     */
    cursor?: studentExamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` studentExams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` studentExams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of studentExams.
     */
    distinct?: StudentExamScalarFieldEnum | StudentExamScalarFieldEnum[]
  }


  /**
   * studentExam findFirstOrThrow
   */
  export type studentExamFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studentExam
     */
    select?: studentExamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: studentExamInclude<ExtArgs> | null
    /**
     * Filter, which studentExam to fetch.
     */
    where?: studentExamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of studentExams to fetch.
     */
    orderBy?: studentExamOrderByWithRelationInput | studentExamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for studentExams.
     */
    cursor?: studentExamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` studentExams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` studentExams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of studentExams.
     */
    distinct?: StudentExamScalarFieldEnum | StudentExamScalarFieldEnum[]
  }


  /**
   * studentExam findMany
   */
  export type studentExamFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studentExam
     */
    select?: studentExamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: studentExamInclude<ExtArgs> | null
    /**
     * Filter, which studentExams to fetch.
     */
    where?: studentExamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of studentExams to fetch.
     */
    orderBy?: studentExamOrderByWithRelationInput | studentExamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing studentExams.
     */
    cursor?: studentExamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` studentExams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` studentExams.
     */
    skip?: number
    distinct?: StudentExamScalarFieldEnum | StudentExamScalarFieldEnum[]
  }


  /**
   * studentExam create
   */
  export type studentExamCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studentExam
     */
    select?: studentExamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: studentExamInclude<ExtArgs> | null
    /**
     * The data needed to create a studentExam.
     */
    data: XOR<studentExamCreateInput, studentExamUncheckedCreateInput>
  }


  /**
   * studentExam createMany
   */
  export type studentExamCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many studentExams.
     */
    data: studentExamCreateManyInput | studentExamCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * studentExam update
   */
  export type studentExamUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studentExam
     */
    select?: studentExamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: studentExamInclude<ExtArgs> | null
    /**
     * The data needed to update a studentExam.
     */
    data: XOR<studentExamUpdateInput, studentExamUncheckedUpdateInput>
    /**
     * Choose, which studentExam to update.
     */
    where: studentExamWhereUniqueInput
  }


  /**
   * studentExam updateMany
   */
  export type studentExamUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update studentExams.
     */
    data: XOR<studentExamUpdateManyMutationInput, studentExamUncheckedUpdateManyInput>
    /**
     * Filter which studentExams to update
     */
    where?: studentExamWhereInput
  }


  /**
   * studentExam upsert
   */
  export type studentExamUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studentExam
     */
    select?: studentExamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: studentExamInclude<ExtArgs> | null
    /**
     * The filter to search for the studentExam to update in case it exists.
     */
    where: studentExamWhereUniqueInput
    /**
     * In case the studentExam found by the `where` argument doesn't exist, create a new studentExam with this data.
     */
    create: XOR<studentExamCreateInput, studentExamUncheckedCreateInput>
    /**
     * In case the studentExam was found with the provided `where` argument, update it with this data.
     */
    update: XOR<studentExamUpdateInput, studentExamUncheckedUpdateInput>
  }


  /**
   * studentExam delete
   */
  export type studentExamDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studentExam
     */
    select?: studentExamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: studentExamInclude<ExtArgs> | null
    /**
     * Filter which studentExam to delete.
     */
    where: studentExamWhereUniqueInput
  }


  /**
   * studentExam deleteMany
   */
  export type studentExamDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which studentExams to delete
     */
    where?: studentExamWhereInput
  }


  /**
   * studentExam without action
   */
  export type studentExamDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the studentExam
     */
    select?: studentExamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: studentExamInclude<ExtArgs> | null
  }



  /**
   * Model payExam
   */

  export type AggregatePayExam = {
    _count: PayExamCountAggregateOutputType | null
    _avg: PayExamAvgAggregateOutputType | null
    _sum: PayExamSumAggregateOutputType | null
    _min: PayExamMinAggregateOutputType | null
    _max: PayExamMaxAggregateOutputType | null
  }

  export type PayExamAvgAggregateOutputType = {
    id: number | null
    amount: number | null
    StudentId: number | null
  }

  export type PayExamSumAggregateOutputType = {
    id: number | null
    amount: number | null
    StudentId: number | null
  }

  export type PayExamMinAggregateOutputType = {
    id: number | null
    date: Date | null
    amount: number | null
    StudentId: number | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type PayExamMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    amount: number | null
    StudentId: number | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type PayExamCountAggregateOutputType = {
    id: number
    date: number
    amount: number
    StudentId: number
    createAt: number
    updateAt: number
    _all: number
  }


  export type PayExamAvgAggregateInputType = {
    id?: true
    amount?: true
    StudentId?: true
  }

  export type PayExamSumAggregateInputType = {
    id?: true
    amount?: true
    StudentId?: true
  }

  export type PayExamMinAggregateInputType = {
    id?: true
    date?: true
    amount?: true
    StudentId?: true
    createAt?: true
    updateAt?: true
  }

  export type PayExamMaxAggregateInputType = {
    id?: true
    date?: true
    amount?: true
    StudentId?: true
    createAt?: true
    updateAt?: true
  }

  export type PayExamCountAggregateInputType = {
    id?: true
    date?: true
    amount?: true
    StudentId?: true
    createAt?: true
    updateAt?: true
    _all?: true
  }

  export type PayExamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which payExam to aggregate.
     */
    where?: payExamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payExams to fetch.
     */
    orderBy?: payExamOrderByWithRelationInput | payExamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: payExamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payExams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payExams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned payExams
    **/
    _count?: true | PayExamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PayExamAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PayExamSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PayExamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PayExamMaxAggregateInputType
  }

  export type GetPayExamAggregateType<T extends PayExamAggregateArgs> = {
        [P in keyof T & keyof AggregatePayExam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayExam[P]>
      : GetScalarType<T[P], AggregatePayExam[P]>
  }




  export type payExamGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: payExamWhereInput
    orderBy?: payExamOrderByWithAggregationInput | payExamOrderByWithAggregationInput[]
    by: PayExamScalarFieldEnum[] | PayExamScalarFieldEnum
    having?: payExamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PayExamCountAggregateInputType | true
    _avg?: PayExamAvgAggregateInputType
    _sum?: PayExamSumAggregateInputType
    _min?: PayExamMinAggregateInputType
    _max?: PayExamMaxAggregateInputType
  }

  export type PayExamGroupByOutputType = {
    id: number
    date: Date
    amount: number
    StudentId: number
    createAt: Date
    updateAt: Date
    _count: PayExamCountAggregateOutputType | null
    _avg: PayExamAvgAggregateOutputType | null
    _sum: PayExamSumAggregateOutputType | null
    _min: PayExamMinAggregateOutputType | null
    _max: PayExamMaxAggregateOutputType | null
  }

  type GetPayExamGroupByPayload<T extends payExamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PayExamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PayExamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PayExamGroupByOutputType[P]>
            : GetScalarType<T[P], PayExamGroupByOutputType[P]>
        }
      >
    >


  export type payExamSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    amount?: boolean
    StudentId?: boolean
    createAt?: boolean
    updateAt?: boolean
    student?: boolean | studentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payExam"]>

  export type payExamSelectScalar = {
    id?: boolean
    date?: boolean
    amount?: boolean
    StudentId?: boolean
    createAt?: boolean
    updateAt?: boolean
  }

  export type payExamInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | studentDefaultArgs<ExtArgs>
  }


  export type $payExamPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "payExam"
    objects: {
      student: Prisma.$studentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: Date
      amount: number
      StudentId: number
      createAt: Date
      updateAt: Date
    }, ExtArgs["result"]["payExam"]>
    composites: {}
  }


  type payExamGetPayload<S extends boolean | null | undefined | payExamDefaultArgs> = $Result.GetResult<Prisma.$payExamPayload, S>

  type payExamCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<payExamFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PayExamCountAggregateInputType | true
    }

  export interface payExamDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['payExam'], meta: { name: 'payExam' } }
    /**
     * Find zero or one PayExam that matches the filter.
     * @param {payExamFindUniqueArgs} args - Arguments to find a PayExam
     * @example
     * // Get one PayExam
     * const payExam = await prisma.payExam.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends payExamFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, payExamFindUniqueArgs<ExtArgs>>
    ): Prisma__payExamClient<$Result.GetResult<Prisma.$payExamPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PayExam that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {payExamFindUniqueOrThrowArgs} args - Arguments to find a PayExam
     * @example
     * // Get one PayExam
     * const payExam = await prisma.payExam.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends payExamFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, payExamFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__payExamClient<$Result.GetResult<Prisma.$payExamPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PayExam that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payExamFindFirstArgs} args - Arguments to find a PayExam
     * @example
     * // Get one PayExam
     * const payExam = await prisma.payExam.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends payExamFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, payExamFindFirstArgs<ExtArgs>>
    ): Prisma__payExamClient<$Result.GetResult<Prisma.$payExamPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PayExam that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payExamFindFirstOrThrowArgs} args - Arguments to find a PayExam
     * @example
     * // Get one PayExam
     * const payExam = await prisma.payExam.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends payExamFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, payExamFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__payExamClient<$Result.GetResult<Prisma.$payExamPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PayExams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payExamFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PayExams
     * const payExams = await prisma.payExam.findMany()
     * 
     * // Get first 10 PayExams
     * const payExams = await prisma.payExam.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const payExamWithIdOnly = await prisma.payExam.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends payExamFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, payExamFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$payExamPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PayExam.
     * @param {payExamCreateArgs} args - Arguments to create a PayExam.
     * @example
     * // Create one PayExam
     * const PayExam = await prisma.payExam.create({
     *   data: {
     *     // ... data to create a PayExam
     *   }
     * })
     * 
    **/
    create<T extends payExamCreateArgs<ExtArgs>>(
      args: SelectSubset<T, payExamCreateArgs<ExtArgs>>
    ): Prisma__payExamClient<$Result.GetResult<Prisma.$payExamPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PayExams.
     *     @param {payExamCreateManyArgs} args - Arguments to create many PayExams.
     *     @example
     *     // Create many PayExams
     *     const payExam = await prisma.payExam.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends payExamCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, payExamCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PayExam.
     * @param {payExamDeleteArgs} args - Arguments to delete one PayExam.
     * @example
     * // Delete one PayExam
     * const PayExam = await prisma.payExam.delete({
     *   where: {
     *     // ... filter to delete one PayExam
     *   }
     * })
     * 
    **/
    delete<T extends payExamDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, payExamDeleteArgs<ExtArgs>>
    ): Prisma__payExamClient<$Result.GetResult<Prisma.$payExamPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PayExam.
     * @param {payExamUpdateArgs} args - Arguments to update one PayExam.
     * @example
     * // Update one PayExam
     * const payExam = await prisma.payExam.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends payExamUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, payExamUpdateArgs<ExtArgs>>
    ): Prisma__payExamClient<$Result.GetResult<Prisma.$payExamPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PayExams.
     * @param {payExamDeleteManyArgs} args - Arguments to filter PayExams to delete.
     * @example
     * // Delete a few PayExams
     * const { count } = await prisma.payExam.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends payExamDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, payExamDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PayExams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payExamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PayExams
     * const payExam = await prisma.payExam.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends payExamUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, payExamUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PayExam.
     * @param {payExamUpsertArgs} args - Arguments to update or create a PayExam.
     * @example
     * // Update or create a PayExam
     * const payExam = await prisma.payExam.upsert({
     *   create: {
     *     // ... data to create a PayExam
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PayExam we want to update
     *   }
     * })
    **/
    upsert<T extends payExamUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, payExamUpsertArgs<ExtArgs>>
    ): Prisma__payExamClient<$Result.GetResult<Prisma.$payExamPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PayExams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payExamCountArgs} args - Arguments to filter PayExams to count.
     * @example
     * // Count the number of PayExams
     * const count = await prisma.payExam.count({
     *   where: {
     *     // ... the filter for the PayExams we want to count
     *   }
     * })
    **/
    count<T extends payExamCountArgs>(
      args?: Subset<T, payExamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PayExamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PayExam.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayExamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PayExamAggregateArgs>(args: Subset<T, PayExamAggregateArgs>): Prisma.PrismaPromise<GetPayExamAggregateType<T>>

    /**
     * Group by PayExam.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payExamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends payExamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: payExamGroupByArgs['orderBy'] }
        : { orderBy?: payExamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, payExamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPayExamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the payExam model
   */
  readonly fields: payExamFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for payExam.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__payExamClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    student<T extends studentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, studentDefaultArgs<ExtArgs>>): Prisma__studentClient<$Result.GetResult<Prisma.$studentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the payExam model
   */ 
  interface payExamFieldRefs {
    readonly id: FieldRef<"payExam", 'Int'>
    readonly date: FieldRef<"payExam", 'DateTime'>
    readonly amount: FieldRef<"payExam", 'Float'>
    readonly StudentId: FieldRef<"payExam", 'Int'>
    readonly createAt: FieldRef<"payExam", 'DateTime'>
    readonly updateAt: FieldRef<"payExam", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * payExam findUnique
   */
  export type payExamFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payExam
     */
    select?: payExamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: payExamInclude<ExtArgs> | null
    /**
     * Filter, which payExam to fetch.
     */
    where: payExamWhereUniqueInput
  }


  /**
   * payExam findUniqueOrThrow
   */
  export type payExamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payExam
     */
    select?: payExamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: payExamInclude<ExtArgs> | null
    /**
     * Filter, which payExam to fetch.
     */
    where: payExamWhereUniqueInput
  }


  /**
   * payExam findFirst
   */
  export type payExamFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payExam
     */
    select?: payExamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: payExamInclude<ExtArgs> | null
    /**
     * Filter, which payExam to fetch.
     */
    where?: payExamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payExams to fetch.
     */
    orderBy?: payExamOrderByWithRelationInput | payExamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for payExams.
     */
    cursor?: payExamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payExams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payExams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of payExams.
     */
    distinct?: PayExamScalarFieldEnum | PayExamScalarFieldEnum[]
  }


  /**
   * payExam findFirstOrThrow
   */
  export type payExamFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payExam
     */
    select?: payExamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: payExamInclude<ExtArgs> | null
    /**
     * Filter, which payExam to fetch.
     */
    where?: payExamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payExams to fetch.
     */
    orderBy?: payExamOrderByWithRelationInput | payExamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for payExams.
     */
    cursor?: payExamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payExams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payExams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of payExams.
     */
    distinct?: PayExamScalarFieldEnum | PayExamScalarFieldEnum[]
  }


  /**
   * payExam findMany
   */
  export type payExamFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payExam
     */
    select?: payExamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: payExamInclude<ExtArgs> | null
    /**
     * Filter, which payExams to fetch.
     */
    where?: payExamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payExams to fetch.
     */
    orderBy?: payExamOrderByWithRelationInput | payExamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing payExams.
     */
    cursor?: payExamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payExams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payExams.
     */
    skip?: number
    distinct?: PayExamScalarFieldEnum | PayExamScalarFieldEnum[]
  }


  /**
   * payExam create
   */
  export type payExamCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payExam
     */
    select?: payExamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: payExamInclude<ExtArgs> | null
    /**
     * The data needed to create a payExam.
     */
    data: XOR<payExamCreateInput, payExamUncheckedCreateInput>
  }


  /**
   * payExam createMany
   */
  export type payExamCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many payExams.
     */
    data: payExamCreateManyInput | payExamCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * payExam update
   */
  export type payExamUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payExam
     */
    select?: payExamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: payExamInclude<ExtArgs> | null
    /**
     * The data needed to update a payExam.
     */
    data: XOR<payExamUpdateInput, payExamUncheckedUpdateInput>
    /**
     * Choose, which payExam to update.
     */
    where: payExamWhereUniqueInput
  }


  /**
   * payExam updateMany
   */
  export type payExamUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update payExams.
     */
    data: XOR<payExamUpdateManyMutationInput, payExamUncheckedUpdateManyInput>
    /**
     * Filter which payExams to update
     */
    where?: payExamWhereInput
  }


  /**
   * payExam upsert
   */
  export type payExamUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payExam
     */
    select?: payExamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: payExamInclude<ExtArgs> | null
    /**
     * The filter to search for the payExam to update in case it exists.
     */
    where: payExamWhereUniqueInput
    /**
     * In case the payExam found by the `where` argument doesn't exist, create a new payExam with this data.
     */
    create: XOR<payExamCreateInput, payExamUncheckedCreateInput>
    /**
     * In case the payExam was found with the provided `where` argument, update it with this data.
     */
    update: XOR<payExamUpdateInput, payExamUncheckedUpdateInput>
  }


  /**
   * payExam delete
   */
  export type payExamDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payExam
     */
    select?: payExamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: payExamInclude<ExtArgs> | null
    /**
     * Filter which payExam to delete.
     */
    where: payExamWhereUniqueInput
  }


  /**
   * payExam deleteMany
   */
  export type payExamDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which payExams to delete
     */
    where?: payExamWhereInput
  }


  /**
   * payExam without action
   */
  export type payExamDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payExam
     */
    select?: payExamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: payExamInclude<ExtArgs> | null
  }



  /**
   * Model permission
   */

  export type AggregatePermission = {
    _count: PermissionCountAggregateOutputType | null
    _avg: PermissionAvgAggregateOutputType | null
    _sum: PermissionSumAggregateOutputType | null
    _min: PermissionMinAggregateOutputType | null
    _max: PermissionMaxAggregateOutputType | null
  }

  export type PermissionAvgAggregateOutputType = {
    id: number | null
  }

  export type PermissionSumAggregateOutputType = {
    id: number | null
  }

  export type PermissionMinAggregateOutputType = {
    id: number | null
    name: string | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type PermissionMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type PermissionCountAggregateOutputType = {
    id: number
    name: number
    createAt: number
    updateAt: number
    _all: number
  }


  export type PermissionAvgAggregateInputType = {
    id?: true
  }

  export type PermissionSumAggregateInputType = {
    id?: true
  }

  export type PermissionMinAggregateInputType = {
    id?: true
    name?: true
    createAt?: true
    updateAt?: true
  }

  export type PermissionMaxAggregateInputType = {
    id?: true
    name?: true
    createAt?: true
    updateAt?: true
  }

  export type PermissionCountAggregateInputType = {
    id?: true
    name?: true
    createAt?: true
    updateAt?: true
    _all?: true
  }

  export type PermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which permission to aggregate.
     */
    where?: permissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of permissions to fetch.
     */
    orderBy?: permissionOrderByWithRelationInput | permissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: permissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned permissions
    **/
    _count?: true | PermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PermissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PermissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PermissionMaxAggregateInputType
  }

  export type GetPermissionAggregateType<T extends PermissionAggregateArgs> = {
        [P in keyof T & keyof AggregatePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePermission[P]>
      : GetScalarType<T[P], AggregatePermission[P]>
  }




  export type permissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: permissionWhereInput
    orderBy?: permissionOrderByWithAggregationInput | permissionOrderByWithAggregationInput[]
    by: PermissionScalarFieldEnum[] | PermissionScalarFieldEnum
    having?: permissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PermissionCountAggregateInputType | true
    _avg?: PermissionAvgAggregateInputType
    _sum?: PermissionSumAggregateInputType
    _min?: PermissionMinAggregateInputType
    _max?: PermissionMaxAggregateInputType
  }

  export type PermissionGroupByOutputType = {
    id: number
    name: string
    createAt: Date
    updateAt: Date
    _count: PermissionCountAggregateOutputType | null
    _avg: PermissionAvgAggregateOutputType | null
    _sum: PermissionSumAggregateOutputType | null
    _min: PermissionMinAggregateOutputType | null
    _max: PermissionMaxAggregateOutputType | null
  }

  type GetPermissionGroupByPayload<T extends permissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PermissionGroupByOutputType[P]>
            : GetScalarType<T[P], PermissionGroupByOutputType[P]>
        }
      >
    >


  export type permissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createAt?: boolean
    updateAt?: boolean
    permissionRoles?: boolean | permission$permissionRolesArgs<ExtArgs>
    _count?: boolean | PermissionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["permission"]>

  export type permissionSelectScalar = {
    id?: boolean
    name?: boolean
    createAt?: boolean
    updateAt?: boolean
  }

  export type permissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    permissionRoles?: boolean | permission$permissionRolesArgs<ExtArgs>
    _count?: boolean | PermissionCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $permissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "permission"
    objects: {
      permissionRoles: Prisma.$permissionRolePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      createAt: Date
      updateAt: Date
    }, ExtArgs["result"]["permission"]>
    composites: {}
  }


  type permissionGetPayload<S extends boolean | null | undefined | permissionDefaultArgs> = $Result.GetResult<Prisma.$permissionPayload, S>

  type permissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<permissionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PermissionCountAggregateInputType | true
    }

  export interface permissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['permission'], meta: { name: 'permission' } }
    /**
     * Find zero or one Permission that matches the filter.
     * @param {permissionFindUniqueArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends permissionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, permissionFindUniqueArgs<ExtArgs>>
    ): Prisma__permissionClient<$Result.GetResult<Prisma.$permissionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Permission that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {permissionFindUniqueOrThrowArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends permissionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, permissionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__permissionClient<$Result.GetResult<Prisma.$permissionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Permission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {permissionFindFirstArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends permissionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, permissionFindFirstArgs<ExtArgs>>
    ): Prisma__permissionClient<$Result.GetResult<Prisma.$permissionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Permission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {permissionFindFirstOrThrowArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends permissionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, permissionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__permissionClient<$Result.GetResult<Prisma.$permissionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Permissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {permissionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Permissions
     * const permissions = await prisma.permission.findMany()
     * 
     * // Get first 10 Permissions
     * const permissions = await prisma.permission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const permissionWithIdOnly = await prisma.permission.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends permissionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, permissionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$permissionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Permission.
     * @param {permissionCreateArgs} args - Arguments to create a Permission.
     * @example
     * // Create one Permission
     * const Permission = await prisma.permission.create({
     *   data: {
     *     // ... data to create a Permission
     *   }
     * })
     * 
    **/
    create<T extends permissionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, permissionCreateArgs<ExtArgs>>
    ): Prisma__permissionClient<$Result.GetResult<Prisma.$permissionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Permissions.
     *     @param {permissionCreateManyArgs} args - Arguments to create many Permissions.
     *     @example
     *     // Create many Permissions
     *     const permission = await prisma.permission.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends permissionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, permissionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Permission.
     * @param {permissionDeleteArgs} args - Arguments to delete one Permission.
     * @example
     * // Delete one Permission
     * const Permission = await prisma.permission.delete({
     *   where: {
     *     // ... filter to delete one Permission
     *   }
     * })
     * 
    **/
    delete<T extends permissionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, permissionDeleteArgs<ExtArgs>>
    ): Prisma__permissionClient<$Result.GetResult<Prisma.$permissionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Permission.
     * @param {permissionUpdateArgs} args - Arguments to update one Permission.
     * @example
     * // Update one Permission
     * const permission = await prisma.permission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends permissionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, permissionUpdateArgs<ExtArgs>>
    ): Prisma__permissionClient<$Result.GetResult<Prisma.$permissionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Permissions.
     * @param {permissionDeleteManyArgs} args - Arguments to filter Permissions to delete.
     * @example
     * // Delete a few Permissions
     * const { count } = await prisma.permission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends permissionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, permissionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {permissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Permissions
     * const permission = await prisma.permission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends permissionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, permissionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Permission.
     * @param {permissionUpsertArgs} args - Arguments to update or create a Permission.
     * @example
     * // Update or create a Permission
     * const permission = await prisma.permission.upsert({
     *   create: {
     *     // ... data to create a Permission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Permission we want to update
     *   }
     * })
    **/
    upsert<T extends permissionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, permissionUpsertArgs<ExtArgs>>
    ): Prisma__permissionClient<$Result.GetResult<Prisma.$permissionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {permissionCountArgs} args - Arguments to filter Permissions to count.
     * @example
     * // Count the number of Permissions
     * const count = await prisma.permission.count({
     *   where: {
     *     // ... the filter for the Permissions we want to count
     *   }
     * })
    **/
    count<T extends permissionCountArgs>(
      args?: Subset<T, permissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PermissionAggregateArgs>(args: Subset<T, PermissionAggregateArgs>): Prisma.PrismaPromise<GetPermissionAggregateType<T>>

    /**
     * Group by Permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {permissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends permissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: permissionGroupByArgs['orderBy'] }
        : { orderBy?: permissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, permissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the permission model
   */
  readonly fields: permissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for permission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__permissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    permissionRoles<T extends permission$permissionRolesArgs<ExtArgs> = {}>(args?: Subset<T, permission$permissionRolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$permissionRolePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the permission model
   */ 
  interface permissionFieldRefs {
    readonly id: FieldRef<"permission", 'Int'>
    readonly name: FieldRef<"permission", 'String'>
    readonly createAt: FieldRef<"permission", 'DateTime'>
    readonly updateAt: FieldRef<"permission", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * permission findUnique
   */
  export type permissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permission
     */
    select?: permissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: permissionInclude<ExtArgs> | null
    /**
     * Filter, which permission to fetch.
     */
    where: permissionWhereUniqueInput
  }


  /**
   * permission findUniqueOrThrow
   */
  export type permissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permission
     */
    select?: permissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: permissionInclude<ExtArgs> | null
    /**
     * Filter, which permission to fetch.
     */
    where: permissionWhereUniqueInput
  }


  /**
   * permission findFirst
   */
  export type permissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permission
     */
    select?: permissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: permissionInclude<ExtArgs> | null
    /**
     * Filter, which permission to fetch.
     */
    where?: permissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of permissions to fetch.
     */
    orderBy?: permissionOrderByWithRelationInput | permissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for permissions.
     */
    cursor?: permissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of permissions.
     */
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }


  /**
   * permission findFirstOrThrow
   */
  export type permissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permission
     */
    select?: permissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: permissionInclude<ExtArgs> | null
    /**
     * Filter, which permission to fetch.
     */
    where?: permissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of permissions to fetch.
     */
    orderBy?: permissionOrderByWithRelationInput | permissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for permissions.
     */
    cursor?: permissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of permissions.
     */
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }


  /**
   * permission findMany
   */
  export type permissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permission
     */
    select?: permissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: permissionInclude<ExtArgs> | null
    /**
     * Filter, which permissions to fetch.
     */
    where?: permissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of permissions to fetch.
     */
    orderBy?: permissionOrderByWithRelationInput | permissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing permissions.
     */
    cursor?: permissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` permissions.
     */
    skip?: number
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }


  /**
   * permission create
   */
  export type permissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permission
     */
    select?: permissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: permissionInclude<ExtArgs> | null
    /**
     * The data needed to create a permission.
     */
    data: XOR<permissionCreateInput, permissionUncheckedCreateInput>
  }


  /**
   * permission createMany
   */
  export type permissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many permissions.
     */
    data: permissionCreateManyInput | permissionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * permission update
   */
  export type permissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permission
     */
    select?: permissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: permissionInclude<ExtArgs> | null
    /**
     * The data needed to update a permission.
     */
    data: XOR<permissionUpdateInput, permissionUncheckedUpdateInput>
    /**
     * Choose, which permission to update.
     */
    where: permissionWhereUniqueInput
  }


  /**
   * permission updateMany
   */
  export type permissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update permissions.
     */
    data: XOR<permissionUpdateManyMutationInput, permissionUncheckedUpdateManyInput>
    /**
     * Filter which permissions to update
     */
    where?: permissionWhereInput
  }


  /**
   * permission upsert
   */
  export type permissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permission
     */
    select?: permissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: permissionInclude<ExtArgs> | null
    /**
     * The filter to search for the permission to update in case it exists.
     */
    where: permissionWhereUniqueInput
    /**
     * In case the permission found by the `where` argument doesn't exist, create a new permission with this data.
     */
    create: XOR<permissionCreateInput, permissionUncheckedCreateInput>
    /**
     * In case the permission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<permissionUpdateInput, permissionUncheckedUpdateInput>
  }


  /**
   * permission delete
   */
  export type permissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permission
     */
    select?: permissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: permissionInclude<ExtArgs> | null
    /**
     * Filter which permission to delete.
     */
    where: permissionWhereUniqueInput
  }


  /**
   * permission deleteMany
   */
  export type permissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which permissions to delete
     */
    where?: permissionWhereInput
  }


  /**
   * permission.permissionRoles
   */
  export type permission$permissionRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissionRole
     */
    select?: permissionRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: permissionRoleInclude<ExtArgs> | null
    where?: permissionRoleWhereInput
    orderBy?: permissionRoleOrderByWithRelationInput | permissionRoleOrderByWithRelationInput[]
    cursor?: permissionRoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PermissionRoleScalarFieldEnum | PermissionRoleScalarFieldEnum[]
  }


  /**
   * permission without action
   */
  export type permissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permission
     */
    select?: permissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: permissionInclude<ExtArgs> | null
  }



  /**
   * Model role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleAvgAggregateOutputType = {
    id: number | null
  }

  export type RoleSumAggregateOutputType = {
    id: number | null
  }

  export type RoleMinAggregateOutputType = {
    id: number | null
    name: string | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type RoleMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type RoleCountAggregateOutputType = {
    id: number
    name: number
    createAt: number
    updateAt: number
    _all: number
  }


  export type RoleAvgAggregateInputType = {
    id?: true
  }

  export type RoleSumAggregateInputType = {
    id?: true
  }

  export type RoleMinAggregateInputType = {
    id?: true
    name?: true
    createAt?: true
    updateAt?: true
  }

  export type RoleMaxAggregateInputType = {
    id?: true
    name?: true
    createAt?: true
    updateAt?: true
  }

  export type RoleCountAggregateInputType = {
    id?: true
    name?: true
    createAt?: true
    updateAt?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which role to aggregate.
     */
    where?: roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     */
    orderBy?: roleOrderByWithRelationInput | roleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type roleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: roleWhereInput
    orderBy?: roleOrderByWithAggregationInput | roleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: roleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _avg?: RoleAvgAggregateInputType
    _sum?: RoleSumAggregateInputType
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    id: number
    name: string
    createAt: Date
    updateAt: Date
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends roleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type roleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createAt?: boolean
    updateAt?: boolean
    permissionRoles?: boolean | role$permissionRolesArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>

  export type roleSelectScalar = {
    id?: boolean
    name?: boolean
    createAt?: boolean
    updateAt?: boolean
  }

  export type roleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    permissionRoles?: boolean | role$permissionRolesArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $rolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "role"
    objects: {
      permissionRoles: Prisma.$permissionRolePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      createAt: Date
      updateAt: Date
    }, ExtArgs["result"]["role"]>
    composites: {}
  }


  type roleGetPayload<S extends boolean | null | undefined | roleDefaultArgs> = $Result.GetResult<Prisma.$rolePayload, S>

  type roleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<roleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface roleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['role'], meta: { name: 'role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {roleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends roleFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, roleFindUniqueArgs<ExtArgs>>
    ): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Role that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {roleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends roleFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, roleFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends roleFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, roleFindFirstArgs<ExtArgs>>
    ): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends roleFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, roleFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleWithIdOnly = await prisma.role.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends roleFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, roleFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Role.
     * @param {roleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
    **/
    create<T extends roleCreateArgs<ExtArgs>>(
      args: SelectSubset<T, roleCreateArgs<ExtArgs>>
    ): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Roles.
     *     @param {roleCreateManyArgs} args - Arguments to create many Roles.
     *     @example
     *     // Create many Roles
     *     const role = await prisma.role.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends roleCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, roleCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Role.
     * @param {roleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
    **/
    delete<T extends roleDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, roleDeleteArgs<ExtArgs>>
    ): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Role.
     * @param {roleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends roleUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, roleUpdateArgs<ExtArgs>>
    ): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Roles.
     * @param {roleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends roleDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, roleDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends roleUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, roleUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Role.
     * @param {roleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
    **/
    upsert<T extends roleUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, roleUpsertArgs<ExtArgs>>
    ): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends roleCountArgs>(
      args?: Subset<T, roleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends roleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: roleGroupByArgs['orderBy'] }
        : { orderBy?: roleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, roleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the role model
   */
  readonly fields: roleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__roleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    permissionRoles<T extends role$permissionRolesArgs<ExtArgs> = {}>(args?: Subset<T, role$permissionRolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$permissionRolePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the role model
   */ 
  interface roleFieldRefs {
    readonly id: FieldRef<"role", 'Int'>
    readonly name: FieldRef<"role", 'String'>
    readonly createAt: FieldRef<"role", 'DateTime'>
    readonly updateAt: FieldRef<"role", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * role findUnique
   */
  export type roleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * Filter, which role to fetch.
     */
    where: roleWhereUniqueInput
  }


  /**
   * role findUniqueOrThrow
   */
  export type roleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * Filter, which role to fetch.
     */
    where: roleWhereUniqueInput
  }


  /**
   * role findFirst
   */
  export type roleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * Filter, which role to fetch.
     */
    where?: roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     */
    orderBy?: roleOrderByWithRelationInput | roleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for roles.
     */
    cursor?: roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }


  /**
   * role findFirstOrThrow
   */
  export type roleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * Filter, which role to fetch.
     */
    where?: roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     */
    orderBy?: roleOrderByWithRelationInput | roleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for roles.
     */
    cursor?: roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }


  /**
   * role findMany
   */
  export type roleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * Filter, which roles to fetch.
     */
    where?: roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     */
    orderBy?: roleOrderByWithRelationInput | roleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing roles.
     */
    cursor?: roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }


  /**
   * role create
   */
  export type roleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * The data needed to create a role.
     */
    data: XOR<roleCreateInput, roleUncheckedCreateInput>
  }


  /**
   * role createMany
   */
  export type roleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many roles.
     */
    data: roleCreateManyInput | roleCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * role update
   */
  export type roleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * The data needed to update a role.
     */
    data: XOR<roleUpdateInput, roleUncheckedUpdateInput>
    /**
     * Choose, which role to update.
     */
    where: roleWhereUniqueInput
  }


  /**
   * role updateMany
   */
  export type roleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update roles.
     */
    data: XOR<roleUpdateManyMutationInput, roleUncheckedUpdateManyInput>
    /**
     * Filter which roles to update
     */
    where?: roleWhereInput
  }


  /**
   * role upsert
   */
  export type roleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * The filter to search for the role to update in case it exists.
     */
    where: roleWhereUniqueInput
    /**
     * In case the role found by the `where` argument doesn't exist, create a new role with this data.
     */
    create: XOR<roleCreateInput, roleUncheckedCreateInput>
    /**
     * In case the role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<roleUpdateInput, roleUncheckedUpdateInput>
  }


  /**
   * role delete
   */
  export type roleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * Filter which role to delete.
     */
    where: roleWhereUniqueInput
  }


  /**
   * role deleteMany
   */
  export type roleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which roles to delete
     */
    where?: roleWhereInput
  }


  /**
   * role.permissionRoles
   */
  export type role$permissionRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissionRole
     */
    select?: permissionRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: permissionRoleInclude<ExtArgs> | null
    where?: permissionRoleWhereInput
    orderBy?: permissionRoleOrderByWithRelationInput | permissionRoleOrderByWithRelationInput[]
    cursor?: permissionRoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PermissionRoleScalarFieldEnum | PermissionRoleScalarFieldEnum[]
  }


  /**
   * role without action
   */
  export type roleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: roleInclude<ExtArgs> | null
  }



  /**
   * Model permissionRole
   */

  export type AggregatePermissionRole = {
    _count: PermissionRoleCountAggregateOutputType | null
    _avg: PermissionRoleAvgAggregateOutputType | null
    _sum: PermissionRoleSumAggregateOutputType | null
    _min: PermissionRoleMinAggregateOutputType | null
    _max: PermissionRoleMaxAggregateOutputType | null
  }

  export type PermissionRoleAvgAggregateOutputType = {
    id: number | null
    permissionId: number | null
    roleId: number | null
  }

  export type PermissionRoleSumAggregateOutputType = {
    id: number | null
    permissionId: number | null
    roleId: number | null
  }

  export type PermissionRoleMinAggregateOutputType = {
    id: number | null
    permissionId: number | null
    roleId: number | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type PermissionRoleMaxAggregateOutputType = {
    id: number | null
    permissionId: number | null
    roleId: number | null
    createAt: Date | null
    updateAt: Date | null
  }

  export type PermissionRoleCountAggregateOutputType = {
    id: number
    permissionId: number
    roleId: number
    createAt: number
    updateAt: number
    _all: number
  }


  export type PermissionRoleAvgAggregateInputType = {
    id?: true
    permissionId?: true
    roleId?: true
  }

  export type PermissionRoleSumAggregateInputType = {
    id?: true
    permissionId?: true
    roleId?: true
  }

  export type PermissionRoleMinAggregateInputType = {
    id?: true
    permissionId?: true
    roleId?: true
    createAt?: true
    updateAt?: true
  }

  export type PermissionRoleMaxAggregateInputType = {
    id?: true
    permissionId?: true
    roleId?: true
    createAt?: true
    updateAt?: true
  }

  export type PermissionRoleCountAggregateInputType = {
    id?: true
    permissionId?: true
    roleId?: true
    createAt?: true
    updateAt?: true
    _all?: true
  }

  export type PermissionRoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which permissionRole to aggregate.
     */
    where?: permissionRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of permissionRoles to fetch.
     */
    orderBy?: permissionRoleOrderByWithRelationInput | permissionRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: permissionRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` permissionRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` permissionRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned permissionRoles
    **/
    _count?: true | PermissionRoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PermissionRoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PermissionRoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PermissionRoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PermissionRoleMaxAggregateInputType
  }

  export type GetPermissionRoleAggregateType<T extends PermissionRoleAggregateArgs> = {
        [P in keyof T & keyof AggregatePermissionRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePermissionRole[P]>
      : GetScalarType<T[P], AggregatePermissionRole[P]>
  }




  export type permissionRoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: permissionRoleWhereInput
    orderBy?: permissionRoleOrderByWithAggregationInput | permissionRoleOrderByWithAggregationInput[]
    by: PermissionRoleScalarFieldEnum[] | PermissionRoleScalarFieldEnum
    having?: permissionRoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PermissionRoleCountAggregateInputType | true
    _avg?: PermissionRoleAvgAggregateInputType
    _sum?: PermissionRoleSumAggregateInputType
    _min?: PermissionRoleMinAggregateInputType
    _max?: PermissionRoleMaxAggregateInputType
  }

  export type PermissionRoleGroupByOutputType = {
    id: number
    permissionId: number
    roleId: number
    createAt: Date
    updateAt: Date
    _count: PermissionRoleCountAggregateOutputType | null
    _avg: PermissionRoleAvgAggregateOutputType | null
    _sum: PermissionRoleSumAggregateOutputType | null
    _min: PermissionRoleMinAggregateOutputType | null
    _max: PermissionRoleMaxAggregateOutputType | null
  }

  type GetPermissionRoleGroupByPayload<T extends permissionRoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PermissionRoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PermissionRoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PermissionRoleGroupByOutputType[P]>
            : GetScalarType<T[P], PermissionRoleGroupByOutputType[P]>
        }
      >
    >


  export type permissionRoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    permissionId?: boolean
    roleId?: boolean
    createAt?: boolean
    updateAt?: boolean
    persmission?: boolean | permissionDefaultArgs<ExtArgs>
    role?: boolean | roleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["permissionRole"]>

  export type permissionRoleSelectScalar = {
    id?: boolean
    permissionId?: boolean
    roleId?: boolean
    createAt?: boolean
    updateAt?: boolean
  }

  export type permissionRoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    persmission?: boolean | permissionDefaultArgs<ExtArgs>
    role?: boolean | roleDefaultArgs<ExtArgs>
  }


  export type $permissionRolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "permissionRole"
    objects: {
      persmission: Prisma.$permissionPayload<ExtArgs>
      role: Prisma.$rolePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      permissionId: number
      roleId: number
      createAt: Date
      updateAt: Date
    }, ExtArgs["result"]["permissionRole"]>
    composites: {}
  }


  type permissionRoleGetPayload<S extends boolean | null | undefined | permissionRoleDefaultArgs> = $Result.GetResult<Prisma.$permissionRolePayload, S>

  type permissionRoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<permissionRoleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PermissionRoleCountAggregateInputType | true
    }

  export interface permissionRoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['permissionRole'], meta: { name: 'permissionRole' } }
    /**
     * Find zero or one PermissionRole that matches the filter.
     * @param {permissionRoleFindUniqueArgs} args - Arguments to find a PermissionRole
     * @example
     * // Get one PermissionRole
     * const permissionRole = await prisma.permissionRole.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends permissionRoleFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, permissionRoleFindUniqueArgs<ExtArgs>>
    ): Prisma__permissionRoleClient<$Result.GetResult<Prisma.$permissionRolePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PermissionRole that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {permissionRoleFindUniqueOrThrowArgs} args - Arguments to find a PermissionRole
     * @example
     * // Get one PermissionRole
     * const permissionRole = await prisma.permissionRole.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends permissionRoleFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, permissionRoleFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__permissionRoleClient<$Result.GetResult<Prisma.$permissionRolePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PermissionRole that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {permissionRoleFindFirstArgs} args - Arguments to find a PermissionRole
     * @example
     * // Get one PermissionRole
     * const permissionRole = await prisma.permissionRole.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends permissionRoleFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, permissionRoleFindFirstArgs<ExtArgs>>
    ): Prisma__permissionRoleClient<$Result.GetResult<Prisma.$permissionRolePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PermissionRole that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {permissionRoleFindFirstOrThrowArgs} args - Arguments to find a PermissionRole
     * @example
     * // Get one PermissionRole
     * const permissionRole = await prisma.permissionRole.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends permissionRoleFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, permissionRoleFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__permissionRoleClient<$Result.GetResult<Prisma.$permissionRolePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PermissionRoles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {permissionRoleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PermissionRoles
     * const permissionRoles = await prisma.permissionRole.findMany()
     * 
     * // Get first 10 PermissionRoles
     * const permissionRoles = await prisma.permissionRole.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const permissionRoleWithIdOnly = await prisma.permissionRole.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends permissionRoleFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, permissionRoleFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$permissionRolePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PermissionRole.
     * @param {permissionRoleCreateArgs} args - Arguments to create a PermissionRole.
     * @example
     * // Create one PermissionRole
     * const PermissionRole = await prisma.permissionRole.create({
     *   data: {
     *     // ... data to create a PermissionRole
     *   }
     * })
     * 
    **/
    create<T extends permissionRoleCreateArgs<ExtArgs>>(
      args: SelectSubset<T, permissionRoleCreateArgs<ExtArgs>>
    ): Prisma__permissionRoleClient<$Result.GetResult<Prisma.$permissionRolePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PermissionRoles.
     *     @param {permissionRoleCreateManyArgs} args - Arguments to create many PermissionRoles.
     *     @example
     *     // Create many PermissionRoles
     *     const permissionRole = await prisma.permissionRole.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends permissionRoleCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, permissionRoleCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PermissionRole.
     * @param {permissionRoleDeleteArgs} args - Arguments to delete one PermissionRole.
     * @example
     * // Delete one PermissionRole
     * const PermissionRole = await prisma.permissionRole.delete({
     *   where: {
     *     // ... filter to delete one PermissionRole
     *   }
     * })
     * 
    **/
    delete<T extends permissionRoleDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, permissionRoleDeleteArgs<ExtArgs>>
    ): Prisma__permissionRoleClient<$Result.GetResult<Prisma.$permissionRolePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PermissionRole.
     * @param {permissionRoleUpdateArgs} args - Arguments to update one PermissionRole.
     * @example
     * // Update one PermissionRole
     * const permissionRole = await prisma.permissionRole.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends permissionRoleUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, permissionRoleUpdateArgs<ExtArgs>>
    ): Prisma__permissionRoleClient<$Result.GetResult<Prisma.$permissionRolePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PermissionRoles.
     * @param {permissionRoleDeleteManyArgs} args - Arguments to filter PermissionRoles to delete.
     * @example
     * // Delete a few PermissionRoles
     * const { count } = await prisma.permissionRole.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends permissionRoleDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, permissionRoleDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PermissionRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {permissionRoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PermissionRoles
     * const permissionRole = await prisma.permissionRole.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends permissionRoleUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, permissionRoleUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PermissionRole.
     * @param {permissionRoleUpsertArgs} args - Arguments to update or create a PermissionRole.
     * @example
     * // Update or create a PermissionRole
     * const permissionRole = await prisma.permissionRole.upsert({
     *   create: {
     *     // ... data to create a PermissionRole
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PermissionRole we want to update
     *   }
     * })
    **/
    upsert<T extends permissionRoleUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, permissionRoleUpsertArgs<ExtArgs>>
    ): Prisma__permissionRoleClient<$Result.GetResult<Prisma.$permissionRolePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PermissionRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {permissionRoleCountArgs} args - Arguments to filter PermissionRoles to count.
     * @example
     * // Count the number of PermissionRoles
     * const count = await prisma.permissionRole.count({
     *   where: {
     *     // ... the filter for the PermissionRoles we want to count
     *   }
     * })
    **/
    count<T extends permissionRoleCountArgs>(
      args?: Subset<T, permissionRoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PermissionRoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PermissionRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionRoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PermissionRoleAggregateArgs>(args: Subset<T, PermissionRoleAggregateArgs>): Prisma.PrismaPromise<GetPermissionRoleAggregateType<T>>

    /**
     * Group by PermissionRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {permissionRoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends permissionRoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: permissionRoleGroupByArgs['orderBy'] }
        : { orderBy?: permissionRoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, permissionRoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPermissionRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the permissionRole model
   */
  readonly fields: permissionRoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for permissionRole.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__permissionRoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    persmission<T extends permissionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, permissionDefaultArgs<ExtArgs>>): Prisma__permissionClient<$Result.GetResult<Prisma.$permissionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    role<T extends roleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, roleDefaultArgs<ExtArgs>>): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the permissionRole model
   */ 
  interface permissionRoleFieldRefs {
    readonly id: FieldRef<"permissionRole", 'Int'>
    readonly permissionId: FieldRef<"permissionRole", 'Int'>
    readonly roleId: FieldRef<"permissionRole", 'Int'>
    readonly createAt: FieldRef<"permissionRole", 'DateTime'>
    readonly updateAt: FieldRef<"permissionRole", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * permissionRole findUnique
   */
  export type permissionRoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissionRole
     */
    select?: permissionRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: permissionRoleInclude<ExtArgs> | null
    /**
     * Filter, which permissionRole to fetch.
     */
    where: permissionRoleWhereUniqueInput
  }


  /**
   * permissionRole findUniqueOrThrow
   */
  export type permissionRoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissionRole
     */
    select?: permissionRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: permissionRoleInclude<ExtArgs> | null
    /**
     * Filter, which permissionRole to fetch.
     */
    where: permissionRoleWhereUniqueInput
  }


  /**
   * permissionRole findFirst
   */
  export type permissionRoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissionRole
     */
    select?: permissionRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: permissionRoleInclude<ExtArgs> | null
    /**
     * Filter, which permissionRole to fetch.
     */
    where?: permissionRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of permissionRoles to fetch.
     */
    orderBy?: permissionRoleOrderByWithRelationInput | permissionRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for permissionRoles.
     */
    cursor?: permissionRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` permissionRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` permissionRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of permissionRoles.
     */
    distinct?: PermissionRoleScalarFieldEnum | PermissionRoleScalarFieldEnum[]
  }


  /**
   * permissionRole findFirstOrThrow
   */
  export type permissionRoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissionRole
     */
    select?: permissionRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: permissionRoleInclude<ExtArgs> | null
    /**
     * Filter, which permissionRole to fetch.
     */
    where?: permissionRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of permissionRoles to fetch.
     */
    orderBy?: permissionRoleOrderByWithRelationInput | permissionRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for permissionRoles.
     */
    cursor?: permissionRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` permissionRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` permissionRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of permissionRoles.
     */
    distinct?: PermissionRoleScalarFieldEnum | PermissionRoleScalarFieldEnum[]
  }


  /**
   * permissionRole findMany
   */
  export type permissionRoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissionRole
     */
    select?: permissionRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: permissionRoleInclude<ExtArgs> | null
    /**
     * Filter, which permissionRoles to fetch.
     */
    where?: permissionRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of permissionRoles to fetch.
     */
    orderBy?: permissionRoleOrderByWithRelationInput | permissionRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing permissionRoles.
     */
    cursor?: permissionRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` permissionRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` permissionRoles.
     */
    skip?: number
    distinct?: PermissionRoleScalarFieldEnum | PermissionRoleScalarFieldEnum[]
  }


  /**
   * permissionRole create
   */
  export type permissionRoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissionRole
     */
    select?: permissionRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: permissionRoleInclude<ExtArgs> | null
    /**
     * The data needed to create a permissionRole.
     */
    data: XOR<permissionRoleCreateInput, permissionRoleUncheckedCreateInput>
  }


  /**
   * permissionRole createMany
   */
  export type permissionRoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many permissionRoles.
     */
    data: permissionRoleCreateManyInput | permissionRoleCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * permissionRole update
   */
  export type permissionRoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissionRole
     */
    select?: permissionRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: permissionRoleInclude<ExtArgs> | null
    /**
     * The data needed to update a permissionRole.
     */
    data: XOR<permissionRoleUpdateInput, permissionRoleUncheckedUpdateInput>
    /**
     * Choose, which permissionRole to update.
     */
    where: permissionRoleWhereUniqueInput
  }


  /**
   * permissionRole updateMany
   */
  export type permissionRoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update permissionRoles.
     */
    data: XOR<permissionRoleUpdateManyMutationInput, permissionRoleUncheckedUpdateManyInput>
    /**
     * Filter which permissionRoles to update
     */
    where?: permissionRoleWhereInput
  }


  /**
   * permissionRole upsert
   */
  export type permissionRoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissionRole
     */
    select?: permissionRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: permissionRoleInclude<ExtArgs> | null
    /**
     * The filter to search for the permissionRole to update in case it exists.
     */
    where: permissionRoleWhereUniqueInput
    /**
     * In case the permissionRole found by the `where` argument doesn't exist, create a new permissionRole with this data.
     */
    create: XOR<permissionRoleCreateInput, permissionRoleUncheckedCreateInput>
    /**
     * In case the permissionRole was found with the provided `where` argument, update it with this data.
     */
    update: XOR<permissionRoleUpdateInput, permissionRoleUncheckedUpdateInput>
  }


  /**
   * permissionRole delete
   */
  export type permissionRoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissionRole
     */
    select?: permissionRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: permissionRoleInclude<ExtArgs> | null
    /**
     * Filter which permissionRole to delete.
     */
    where: permissionRoleWhereUniqueInput
  }


  /**
   * permissionRole deleteMany
   */
  export type permissionRoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which permissionRoles to delete
     */
    where?: permissionRoleWhereInput
  }


  /**
   * permissionRole without action
   */
  export type permissionRoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissionRole
     */
    select?: permissionRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: permissionRoleInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    prenom: 'prenom',
    email: 'email',
    password: 'password',
    createAt: 'createAt',
    updateAt: 'updateAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const StudentScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    prenom: 'prenom',
    email: 'email',
    password: 'password',
    status: 'status',
    createAt: 'createAt',
    updateAt: 'updateAt'
  };

  export type StudentScalarFieldEnum = (typeof StudentScalarFieldEnum)[keyof typeof StudentScalarFieldEnum]


  export const ExamScalarFieldEnum: {
    id: 'id',
    titre: 'titre',
    createAt: 'createAt',
    updateAt: 'updateAt'
  };

  export type ExamScalarFieldEnum = (typeof ExamScalarFieldEnum)[keyof typeof ExamScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    ExamId: 'ExamId',
    createAt: 'createAt',
    updateAt: 'updateAt'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const QuestionScalarFieldEnum: {
    id: 'id',
    titre: 'titre',
    CategoryId: 'CategoryId',
    createAt: 'createAt',
    updateAt: 'updateAt'
  };

  export type QuestionScalarFieldEnum = (typeof QuestionScalarFieldEnum)[keyof typeof QuestionScalarFieldEnum]


  export const ResponseScalarFieldEnum: {
    id: 'id',
    titre: 'titre',
    QuestionId: 'QuestionId',
    createAt: 'createAt',
    updateAt: 'updateAt'
  };

  export type ResponseScalarFieldEnum = (typeof ResponseScalarFieldEnum)[keyof typeof ResponseScalarFieldEnum]


  export const StudentExamScalarFieldEnum: {
    id: 'id',
    StudentId: 'StudentId',
    ExamId: 'ExamId',
    createAt: 'createAt',
    updateAt: 'updateAt'
  };

  export type StudentExamScalarFieldEnum = (typeof StudentExamScalarFieldEnum)[keyof typeof StudentExamScalarFieldEnum]


  export const PayExamScalarFieldEnum: {
    id: 'id',
    date: 'date',
    amount: 'amount',
    StudentId: 'StudentId',
    createAt: 'createAt',
    updateAt: 'updateAt'
  };

  export type PayExamScalarFieldEnum = (typeof PayExamScalarFieldEnum)[keyof typeof PayExamScalarFieldEnum]


  export const PermissionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createAt: 'createAt',
    updateAt: 'updateAt'
  };

  export type PermissionScalarFieldEnum = (typeof PermissionScalarFieldEnum)[keyof typeof PermissionScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createAt: 'createAt',
    updateAt: 'updateAt'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const PermissionRoleScalarFieldEnum: {
    id: 'id',
    permissionId: 'permissionId',
    roleId: 'roleId',
    createAt: 'createAt',
    updateAt: 'updateAt'
  };

  export type PermissionRoleScalarFieldEnum = (typeof PermissionRoleScalarFieldEnum)[keyof typeof PermissionRoleScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type userWhereInput = {
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    id?: IntFilter<"user"> | number
    nom?: StringNullableFilter<"user"> | string | null
    prenom?: StringNullableFilter<"user"> | string | null
    email?: StringFilter<"user"> | string
    password?: StringFilter<"user"> | string
    createAt?: DateTimeFilter<"user"> | Date | string
    updateAt?: DateTimeFilter<"user"> | Date | string
  }

  export type userOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrderInput | SortOrder
    prenom?: SortOrderInput | SortOrder
    email?: SortOrder
    password?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type userWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    nom?: StringNullableFilter<"user"> | string | null
    prenom?: StringNullableFilter<"user"> | string | null
    password?: StringFilter<"user"> | string
    createAt?: DateTimeFilter<"user"> | Date | string
    updateAt?: DateTimeFilter<"user"> | Date | string
  }, "id" | "email">

  export type userOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrderInput | SortOrder
    prenom?: SortOrderInput | SortOrder
    email?: SortOrder
    password?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    _count?: userCountOrderByAggregateInput
    _avg?: userAvgOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
    _sum?: userSumOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    OR?: userScalarWhereWithAggregatesInput[]
    NOT?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"user"> | number
    nom?: StringNullableWithAggregatesFilter<"user"> | string | null
    prenom?: StringNullableWithAggregatesFilter<"user"> | string | null
    email?: StringWithAggregatesFilter<"user"> | string
    password?: StringWithAggregatesFilter<"user"> | string
    createAt?: DateTimeWithAggregatesFilter<"user"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"user"> | Date | string
  }

  export type studentWhereInput = {
    AND?: studentWhereInput | studentWhereInput[]
    OR?: studentWhereInput[]
    NOT?: studentWhereInput | studentWhereInput[]
    id?: IntFilter<"student"> | number
    nom?: StringNullableFilter<"student"> | string | null
    prenom?: StringNullableFilter<"student"> | string | null
    email?: StringFilter<"student"> | string
    password?: StringFilter<"student"> | string
    status?: BoolFilter<"student"> | boolean
    createAt?: DateTimeFilter<"student"> | Date | string
    updateAt?: DateTimeFilter<"student"> | Date | string
    studentExams?: StudentExamListRelationFilter
    payExams?: PayExamListRelationFilter
  }

  export type studentOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrderInput | SortOrder
    prenom?: SortOrderInput | SortOrder
    email?: SortOrder
    password?: SortOrder
    status?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    studentExams?: studentExamOrderByRelationAggregateInput
    payExams?: payExamOrderByRelationAggregateInput
  }

  export type studentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: studentWhereInput | studentWhereInput[]
    OR?: studentWhereInput[]
    NOT?: studentWhereInput | studentWhereInput[]
    nom?: StringNullableFilter<"student"> | string | null
    prenom?: StringNullableFilter<"student"> | string | null
    password?: StringFilter<"student"> | string
    status?: BoolFilter<"student"> | boolean
    createAt?: DateTimeFilter<"student"> | Date | string
    updateAt?: DateTimeFilter<"student"> | Date | string
    studentExams?: StudentExamListRelationFilter
    payExams?: PayExamListRelationFilter
  }, "id" | "email">

  export type studentOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrderInput | SortOrder
    prenom?: SortOrderInput | SortOrder
    email?: SortOrder
    password?: SortOrder
    status?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    _count?: studentCountOrderByAggregateInput
    _avg?: studentAvgOrderByAggregateInput
    _max?: studentMaxOrderByAggregateInput
    _min?: studentMinOrderByAggregateInput
    _sum?: studentSumOrderByAggregateInput
  }

  export type studentScalarWhereWithAggregatesInput = {
    AND?: studentScalarWhereWithAggregatesInput | studentScalarWhereWithAggregatesInput[]
    OR?: studentScalarWhereWithAggregatesInput[]
    NOT?: studentScalarWhereWithAggregatesInput | studentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"student"> | number
    nom?: StringNullableWithAggregatesFilter<"student"> | string | null
    prenom?: StringNullableWithAggregatesFilter<"student"> | string | null
    email?: StringWithAggregatesFilter<"student"> | string
    password?: StringWithAggregatesFilter<"student"> | string
    status?: BoolWithAggregatesFilter<"student"> | boolean
    createAt?: DateTimeWithAggregatesFilter<"student"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"student"> | Date | string
  }

  export type examWhereInput = {
    AND?: examWhereInput | examWhereInput[]
    OR?: examWhereInput[]
    NOT?: examWhereInput | examWhereInput[]
    id?: IntFilter<"exam"> | number
    titre?: StringFilter<"exam"> | string
    createAt?: DateTimeFilter<"exam"> | Date | string
    updateAt?: DateTimeFilter<"exam"> | Date | string
    studentExams?: StudentExamListRelationFilter
    categories?: CategoryListRelationFilter
  }

  export type examOrderByWithRelationInput = {
    id?: SortOrder
    titre?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    studentExams?: studentExamOrderByRelationAggregateInput
    categories?: categoryOrderByRelationAggregateInput
  }

  export type examWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: examWhereInput | examWhereInput[]
    OR?: examWhereInput[]
    NOT?: examWhereInput | examWhereInput[]
    titre?: StringFilter<"exam"> | string
    createAt?: DateTimeFilter<"exam"> | Date | string
    updateAt?: DateTimeFilter<"exam"> | Date | string
    studentExams?: StudentExamListRelationFilter
    categories?: CategoryListRelationFilter
  }, "id">

  export type examOrderByWithAggregationInput = {
    id?: SortOrder
    titre?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    _count?: examCountOrderByAggregateInput
    _avg?: examAvgOrderByAggregateInput
    _max?: examMaxOrderByAggregateInput
    _min?: examMinOrderByAggregateInput
    _sum?: examSumOrderByAggregateInput
  }

  export type examScalarWhereWithAggregatesInput = {
    AND?: examScalarWhereWithAggregatesInput | examScalarWhereWithAggregatesInput[]
    OR?: examScalarWhereWithAggregatesInput[]
    NOT?: examScalarWhereWithAggregatesInput | examScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"exam"> | number
    titre?: StringWithAggregatesFilter<"exam"> | string
    createAt?: DateTimeWithAggregatesFilter<"exam"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"exam"> | Date | string
  }

  export type categoryWhereInput = {
    AND?: categoryWhereInput | categoryWhereInput[]
    OR?: categoryWhereInput[]
    NOT?: categoryWhereInput | categoryWhereInput[]
    id?: IntFilter<"category"> | number
    nom?: StringFilter<"category"> | string
    ExamId?: IntFilter<"category"> | number
    createAt?: DateTimeFilter<"category"> | Date | string
    updateAt?: DateTimeFilter<"category"> | Date | string
    exam?: XOR<ExamRelationFilter, examWhereInput>
    questions?: QuestionListRelationFilter
  }

  export type categoryOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    ExamId?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    exam?: examOrderByWithRelationInput
    questions?: questionOrderByRelationAggregateInput
  }

  export type categoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: categoryWhereInput | categoryWhereInput[]
    OR?: categoryWhereInput[]
    NOT?: categoryWhereInput | categoryWhereInput[]
    nom?: StringFilter<"category"> | string
    ExamId?: IntFilter<"category"> | number
    createAt?: DateTimeFilter<"category"> | Date | string
    updateAt?: DateTimeFilter<"category"> | Date | string
    exam?: XOR<ExamRelationFilter, examWhereInput>
    questions?: QuestionListRelationFilter
  }, "id">

  export type categoryOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    ExamId?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    _count?: categoryCountOrderByAggregateInput
    _avg?: categoryAvgOrderByAggregateInput
    _max?: categoryMaxOrderByAggregateInput
    _min?: categoryMinOrderByAggregateInput
    _sum?: categorySumOrderByAggregateInput
  }

  export type categoryScalarWhereWithAggregatesInput = {
    AND?: categoryScalarWhereWithAggregatesInput | categoryScalarWhereWithAggregatesInput[]
    OR?: categoryScalarWhereWithAggregatesInput[]
    NOT?: categoryScalarWhereWithAggregatesInput | categoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"category"> | number
    nom?: StringWithAggregatesFilter<"category"> | string
    ExamId?: IntWithAggregatesFilter<"category"> | number
    createAt?: DateTimeWithAggregatesFilter<"category"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"category"> | Date | string
  }

  export type questionWhereInput = {
    AND?: questionWhereInput | questionWhereInput[]
    OR?: questionWhereInput[]
    NOT?: questionWhereInput | questionWhereInput[]
    id?: IntFilter<"question"> | number
    titre?: StringFilter<"question"> | string
    CategoryId?: IntFilter<"question"> | number
    createAt?: DateTimeFilter<"question"> | Date | string
    updateAt?: DateTimeFilter<"question"> | Date | string
    category?: XOR<CategoryRelationFilter, categoryWhereInput>
    responses?: ResponseListRelationFilter
  }

  export type questionOrderByWithRelationInput = {
    id?: SortOrder
    titre?: SortOrder
    CategoryId?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    category?: categoryOrderByWithRelationInput
    responses?: responseOrderByRelationAggregateInput
  }

  export type questionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: questionWhereInput | questionWhereInput[]
    OR?: questionWhereInput[]
    NOT?: questionWhereInput | questionWhereInput[]
    titre?: StringFilter<"question"> | string
    CategoryId?: IntFilter<"question"> | number
    createAt?: DateTimeFilter<"question"> | Date | string
    updateAt?: DateTimeFilter<"question"> | Date | string
    category?: XOR<CategoryRelationFilter, categoryWhereInput>
    responses?: ResponseListRelationFilter
  }, "id">

  export type questionOrderByWithAggregationInput = {
    id?: SortOrder
    titre?: SortOrder
    CategoryId?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    _count?: questionCountOrderByAggregateInput
    _avg?: questionAvgOrderByAggregateInput
    _max?: questionMaxOrderByAggregateInput
    _min?: questionMinOrderByAggregateInput
    _sum?: questionSumOrderByAggregateInput
  }

  export type questionScalarWhereWithAggregatesInput = {
    AND?: questionScalarWhereWithAggregatesInput | questionScalarWhereWithAggregatesInput[]
    OR?: questionScalarWhereWithAggregatesInput[]
    NOT?: questionScalarWhereWithAggregatesInput | questionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"question"> | number
    titre?: StringWithAggregatesFilter<"question"> | string
    CategoryId?: IntWithAggregatesFilter<"question"> | number
    createAt?: DateTimeWithAggregatesFilter<"question"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"question"> | Date | string
  }

  export type responseWhereInput = {
    AND?: responseWhereInput | responseWhereInput[]
    OR?: responseWhereInput[]
    NOT?: responseWhereInput | responseWhereInput[]
    id?: IntFilter<"response"> | number
    titre?: StringFilter<"response"> | string
    QuestionId?: IntFilter<"response"> | number
    createAt?: DateTimeFilter<"response"> | Date | string
    updateAt?: DateTimeFilter<"response"> | Date | string
    question?: XOR<QuestionRelationFilter, questionWhereInput>
  }

  export type responseOrderByWithRelationInput = {
    id?: SortOrder
    titre?: SortOrder
    QuestionId?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    question?: questionOrderByWithRelationInput
  }

  export type responseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: responseWhereInput | responseWhereInput[]
    OR?: responseWhereInput[]
    NOT?: responseWhereInput | responseWhereInput[]
    titre?: StringFilter<"response"> | string
    QuestionId?: IntFilter<"response"> | number
    createAt?: DateTimeFilter<"response"> | Date | string
    updateAt?: DateTimeFilter<"response"> | Date | string
    question?: XOR<QuestionRelationFilter, questionWhereInput>
  }, "id">

  export type responseOrderByWithAggregationInput = {
    id?: SortOrder
    titre?: SortOrder
    QuestionId?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    _count?: responseCountOrderByAggregateInput
    _avg?: responseAvgOrderByAggregateInput
    _max?: responseMaxOrderByAggregateInput
    _min?: responseMinOrderByAggregateInput
    _sum?: responseSumOrderByAggregateInput
  }

  export type responseScalarWhereWithAggregatesInput = {
    AND?: responseScalarWhereWithAggregatesInput | responseScalarWhereWithAggregatesInput[]
    OR?: responseScalarWhereWithAggregatesInput[]
    NOT?: responseScalarWhereWithAggregatesInput | responseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"response"> | number
    titre?: StringWithAggregatesFilter<"response"> | string
    QuestionId?: IntWithAggregatesFilter<"response"> | number
    createAt?: DateTimeWithAggregatesFilter<"response"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"response"> | Date | string
  }

  export type studentExamWhereInput = {
    AND?: studentExamWhereInput | studentExamWhereInput[]
    OR?: studentExamWhereInput[]
    NOT?: studentExamWhereInput | studentExamWhereInput[]
    id?: IntFilter<"studentExam"> | number
    StudentId?: IntFilter<"studentExam"> | number
    ExamId?: IntFilter<"studentExam"> | number
    createAt?: DateTimeFilter<"studentExam"> | Date | string
    updateAt?: DateTimeFilter<"studentExam"> | Date | string
    student?: XOR<StudentRelationFilter, studentWhereInput>
    exam?: XOR<ExamRelationFilter, examWhereInput>
  }

  export type studentExamOrderByWithRelationInput = {
    id?: SortOrder
    StudentId?: SortOrder
    ExamId?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    student?: studentOrderByWithRelationInput
    exam?: examOrderByWithRelationInput
  }

  export type studentExamWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: studentExamWhereInput | studentExamWhereInput[]
    OR?: studentExamWhereInput[]
    NOT?: studentExamWhereInput | studentExamWhereInput[]
    StudentId?: IntFilter<"studentExam"> | number
    ExamId?: IntFilter<"studentExam"> | number
    createAt?: DateTimeFilter<"studentExam"> | Date | string
    updateAt?: DateTimeFilter<"studentExam"> | Date | string
    student?: XOR<StudentRelationFilter, studentWhereInput>
    exam?: XOR<ExamRelationFilter, examWhereInput>
  }, "id">

  export type studentExamOrderByWithAggregationInput = {
    id?: SortOrder
    StudentId?: SortOrder
    ExamId?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    _count?: studentExamCountOrderByAggregateInput
    _avg?: studentExamAvgOrderByAggregateInput
    _max?: studentExamMaxOrderByAggregateInput
    _min?: studentExamMinOrderByAggregateInput
    _sum?: studentExamSumOrderByAggregateInput
  }

  export type studentExamScalarWhereWithAggregatesInput = {
    AND?: studentExamScalarWhereWithAggregatesInput | studentExamScalarWhereWithAggregatesInput[]
    OR?: studentExamScalarWhereWithAggregatesInput[]
    NOT?: studentExamScalarWhereWithAggregatesInput | studentExamScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"studentExam"> | number
    StudentId?: IntWithAggregatesFilter<"studentExam"> | number
    ExamId?: IntWithAggregatesFilter<"studentExam"> | number
    createAt?: DateTimeWithAggregatesFilter<"studentExam"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"studentExam"> | Date | string
  }

  export type payExamWhereInput = {
    AND?: payExamWhereInput | payExamWhereInput[]
    OR?: payExamWhereInput[]
    NOT?: payExamWhereInput | payExamWhereInput[]
    id?: IntFilter<"payExam"> | number
    date?: DateTimeFilter<"payExam"> | Date | string
    amount?: FloatFilter<"payExam"> | number
    StudentId?: IntFilter<"payExam"> | number
    createAt?: DateTimeFilter<"payExam"> | Date | string
    updateAt?: DateTimeFilter<"payExam"> | Date | string
    student?: XOR<StudentRelationFilter, studentWhereInput>
  }

  export type payExamOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    amount?: SortOrder
    StudentId?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    student?: studentOrderByWithRelationInput
  }

  export type payExamWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: payExamWhereInput | payExamWhereInput[]
    OR?: payExamWhereInput[]
    NOT?: payExamWhereInput | payExamWhereInput[]
    date?: DateTimeFilter<"payExam"> | Date | string
    amount?: FloatFilter<"payExam"> | number
    StudentId?: IntFilter<"payExam"> | number
    createAt?: DateTimeFilter<"payExam"> | Date | string
    updateAt?: DateTimeFilter<"payExam"> | Date | string
    student?: XOR<StudentRelationFilter, studentWhereInput>
  }, "id">

  export type payExamOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    amount?: SortOrder
    StudentId?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    _count?: payExamCountOrderByAggregateInput
    _avg?: payExamAvgOrderByAggregateInput
    _max?: payExamMaxOrderByAggregateInput
    _min?: payExamMinOrderByAggregateInput
    _sum?: payExamSumOrderByAggregateInput
  }

  export type payExamScalarWhereWithAggregatesInput = {
    AND?: payExamScalarWhereWithAggregatesInput | payExamScalarWhereWithAggregatesInput[]
    OR?: payExamScalarWhereWithAggregatesInput[]
    NOT?: payExamScalarWhereWithAggregatesInput | payExamScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"payExam"> | number
    date?: DateTimeWithAggregatesFilter<"payExam"> | Date | string
    amount?: FloatWithAggregatesFilter<"payExam"> | number
    StudentId?: IntWithAggregatesFilter<"payExam"> | number
    createAt?: DateTimeWithAggregatesFilter<"payExam"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"payExam"> | Date | string
  }

  export type permissionWhereInput = {
    AND?: permissionWhereInput | permissionWhereInput[]
    OR?: permissionWhereInput[]
    NOT?: permissionWhereInput | permissionWhereInput[]
    id?: IntFilter<"permission"> | number
    name?: StringFilter<"permission"> | string
    createAt?: DateTimeFilter<"permission"> | Date | string
    updateAt?: DateTimeFilter<"permission"> | Date | string
    permissionRoles?: PermissionRoleListRelationFilter
  }

  export type permissionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    permissionRoles?: permissionRoleOrderByRelationAggregateInput
  }

  export type permissionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: permissionWhereInput | permissionWhereInput[]
    OR?: permissionWhereInput[]
    NOT?: permissionWhereInput | permissionWhereInput[]
    name?: StringFilter<"permission"> | string
    createAt?: DateTimeFilter<"permission"> | Date | string
    updateAt?: DateTimeFilter<"permission"> | Date | string
    permissionRoles?: PermissionRoleListRelationFilter
  }, "id">

  export type permissionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    _count?: permissionCountOrderByAggregateInput
    _avg?: permissionAvgOrderByAggregateInput
    _max?: permissionMaxOrderByAggregateInput
    _min?: permissionMinOrderByAggregateInput
    _sum?: permissionSumOrderByAggregateInput
  }

  export type permissionScalarWhereWithAggregatesInput = {
    AND?: permissionScalarWhereWithAggregatesInput | permissionScalarWhereWithAggregatesInput[]
    OR?: permissionScalarWhereWithAggregatesInput[]
    NOT?: permissionScalarWhereWithAggregatesInput | permissionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"permission"> | number
    name?: StringWithAggregatesFilter<"permission"> | string
    createAt?: DateTimeWithAggregatesFilter<"permission"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"permission"> | Date | string
  }

  export type roleWhereInput = {
    AND?: roleWhereInput | roleWhereInput[]
    OR?: roleWhereInput[]
    NOT?: roleWhereInput | roleWhereInput[]
    id?: IntFilter<"role"> | number
    name?: StringFilter<"role"> | string
    createAt?: DateTimeFilter<"role"> | Date | string
    updateAt?: DateTimeFilter<"role"> | Date | string
    permissionRoles?: PermissionRoleListRelationFilter
  }

  export type roleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    permissionRoles?: permissionRoleOrderByRelationAggregateInput
  }

  export type roleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: roleWhereInput | roleWhereInput[]
    OR?: roleWhereInput[]
    NOT?: roleWhereInput | roleWhereInput[]
    name?: StringFilter<"role"> | string
    createAt?: DateTimeFilter<"role"> | Date | string
    updateAt?: DateTimeFilter<"role"> | Date | string
    permissionRoles?: PermissionRoleListRelationFilter
  }, "id">

  export type roleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    _count?: roleCountOrderByAggregateInput
    _avg?: roleAvgOrderByAggregateInput
    _max?: roleMaxOrderByAggregateInput
    _min?: roleMinOrderByAggregateInput
    _sum?: roleSumOrderByAggregateInput
  }

  export type roleScalarWhereWithAggregatesInput = {
    AND?: roleScalarWhereWithAggregatesInput | roleScalarWhereWithAggregatesInput[]
    OR?: roleScalarWhereWithAggregatesInput[]
    NOT?: roleScalarWhereWithAggregatesInput | roleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"role"> | number
    name?: StringWithAggregatesFilter<"role"> | string
    createAt?: DateTimeWithAggregatesFilter<"role"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"role"> | Date | string
  }

  export type permissionRoleWhereInput = {
    AND?: permissionRoleWhereInput | permissionRoleWhereInput[]
    OR?: permissionRoleWhereInput[]
    NOT?: permissionRoleWhereInput | permissionRoleWhereInput[]
    id?: IntFilter<"permissionRole"> | number
    permissionId?: IntFilter<"permissionRole"> | number
    roleId?: IntFilter<"permissionRole"> | number
    createAt?: DateTimeFilter<"permissionRole"> | Date | string
    updateAt?: DateTimeFilter<"permissionRole"> | Date | string
    persmission?: XOR<PermissionRelationFilter, permissionWhereInput>
    role?: XOR<RoleRelationFilter, roleWhereInput>
  }

  export type permissionRoleOrderByWithRelationInput = {
    id?: SortOrder
    permissionId?: SortOrder
    roleId?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    persmission?: permissionOrderByWithRelationInput
    role?: roleOrderByWithRelationInput
  }

  export type permissionRoleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: permissionRoleWhereInput | permissionRoleWhereInput[]
    OR?: permissionRoleWhereInput[]
    NOT?: permissionRoleWhereInput | permissionRoleWhereInput[]
    permissionId?: IntFilter<"permissionRole"> | number
    roleId?: IntFilter<"permissionRole"> | number
    createAt?: DateTimeFilter<"permissionRole"> | Date | string
    updateAt?: DateTimeFilter<"permissionRole"> | Date | string
    persmission?: XOR<PermissionRelationFilter, permissionWhereInput>
    role?: XOR<RoleRelationFilter, roleWhereInput>
  }, "id">

  export type permissionRoleOrderByWithAggregationInput = {
    id?: SortOrder
    permissionId?: SortOrder
    roleId?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    _count?: permissionRoleCountOrderByAggregateInput
    _avg?: permissionRoleAvgOrderByAggregateInput
    _max?: permissionRoleMaxOrderByAggregateInput
    _min?: permissionRoleMinOrderByAggregateInput
    _sum?: permissionRoleSumOrderByAggregateInput
  }

  export type permissionRoleScalarWhereWithAggregatesInput = {
    AND?: permissionRoleScalarWhereWithAggregatesInput | permissionRoleScalarWhereWithAggregatesInput[]
    OR?: permissionRoleScalarWhereWithAggregatesInput[]
    NOT?: permissionRoleScalarWhereWithAggregatesInput | permissionRoleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"permissionRole"> | number
    permissionId?: IntWithAggregatesFilter<"permissionRole"> | number
    roleId?: IntWithAggregatesFilter<"permissionRole"> | number
    createAt?: DateTimeWithAggregatesFilter<"permissionRole"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"permissionRole"> | Date | string
  }

  export type userCreateInput = {
    nom?: string | null
    prenom?: string | null
    email: string
    password: string
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type userUncheckedCreateInput = {
    id?: number
    nom?: string | null
    prenom?: string | null
    email: string
    password: string
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type userUpdateInput = {
    nom?: NullableStringFieldUpdateOperationsInput | string | null
    prenom?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: NullableStringFieldUpdateOperationsInput | string | null
    prenom?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userCreateManyInput = {
    id?: number
    nom?: string | null
    prenom?: string | null
    email: string
    password: string
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type userUpdateManyMutationInput = {
    nom?: NullableStringFieldUpdateOperationsInput | string | null
    prenom?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: NullableStringFieldUpdateOperationsInput | string | null
    prenom?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type studentCreateInput = {
    nom?: string | null
    prenom?: string | null
    email: string
    password: string
    status: boolean
    createAt?: Date | string
    updateAt?: Date | string
    studentExams?: studentExamCreateNestedManyWithoutStudentInput
    payExams?: payExamCreateNestedManyWithoutStudentInput
  }

  export type studentUncheckedCreateInput = {
    id?: number
    nom?: string | null
    prenom?: string | null
    email: string
    password: string
    status: boolean
    createAt?: Date | string
    updateAt?: Date | string
    studentExams?: studentExamUncheckedCreateNestedManyWithoutStudentInput
    payExams?: payExamUncheckedCreateNestedManyWithoutStudentInput
  }

  export type studentUpdateInput = {
    nom?: NullableStringFieldUpdateOperationsInput | string | null
    prenom?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    studentExams?: studentExamUpdateManyWithoutStudentNestedInput
    payExams?: payExamUpdateManyWithoutStudentNestedInput
  }

  export type studentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: NullableStringFieldUpdateOperationsInput | string | null
    prenom?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    studentExams?: studentExamUncheckedUpdateManyWithoutStudentNestedInput
    payExams?: payExamUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type studentCreateManyInput = {
    id?: number
    nom?: string | null
    prenom?: string | null
    email: string
    password: string
    status: boolean
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type studentUpdateManyMutationInput = {
    nom?: NullableStringFieldUpdateOperationsInput | string | null
    prenom?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type studentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: NullableStringFieldUpdateOperationsInput | string | null
    prenom?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type examCreateInput = {
    titre: string
    createAt?: Date | string
    updateAt?: Date | string
    studentExams?: studentExamCreateNestedManyWithoutExamInput
    categories?: categoryCreateNestedManyWithoutExamInput
  }

  export type examUncheckedCreateInput = {
    id?: number
    titre: string
    createAt?: Date | string
    updateAt?: Date | string
    studentExams?: studentExamUncheckedCreateNestedManyWithoutExamInput
    categories?: categoryUncheckedCreateNestedManyWithoutExamInput
  }

  export type examUpdateInput = {
    titre?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    studentExams?: studentExamUpdateManyWithoutExamNestedInput
    categories?: categoryUpdateManyWithoutExamNestedInput
  }

  export type examUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    studentExams?: studentExamUncheckedUpdateManyWithoutExamNestedInput
    categories?: categoryUncheckedUpdateManyWithoutExamNestedInput
  }

  export type examCreateManyInput = {
    id?: number
    titre: string
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type examUpdateManyMutationInput = {
    titre?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type examUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type categoryCreateInput = {
    nom: string
    createAt?: Date | string
    updateAt?: Date | string
    exam: examCreateNestedOneWithoutCategoriesInput
    questions?: questionCreateNestedManyWithoutCategoryInput
  }

  export type categoryUncheckedCreateInput = {
    id?: number
    nom: string
    ExamId: number
    createAt?: Date | string
    updateAt?: Date | string
    questions?: questionUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type categoryUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exam?: examUpdateOneRequiredWithoutCategoriesNestedInput
    questions?: questionUpdateManyWithoutCategoryNestedInput
  }

  export type categoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    ExamId?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: questionUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type categoryCreateManyInput = {
    id?: number
    nom: string
    ExamId: number
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type categoryUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type categoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    ExamId?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type questionCreateInput = {
    titre: string
    createAt?: Date | string
    updateAt?: Date | string
    category: categoryCreateNestedOneWithoutQuestionsInput
    responses?: responseCreateNestedManyWithoutQuestionInput
  }

  export type questionUncheckedCreateInput = {
    id?: number
    titre: string
    CategoryId: number
    createAt?: Date | string
    updateAt?: Date | string
    responses?: responseUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type questionUpdateInput = {
    titre?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: categoryUpdateOneRequiredWithoutQuestionsNestedInput
    responses?: responseUpdateManyWithoutQuestionNestedInput
  }

  export type questionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    CategoryId?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    responses?: responseUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type questionCreateManyInput = {
    id?: number
    titre: string
    CategoryId: number
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type questionUpdateManyMutationInput = {
    titre?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type questionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    CategoryId?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type responseCreateInput = {
    titre: string
    createAt?: Date | string
    updateAt?: Date | string
    question: questionCreateNestedOneWithoutResponsesInput
  }

  export type responseUncheckedCreateInput = {
    id?: number
    titre: string
    QuestionId: number
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type responseUpdateInput = {
    titre?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    question?: questionUpdateOneRequiredWithoutResponsesNestedInput
  }

  export type responseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    QuestionId?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type responseCreateManyInput = {
    id?: number
    titre: string
    QuestionId: number
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type responseUpdateManyMutationInput = {
    titre?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type responseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    QuestionId?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type studentExamCreateInput = {
    createAt?: Date | string
    updateAt?: Date | string
    student: studentCreateNestedOneWithoutStudentExamsInput
    exam: examCreateNestedOneWithoutStudentExamsInput
  }

  export type studentExamUncheckedCreateInput = {
    id?: number
    StudentId: number
    ExamId: number
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type studentExamUpdateInput = {
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: studentUpdateOneRequiredWithoutStudentExamsNestedInput
    exam?: examUpdateOneRequiredWithoutStudentExamsNestedInput
  }

  export type studentExamUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    StudentId?: IntFieldUpdateOperationsInput | number
    ExamId?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type studentExamCreateManyInput = {
    id?: number
    StudentId: number
    ExamId: number
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type studentExamUpdateManyMutationInput = {
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type studentExamUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    StudentId?: IntFieldUpdateOperationsInput | number
    ExamId?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type payExamCreateInput = {
    date: Date | string
    amount: number
    createAt?: Date | string
    updateAt?: Date | string
    student: studentCreateNestedOneWithoutPayExamsInput
  }

  export type payExamUncheckedCreateInput = {
    id?: number
    date: Date | string
    amount: number
    StudentId: number
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type payExamUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: studentUpdateOneRequiredWithoutPayExamsNestedInput
  }

  export type payExamUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    StudentId?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type payExamCreateManyInput = {
    id?: number
    date: Date | string
    amount: number
    StudentId: number
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type payExamUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type payExamUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    StudentId?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type permissionCreateInput = {
    name: string
    createAt?: Date | string
    updateAt?: Date | string
    permissionRoles?: permissionRoleCreateNestedManyWithoutPersmissionInput
  }

  export type permissionUncheckedCreateInput = {
    id?: number
    name: string
    createAt?: Date | string
    updateAt?: Date | string
    permissionRoles?: permissionRoleUncheckedCreateNestedManyWithoutPersmissionInput
  }

  export type permissionUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permissionRoles?: permissionRoleUpdateManyWithoutPersmissionNestedInput
  }

  export type permissionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permissionRoles?: permissionRoleUncheckedUpdateManyWithoutPersmissionNestedInput
  }

  export type permissionCreateManyInput = {
    id?: number
    name: string
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type permissionUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type permissionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type roleCreateInput = {
    name: string
    createAt?: Date | string
    updateAt?: Date | string
    permissionRoles?: permissionRoleCreateNestedManyWithoutRoleInput
  }

  export type roleUncheckedCreateInput = {
    id?: number
    name: string
    createAt?: Date | string
    updateAt?: Date | string
    permissionRoles?: permissionRoleUncheckedCreateNestedManyWithoutRoleInput
  }

  export type roleUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permissionRoles?: permissionRoleUpdateManyWithoutRoleNestedInput
  }

  export type roleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permissionRoles?: permissionRoleUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type roleCreateManyInput = {
    id?: number
    name: string
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type roleUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type roleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type permissionRoleCreateInput = {
    createAt?: Date | string
    updateAt?: Date | string
    persmission: permissionCreateNestedOneWithoutPermissionRolesInput
    role: roleCreateNestedOneWithoutPermissionRolesInput
  }

  export type permissionRoleUncheckedCreateInput = {
    id?: number
    permissionId: number
    roleId: number
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type permissionRoleUpdateInput = {
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    persmission?: permissionUpdateOneRequiredWithoutPermissionRolesNestedInput
    role?: roleUpdateOneRequiredWithoutPermissionRolesNestedInput
  }

  export type permissionRoleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    permissionId?: IntFieldUpdateOperationsInput | number
    roleId?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type permissionRoleCreateManyInput = {
    id?: number
    permissionId: number
    roleId: number
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type permissionRoleUpdateManyMutationInput = {
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type permissionRoleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    permissionId?: IntFieldUpdateOperationsInput | number
    roleId?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type userCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type userAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type userSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type StudentExamListRelationFilter = {
    every?: studentExamWhereInput
    some?: studentExamWhereInput
    none?: studentExamWhereInput
  }

  export type PayExamListRelationFilter = {
    every?: payExamWhereInput
    some?: payExamWhereInput
    none?: payExamWhereInput
  }

  export type studentExamOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type payExamOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type studentCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    email?: SortOrder
    password?: SortOrder
    status?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type studentAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type studentMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    email?: SortOrder
    password?: SortOrder
    status?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type studentMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    email?: SortOrder
    password?: SortOrder
    status?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type studentSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type CategoryListRelationFilter = {
    every?: categoryWhereInput
    some?: categoryWhereInput
    none?: categoryWhereInput
  }

  export type categoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type examCountOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type examAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type examMaxOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type examMinOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type examSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ExamRelationFilter = {
    is?: examWhereInput
    isNot?: examWhereInput
  }

  export type QuestionListRelationFilter = {
    every?: questionWhereInput
    some?: questionWhereInput
    none?: questionWhereInput
  }

  export type questionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type categoryCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    ExamId?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type categoryAvgOrderByAggregateInput = {
    id?: SortOrder
    ExamId?: SortOrder
  }

  export type categoryMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    ExamId?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type categoryMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    ExamId?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type categorySumOrderByAggregateInput = {
    id?: SortOrder
    ExamId?: SortOrder
  }

  export type CategoryRelationFilter = {
    is?: categoryWhereInput
    isNot?: categoryWhereInput
  }

  export type ResponseListRelationFilter = {
    every?: responseWhereInput
    some?: responseWhereInput
    none?: responseWhereInput
  }

  export type responseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type questionCountOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    CategoryId?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type questionAvgOrderByAggregateInput = {
    id?: SortOrder
    CategoryId?: SortOrder
  }

  export type questionMaxOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    CategoryId?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type questionMinOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    CategoryId?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type questionSumOrderByAggregateInput = {
    id?: SortOrder
    CategoryId?: SortOrder
  }

  export type QuestionRelationFilter = {
    is?: questionWhereInput
    isNot?: questionWhereInput
  }

  export type responseCountOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    QuestionId?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type responseAvgOrderByAggregateInput = {
    id?: SortOrder
    QuestionId?: SortOrder
  }

  export type responseMaxOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    QuestionId?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type responseMinOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    QuestionId?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type responseSumOrderByAggregateInput = {
    id?: SortOrder
    QuestionId?: SortOrder
  }

  export type StudentRelationFilter = {
    is?: studentWhereInput
    isNot?: studentWhereInput
  }

  export type studentExamCountOrderByAggregateInput = {
    id?: SortOrder
    StudentId?: SortOrder
    ExamId?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type studentExamAvgOrderByAggregateInput = {
    id?: SortOrder
    StudentId?: SortOrder
    ExamId?: SortOrder
  }

  export type studentExamMaxOrderByAggregateInput = {
    id?: SortOrder
    StudentId?: SortOrder
    ExamId?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type studentExamMinOrderByAggregateInput = {
    id?: SortOrder
    StudentId?: SortOrder
    ExamId?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type studentExamSumOrderByAggregateInput = {
    id?: SortOrder
    StudentId?: SortOrder
    ExamId?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type payExamCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    amount?: SortOrder
    StudentId?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type payExamAvgOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    StudentId?: SortOrder
  }

  export type payExamMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    amount?: SortOrder
    StudentId?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type payExamMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    amount?: SortOrder
    StudentId?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type payExamSumOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    StudentId?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type PermissionRoleListRelationFilter = {
    every?: permissionRoleWhereInput
    some?: permissionRoleWhereInput
    none?: permissionRoleWhereInput
  }

  export type permissionRoleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type permissionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type permissionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type permissionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type permissionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type permissionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type roleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type roleAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type roleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type roleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type roleSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PermissionRelationFilter = {
    is?: permissionWhereInput
    isNot?: permissionWhereInput
  }

  export type RoleRelationFilter = {
    is?: roleWhereInput
    isNot?: roleWhereInput
  }

  export type permissionRoleCountOrderByAggregateInput = {
    id?: SortOrder
    permissionId?: SortOrder
    roleId?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type permissionRoleAvgOrderByAggregateInput = {
    id?: SortOrder
    permissionId?: SortOrder
    roleId?: SortOrder
  }

  export type permissionRoleMaxOrderByAggregateInput = {
    id?: SortOrder
    permissionId?: SortOrder
    roleId?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type permissionRoleMinOrderByAggregateInput = {
    id?: SortOrder
    permissionId?: SortOrder
    roleId?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
  }

  export type permissionRoleSumOrderByAggregateInput = {
    id?: SortOrder
    permissionId?: SortOrder
    roleId?: SortOrder
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type studentExamCreateNestedManyWithoutStudentInput = {
    create?: XOR<studentExamCreateWithoutStudentInput, studentExamUncheckedCreateWithoutStudentInput> | studentExamCreateWithoutStudentInput[] | studentExamUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: studentExamCreateOrConnectWithoutStudentInput | studentExamCreateOrConnectWithoutStudentInput[]
    createMany?: studentExamCreateManyStudentInputEnvelope
    connect?: studentExamWhereUniqueInput | studentExamWhereUniqueInput[]
  }

  export type payExamCreateNestedManyWithoutStudentInput = {
    create?: XOR<payExamCreateWithoutStudentInput, payExamUncheckedCreateWithoutStudentInput> | payExamCreateWithoutStudentInput[] | payExamUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: payExamCreateOrConnectWithoutStudentInput | payExamCreateOrConnectWithoutStudentInput[]
    createMany?: payExamCreateManyStudentInputEnvelope
    connect?: payExamWhereUniqueInput | payExamWhereUniqueInput[]
  }

  export type studentExamUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<studentExamCreateWithoutStudentInput, studentExamUncheckedCreateWithoutStudentInput> | studentExamCreateWithoutStudentInput[] | studentExamUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: studentExamCreateOrConnectWithoutStudentInput | studentExamCreateOrConnectWithoutStudentInput[]
    createMany?: studentExamCreateManyStudentInputEnvelope
    connect?: studentExamWhereUniqueInput | studentExamWhereUniqueInput[]
  }

  export type payExamUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<payExamCreateWithoutStudentInput, payExamUncheckedCreateWithoutStudentInput> | payExamCreateWithoutStudentInput[] | payExamUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: payExamCreateOrConnectWithoutStudentInput | payExamCreateOrConnectWithoutStudentInput[]
    createMany?: payExamCreateManyStudentInputEnvelope
    connect?: payExamWhereUniqueInput | payExamWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type studentExamUpdateManyWithoutStudentNestedInput = {
    create?: XOR<studentExamCreateWithoutStudentInput, studentExamUncheckedCreateWithoutStudentInput> | studentExamCreateWithoutStudentInput[] | studentExamUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: studentExamCreateOrConnectWithoutStudentInput | studentExamCreateOrConnectWithoutStudentInput[]
    upsert?: studentExamUpsertWithWhereUniqueWithoutStudentInput | studentExamUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: studentExamCreateManyStudentInputEnvelope
    set?: studentExamWhereUniqueInput | studentExamWhereUniqueInput[]
    disconnect?: studentExamWhereUniqueInput | studentExamWhereUniqueInput[]
    delete?: studentExamWhereUniqueInput | studentExamWhereUniqueInput[]
    connect?: studentExamWhereUniqueInput | studentExamWhereUniqueInput[]
    update?: studentExamUpdateWithWhereUniqueWithoutStudentInput | studentExamUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: studentExamUpdateManyWithWhereWithoutStudentInput | studentExamUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: studentExamScalarWhereInput | studentExamScalarWhereInput[]
  }

  export type payExamUpdateManyWithoutStudentNestedInput = {
    create?: XOR<payExamCreateWithoutStudentInput, payExamUncheckedCreateWithoutStudentInput> | payExamCreateWithoutStudentInput[] | payExamUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: payExamCreateOrConnectWithoutStudentInput | payExamCreateOrConnectWithoutStudentInput[]
    upsert?: payExamUpsertWithWhereUniqueWithoutStudentInput | payExamUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: payExamCreateManyStudentInputEnvelope
    set?: payExamWhereUniqueInput | payExamWhereUniqueInput[]
    disconnect?: payExamWhereUniqueInput | payExamWhereUniqueInput[]
    delete?: payExamWhereUniqueInput | payExamWhereUniqueInput[]
    connect?: payExamWhereUniqueInput | payExamWhereUniqueInput[]
    update?: payExamUpdateWithWhereUniqueWithoutStudentInput | payExamUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: payExamUpdateManyWithWhereWithoutStudentInput | payExamUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: payExamScalarWhereInput | payExamScalarWhereInput[]
  }

  export type studentExamUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<studentExamCreateWithoutStudentInput, studentExamUncheckedCreateWithoutStudentInput> | studentExamCreateWithoutStudentInput[] | studentExamUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: studentExamCreateOrConnectWithoutStudentInput | studentExamCreateOrConnectWithoutStudentInput[]
    upsert?: studentExamUpsertWithWhereUniqueWithoutStudentInput | studentExamUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: studentExamCreateManyStudentInputEnvelope
    set?: studentExamWhereUniqueInput | studentExamWhereUniqueInput[]
    disconnect?: studentExamWhereUniqueInput | studentExamWhereUniqueInput[]
    delete?: studentExamWhereUniqueInput | studentExamWhereUniqueInput[]
    connect?: studentExamWhereUniqueInput | studentExamWhereUniqueInput[]
    update?: studentExamUpdateWithWhereUniqueWithoutStudentInput | studentExamUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: studentExamUpdateManyWithWhereWithoutStudentInput | studentExamUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: studentExamScalarWhereInput | studentExamScalarWhereInput[]
  }

  export type payExamUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<payExamCreateWithoutStudentInput, payExamUncheckedCreateWithoutStudentInput> | payExamCreateWithoutStudentInput[] | payExamUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: payExamCreateOrConnectWithoutStudentInput | payExamCreateOrConnectWithoutStudentInput[]
    upsert?: payExamUpsertWithWhereUniqueWithoutStudentInput | payExamUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: payExamCreateManyStudentInputEnvelope
    set?: payExamWhereUniqueInput | payExamWhereUniqueInput[]
    disconnect?: payExamWhereUniqueInput | payExamWhereUniqueInput[]
    delete?: payExamWhereUniqueInput | payExamWhereUniqueInput[]
    connect?: payExamWhereUniqueInput | payExamWhereUniqueInput[]
    update?: payExamUpdateWithWhereUniqueWithoutStudentInput | payExamUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: payExamUpdateManyWithWhereWithoutStudentInput | payExamUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: payExamScalarWhereInput | payExamScalarWhereInput[]
  }

  export type studentExamCreateNestedManyWithoutExamInput = {
    create?: XOR<studentExamCreateWithoutExamInput, studentExamUncheckedCreateWithoutExamInput> | studentExamCreateWithoutExamInput[] | studentExamUncheckedCreateWithoutExamInput[]
    connectOrCreate?: studentExamCreateOrConnectWithoutExamInput | studentExamCreateOrConnectWithoutExamInput[]
    createMany?: studentExamCreateManyExamInputEnvelope
    connect?: studentExamWhereUniqueInput | studentExamWhereUniqueInput[]
  }

  export type categoryCreateNestedManyWithoutExamInput = {
    create?: XOR<categoryCreateWithoutExamInput, categoryUncheckedCreateWithoutExamInput> | categoryCreateWithoutExamInput[] | categoryUncheckedCreateWithoutExamInput[]
    connectOrCreate?: categoryCreateOrConnectWithoutExamInput | categoryCreateOrConnectWithoutExamInput[]
    createMany?: categoryCreateManyExamInputEnvelope
    connect?: categoryWhereUniqueInput | categoryWhereUniqueInput[]
  }

  export type studentExamUncheckedCreateNestedManyWithoutExamInput = {
    create?: XOR<studentExamCreateWithoutExamInput, studentExamUncheckedCreateWithoutExamInput> | studentExamCreateWithoutExamInput[] | studentExamUncheckedCreateWithoutExamInput[]
    connectOrCreate?: studentExamCreateOrConnectWithoutExamInput | studentExamCreateOrConnectWithoutExamInput[]
    createMany?: studentExamCreateManyExamInputEnvelope
    connect?: studentExamWhereUniqueInput | studentExamWhereUniqueInput[]
  }

  export type categoryUncheckedCreateNestedManyWithoutExamInput = {
    create?: XOR<categoryCreateWithoutExamInput, categoryUncheckedCreateWithoutExamInput> | categoryCreateWithoutExamInput[] | categoryUncheckedCreateWithoutExamInput[]
    connectOrCreate?: categoryCreateOrConnectWithoutExamInput | categoryCreateOrConnectWithoutExamInput[]
    createMany?: categoryCreateManyExamInputEnvelope
    connect?: categoryWhereUniqueInput | categoryWhereUniqueInput[]
  }

  export type studentExamUpdateManyWithoutExamNestedInput = {
    create?: XOR<studentExamCreateWithoutExamInput, studentExamUncheckedCreateWithoutExamInput> | studentExamCreateWithoutExamInput[] | studentExamUncheckedCreateWithoutExamInput[]
    connectOrCreate?: studentExamCreateOrConnectWithoutExamInput | studentExamCreateOrConnectWithoutExamInput[]
    upsert?: studentExamUpsertWithWhereUniqueWithoutExamInput | studentExamUpsertWithWhereUniqueWithoutExamInput[]
    createMany?: studentExamCreateManyExamInputEnvelope
    set?: studentExamWhereUniqueInput | studentExamWhereUniqueInput[]
    disconnect?: studentExamWhereUniqueInput | studentExamWhereUniqueInput[]
    delete?: studentExamWhereUniqueInput | studentExamWhereUniqueInput[]
    connect?: studentExamWhereUniqueInput | studentExamWhereUniqueInput[]
    update?: studentExamUpdateWithWhereUniqueWithoutExamInput | studentExamUpdateWithWhereUniqueWithoutExamInput[]
    updateMany?: studentExamUpdateManyWithWhereWithoutExamInput | studentExamUpdateManyWithWhereWithoutExamInput[]
    deleteMany?: studentExamScalarWhereInput | studentExamScalarWhereInput[]
  }

  export type categoryUpdateManyWithoutExamNestedInput = {
    create?: XOR<categoryCreateWithoutExamInput, categoryUncheckedCreateWithoutExamInput> | categoryCreateWithoutExamInput[] | categoryUncheckedCreateWithoutExamInput[]
    connectOrCreate?: categoryCreateOrConnectWithoutExamInput | categoryCreateOrConnectWithoutExamInput[]
    upsert?: categoryUpsertWithWhereUniqueWithoutExamInput | categoryUpsertWithWhereUniqueWithoutExamInput[]
    createMany?: categoryCreateManyExamInputEnvelope
    set?: categoryWhereUniqueInput | categoryWhereUniqueInput[]
    disconnect?: categoryWhereUniqueInput | categoryWhereUniqueInput[]
    delete?: categoryWhereUniqueInput | categoryWhereUniqueInput[]
    connect?: categoryWhereUniqueInput | categoryWhereUniqueInput[]
    update?: categoryUpdateWithWhereUniqueWithoutExamInput | categoryUpdateWithWhereUniqueWithoutExamInput[]
    updateMany?: categoryUpdateManyWithWhereWithoutExamInput | categoryUpdateManyWithWhereWithoutExamInput[]
    deleteMany?: categoryScalarWhereInput | categoryScalarWhereInput[]
  }

  export type studentExamUncheckedUpdateManyWithoutExamNestedInput = {
    create?: XOR<studentExamCreateWithoutExamInput, studentExamUncheckedCreateWithoutExamInput> | studentExamCreateWithoutExamInput[] | studentExamUncheckedCreateWithoutExamInput[]
    connectOrCreate?: studentExamCreateOrConnectWithoutExamInput | studentExamCreateOrConnectWithoutExamInput[]
    upsert?: studentExamUpsertWithWhereUniqueWithoutExamInput | studentExamUpsertWithWhereUniqueWithoutExamInput[]
    createMany?: studentExamCreateManyExamInputEnvelope
    set?: studentExamWhereUniqueInput | studentExamWhereUniqueInput[]
    disconnect?: studentExamWhereUniqueInput | studentExamWhereUniqueInput[]
    delete?: studentExamWhereUniqueInput | studentExamWhereUniqueInput[]
    connect?: studentExamWhereUniqueInput | studentExamWhereUniqueInput[]
    update?: studentExamUpdateWithWhereUniqueWithoutExamInput | studentExamUpdateWithWhereUniqueWithoutExamInput[]
    updateMany?: studentExamUpdateManyWithWhereWithoutExamInput | studentExamUpdateManyWithWhereWithoutExamInput[]
    deleteMany?: studentExamScalarWhereInput | studentExamScalarWhereInput[]
  }

  export type categoryUncheckedUpdateManyWithoutExamNestedInput = {
    create?: XOR<categoryCreateWithoutExamInput, categoryUncheckedCreateWithoutExamInput> | categoryCreateWithoutExamInput[] | categoryUncheckedCreateWithoutExamInput[]
    connectOrCreate?: categoryCreateOrConnectWithoutExamInput | categoryCreateOrConnectWithoutExamInput[]
    upsert?: categoryUpsertWithWhereUniqueWithoutExamInput | categoryUpsertWithWhereUniqueWithoutExamInput[]
    createMany?: categoryCreateManyExamInputEnvelope
    set?: categoryWhereUniqueInput | categoryWhereUniqueInput[]
    disconnect?: categoryWhereUniqueInput | categoryWhereUniqueInput[]
    delete?: categoryWhereUniqueInput | categoryWhereUniqueInput[]
    connect?: categoryWhereUniqueInput | categoryWhereUniqueInput[]
    update?: categoryUpdateWithWhereUniqueWithoutExamInput | categoryUpdateWithWhereUniqueWithoutExamInput[]
    updateMany?: categoryUpdateManyWithWhereWithoutExamInput | categoryUpdateManyWithWhereWithoutExamInput[]
    deleteMany?: categoryScalarWhereInput | categoryScalarWhereInput[]
  }

  export type examCreateNestedOneWithoutCategoriesInput = {
    create?: XOR<examCreateWithoutCategoriesInput, examUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: examCreateOrConnectWithoutCategoriesInput
    connect?: examWhereUniqueInput
  }

  export type questionCreateNestedManyWithoutCategoryInput = {
    create?: XOR<questionCreateWithoutCategoryInput, questionUncheckedCreateWithoutCategoryInput> | questionCreateWithoutCategoryInput[] | questionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: questionCreateOrConnectWithoutCategoryInput | questionCreateOrConnectWithoutCategoryInput[]
    createMany?: questionCreateManyCategoryInputEnvelope
    connect?: questionWhereUniqueInput | questionWhereUniqueInput[]
  }

  export type questionUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<questionCreateWithoutCategoryInput, questionUncheckedCreateWithoutCategoryInput> | questionCreateWithoutCategoryInput[] | questionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: questionCreateOrConnectWithoutCategoryInput | questionCreateOrConnectWithoutCategoryInput[]
    createMany?: questionCreateManyCategoryInputEnvelope
    connect?: questionWhereUniqueInput | questionWhereUniqueInput[]
  }

  export type examUpdateOneRequiredWithoutCategoriesNestedInput = {
    create?: XOR<examCreateWithoutCategoriesInput, examUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: examCreateOrConnectWithoutCategoriesInput
    upsert?: examUpsertWithoutCategoriesInput
    connect?: examWhereUniqueInput
    update?: XOR<XOR<examUpdateToOneWithWhereWithoutCategoriesInput, examUpdateWithoutCategoriesInput>, examUncheckedUpdateWithoutCategoriesInput>
  }

  export type questionUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<questionCreateWithoutCategoryInput, questionUncheckedCreateWithoutCategoryInput> | questionCreateWithoutCategoryInput[] | questionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: questionCreateOrConnectWithoutCategoryInput | questionCreateOrConnectWithoutCategoryInput[]
    upsert?: questionUpsertWithWhereUniqueWithoutCategoryInput | questionUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: questionCreateManyCategoryInputEnvelope
    set?: questionWhereUniqueInput | questionWhereUniqueInput[]
    disconnect?: questionWhereUniqueInput | questionWhereUniqueInput[]
    delete?: questionWhereUniqueInput | questionWhereUniqueInput[]
    connect?: questionWhereUniqueInput | questionWhereUniqueInput[]
    update?: questionUpdateWithWhereUniqueWithoutCategoryInput | questionUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: questionUpdateManyWithWhereWithoutCategoryInput | questionUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: questionScalarWhereInput | questionScalarWhereInput[]
  }

  export type questionUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<questionCreateWithoutCategoryInput, questionUncheckedCreateWithoutCategoryInput> | questionCreateWithoutCategoryInput[] | questionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: questionCreateOrConnectWithoutCategoryInput | questionCreateOrConnectWithoutCategoryInput[]
    upsert?: questionUpsertWithWhereUniqueWithoutCategoryInput | questionUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: questionCreateManyCategoryInputEnvelope
    set?: questionWhereUniqueInput | questionWhereUniqueInput[]
    disconnect?: questionWhereUniqueInput | questionWhereUniqueInput[]
    delete?: questionWhereUniqueInput | questionWhereUniqueInput[]
    connect?: questionWhereUniqueInput | questionWhereUniqueInput[]
    update?: questionUpdateWithWhereUniqueWithoutCategoryInput | questionUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: questionUpdateManyWithWhereWithoutCategoryInput | questionUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: questionScalarWhereInput | questionScalarWhereInput[]
  }

  export type categoryCreateNestedOneWithoutQuestionsInput = {
    create?: XOR<categoryCreateWithoutQuestionsInput, categoryUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: categoryCreateOrConnectWithoutQuestionsInput
    connect?: categoryWhereUniqueInput
  }

  export type responseCreateNestedManyWithoutQuestionInput = {
    create?: XOR<responseCreateWithoutQuestionInput, responseUncheckedCreateWithoutQuestionInput> | responseCreateWithoutQuestionInput[] | responseUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: responseCreateOrConnectWithoutQuestionInput | responseCreateOrConnectWithoutQuestionInput[]
    createMany?: responseCreateManyQuestionInputEnvelope
    connect?: responseWhereUniqueInput | responseWhereUniqueInput[]
  }

  export type responseUncheckedCreateNestedManyWithoutQuestionInput = {
    create?: XOR<responseCreateWithoutQuestionInput, responseUncheckedCreateWithoutQuestionInput> | responseCreateWithoutQuestionInput[] | responseUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: responseCreateOrConnectWithoutQuestionInput | responseCreateOrConnectWithoutQuestionInput[]
    createMany?: responseCreateManyQuestionInputEnvelope
    connect?: responseWhereUniqueInput | responseWhereUniqueInput[]
  }

  export type categoryUpdateOneRequiredWithoutQuestionsNestedInput = {
    create?: XOR<categoryCreateWithoutQuestionsInput, categoryUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: categoryCreateOrConnectWithoutQuestionsInput
    upsert?: categoryUpsertWithoutQuestionsInput
    connect?: categoryWhereUniqueInput
    update?: XOR<XOR<categoryUpdateToOneWithWhereWithoutQuestionsInput, categoryUpdateWithoutQuestionsInput>, categoryUncheckedUpdateWithoutQuestionsInput>
  }

  export type responseUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<responseCreateWithoutQuestionInput, responseUncheckedCreateWithoutQuestionInput> | responseCreateWithoutQuestionInput[] | responseUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: responseCreateOrConnectWithoutQuestionInput | responseCreateOrConnectWithoutQuestionInput[]
    upsert?: responseUpsertWithWhereUniqueWithoutQuestionInput | responseUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: responseCreateManyQuestionInputEnvelope
    set?: responseWhereUniqueInput | responseWhereUniqueInput[]
    disconnect?: responseWhereUniqueInput | responseWhereUniqueInput[]
    delete?: responseWhereUniqueInput | responseWhereUniqueInput[]
    connect?: responseWhereUniqueInput | responseWhereUniqueInput[]
    update?: responseUpdateWithWhereUniqueWithoutQuestionInput | responseUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: responseUpdateManyWithWhereWithoutQuestionInput | responseUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: responseScalarWhereInput | responseScalarWhereInput[]
  }

  export type responseUncheckedUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<responseCreateWithoutQuestionInput, responseUncheckedCreateWithoutQuestionInput> | responseCreateWithoutQuestionInput[] | responseUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: responseCreateOrConnectWithoutQuestionInput | responseCreateOrConnectWithoutQuestionInput[]
    upsert?: responseUpsertWithWhereUniqueWithoutQuestionInput | responseUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: responseCreateManyQuestionInputEnvelope
    set?: responseWhereUniqueInput | responseWhereUniqueInput[]
    disconnect?: responseWhereUniqueInput | responseWhereUniqueInput[]
    delete?: responseWhereUniqueInput | responseWhereUniqueInput[]
    connect?: responseWhereUniqueInput | responseWhereUniqueInput[]
    update?: responseUpdateWithWhereUniqueWithoutQuestionInput | responseUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: responseUpdateManyWithWhereWithoutQuestionInput | responseUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: responseScalarWhereInput | responseScalarWhereInput[]
  }

  export type questionCreateNestedOneWithoutResponsesInput = {
    create?: XOR<questionCreateWithoutResponsesInput, questionUncheckedCreateWithoutResponsesInput>
    connectOrCreate?: questionCreateOrConnectWithoutResponsesInput
    connect?: questionWhereUniqueInput
  }

  export type questionUpdateOneRequiredWithoutResponsesNestedInput = {
    create?: XOR<questionCreateWithoutResponsesInput, questionUncheckedCreateWithoutResponsesInput>
    connectOrCreate?: questionCreateOrConnectWithoutResponsesInput
    upsert?: questionUpsertWithoutResponsesInput
    connect?: questionWhereUniqueInput
    update?: XOR<XOR<questionUpdateToOneWithWhereWithoutResponsesInput, questionUpdateWithoutResponsesInput>, questionUncheckedUpdateWithoutResponsesInput>
  }

  export type studentCreateNestedOneWithoutStudentExamsInput = {
    create?: XOR<studentCreateWithoutStudentExamsInput, studentUncheckedCreateWithoutStudentExamsInput>
    connectOrCreate?: studentCreateOrConnectWithoutStudentExamsInput
    connect?: studentWhereUniqueInput
  }

  export type examCreateNestedOneWithoutStudentExamsInput = {
    create?: XOR<examCreateWithoutStudentExamsInput, examUncheckedCreateWithoutStudentExamsInput>
    connectOrCreate?: examCreateOrConnectWithoutStudentExamsInput
    connect?: examWhereUniqueInput
  }

  export type studentUpdateOneRequiredWithoutStudentExamsNestedInput = {
    create?: XOR<studentCreateWithoutStudentExamsInput, studentUncheckedCreateWithoutStudentExamsInput>
    connectOrCreate?: studentCreateOrConnectWithoutStudentExamsInput
    upsert?: studentUpsertWithoutStudentExamsInput
    connect?: studentWhereUniqueInput
    update?: XOR<XOR<studentUpdateToOneWithWhereWithoutStudentExamsInput, studentUpdateWithoutStudentExamsInput>, studentUncheckedUpdateWithoutStudentExamsInput>
  }

  export type examUpdateOneRequiredWithoutStudentExamsNestedInput = {
    create?: XOR<examCreateWithoutStudentExamsInput, examUncheckedCreateWithoutStudentExamsInput>
    connectOrCreate?: examCreateOrConnectWithoutStudentExamsInput
    upsert?: examUpsertWithoutStudentExamsInput
    connect?: examWhereUniqueInput
    update?: XOR<XOR<examUpdateToOneWithWhereWithoutStudentExamsInput, examUpdateWithoutStudentExamsInput>, examUncheckedUpdateWithoutStudentExamsInput>
  }

  export type studentCreateNestedOneWithoutPayExamsInput = {
    create?: XOR<studentCreateWithoutPayExamsInput, studentUncheckedCreateWithoutPayExamsInput>
    connectOrCreate?: studentCreateOrConnectWithoutPayExamsInput
    connect?: studentWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type studentUpdateOneRequiredWithoutPayExamsNestedInput = {
    create?: XOR<studentCreateWithoutPayExamsInput, studentUncheckedCreateWithoutPayExamsInput>
    connectOrCreate?: studentCreateOrConnectWithoutPayExamsInput
    upsert?: studentUpsertWithoutPayExamsInput
    connect?: studentWhereUniqueInput
    update?: XOR<XOR<studentUpdateToOneWithWhereWithoutPayExamsInput, studentUpdateWithoutPayExamsInput>, studentUncheckedUpdateWithoutPayExamsInput>
  }

  export type permissionRoleCreateNestedManyWithoutPersmissionInput = {
    create?: XOR<permissionRoleCreateWithoutPersmissionInput, permissionRoleUncheckedCreateWithoutPersmissionInput> | permissionRoleCreateWithoutPersmissionInput[] | permissionRoleUncheckedCreateWithoutPersmissionInput[]
    connectOrCreate?: permissionRoleCreateOrConnectWithoutPersmissionInput | permissionRoleCreateOrConnectWithoutPersmissionInput[]
    createMany?: permissionRoleCreateManyPersmissionInputEnvelope
    connect?: permissionRoleWhereUniqueInput | permissionRoleWhereUniqueInput[]
  }

  export type permissionRoleUncheckedCreateNestedManyWithoutPersmissionInput = {
    create?: XOR<permissionRoleCreateWithoutPersmissionInput, permissionRoleUncheckedCreateWithoutPersmissionInput> | permissionRoleCreateWithoutPersmissionInput[] | permissionRoleUncheckedCreateWithoutPersmissionInput[]
    connectOrCreate?: permissionRoleCreateOrConnectWithoutPersmissionInput | permissionRoleCreateOrConnectWithoutPersmissionInput[]
    createMany?: permissionRoleCreateManyPersmissionInputEnvelope
    connect?: permissionRoleWhereUniqueInput | permissionRoleWhereUniqueInput[]
  }

  export type permissionRoleUpdateManyWithoutPersmissionNestedInput = {
    create?: XOR<permissionRoleCreateWithoutPersmissionInput, permissionRoleUncheckedCreateWithoutPersmissionInput> | permissionRoleCreateWithoutPersmissionInput[] | permissionRoleUncheckedCreateWithoutPersmissionInput[]
    connectOrCreate?: permissionRoleCreateOrConnectWithoutPersmissionInput | permissionRoleCreateOrConnectWithoutPersmissionInput[]
    upsert?: permissionRoleUpsertWithWhereUniqueWithoutPersmissionInput | permissionRoleUpsertWithWhereUniqueWithoutPersmissionInput[]
    createMany?: permissionRoleCreateManyPersmissionInputEnvelope
    set?: permissionRoleWhereUniqueInput | permissionRoleWhereUniqueInput[]
    disconnect?: permissionRoleWhereUniqueInput | permissionRoleWhereUniqueInput[]
    delete?: permissionRoleWhereUniqueInput | permissionRoleWhereUniqueInput[]
    connect?: permissionRoleWhereUniqueInput | permissionRoleWhereUniqueInput[]
    update?: permissionRoleUpdateWithWhereUniqueWithoutPersmissionInput | permissionRoleUpdateWithWhereUniqueWithoutPersmissionInput[]
    updateMany?: permissionRoleUpdateManyWithWhereWithoutPersmissionInput | permissionRoleUpdateManyWithWhereWithoutPersmissionInput[]
    deleteMany?: permissionRoleScalarWhereInput | permissionRoleScalarWhereInput[]
  }

  export type permissionRoleUncheckedUpdateManyWithoutPersmissionNestedInput = {
    create?: XOR<permissionRoleCreateWithoutPersmissionInput, permissionRoleUncheckedCreateWithoutPersmissionInput> | permissionRoleCreateWithoutPersmissionInput[] | permissionRoleUncheckedCreateWithoutPersmissionInput[]
    connectOrCreate?: permissionRoleCreateOrConnectWithoutPersmissionInput | permissionRoleCreateOrConnectWithoutPersmissionInput[]
    upsert?: permissionRoleUpsertWithWhereUniqueWithoutPersmissionInput | permissionRoleUpsertWithWhereUniqueWithoutPersmissionInput[]
    createMany?: permissionRoleCreateManyPersmissionInputEnvelope
    set?: permissionRoleWhereUniqueInput | permissionRoleWhereUniqueInput[]
    disconnect?: permissionRoleWhereUniqueInput | permissionRoleWhereUniqueInput[]
    delete?: permissionRoleWhereUniqueInput | permissionRoleWhereUniqueInput[]
    connect?: permissionRoleWhereUniqueInput | permissionRoleWhereUniqueInput[]
    update?: permissionRoleUpdateWithWhereUniqueWithoutPersmissionInput | permissionRoleUpdateWithWhereUniqueWithoutPersmissionInput[]
    updateMany?: permissionRoleUpdateManyWithWhereWithoutPersmissionInput | permissionRoleUpdateManyWithWhereWithoutPersmissionInput[]
    deleteMany?: permissionRoleScalarWhereInput | permissionRoleScalarWhereInput[]
  }

  export type permissionRoleCreateNestedManyWithoutRoleInput = {
    create?: XOR<permissionRoleCreateWithoutRoleInput, permissionRoleUncheckedCreateWithoutRoleInput> | permissionRoleCreateWithoutRoleInput[] | permissionRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: permissionRoleCreateOrConnectWithoutRoleInput | permissionRoleCreateOrConnectWithoutRoleInput[]
    createMany?: permissionRoleCreateManyRoleInputEnvelope
    connect?: permissionRoleWhereUniqueInput | permissionRoleWhereUniqueInput[]
  }

  export type permissionRoleUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<permissionRoleCreateWithoutRoleInput, permissionRoleUncheckedCreateWithoutRoleInput> | permissionRoleCreateWithoutRoleInput[] | permissionRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: permissionRoleCreateOrConnectWithoutRoleInput | permissionRoleCreateOrConnectWithoutRoleInput[]
    createMany?: permissionRoleCreateManyRoleInputEnvelope
    connect?: permissionRoleWhereUniqueInput | permissionRoleWhereUniqueInput[]
  }

  export type permissionRoleUpdateManyWithoutRoleNestedInput = {
    create?: XOR<permissionRoleCreateWithoutRoleInput, permissionRoleUncheckedCreateWithoutRoleInput> | permissionRoleCreateWithoutRoleInput[] | permissionRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: permissionRoleCreateOrConnectWithoutRoleInput | permissionRoleCreateOrConnectWithoutRoleInput[]
    upsert?: permissionRoleUpsertWithWhereUniqueWithoutRoleInput | permissionRoleUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: permissionRoleCreateManyRoleInputEnvelope
    set?: permissionRoleWhereUniqueInput | permissionRoleWhereUniqueInput[]
    disconnect?: permissionRoleWhereUniqueInput | permissionRoleWhereUniqueInput[]
    delete?: permissionRoleWhereUniqueInput | permissionRoleWhereUniqueInput[]
    connect?: permissionRoleWhereUniqueInput | permissionRoleWhereUniqueInput[]
    update?: permissionRoleUpdateWithWhereUniqueWithoutRoleInput | permissionRoleUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: permissionRoleUpdateManyWithWhereWithoutRoleInput | permissionRoleUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: permissionRoleScalarWhereInput | permissionRoleScalarWhereInput[]
  }

  export type permissionRoleUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<permissionRoleCreateWithoutRoleInput, permissionRoleUncheckedCreateWithoutRoleInput> | permissionRoleCreateWithoutRoleInput[] | permissionRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: permissionRoleCreateOrConnectWithoutRoleInput | permissionRoleCreateOrConnectWithoutRoleInput[]
    upsert?: permissionRoleUpsertWithWhereUniqueWithoutRoleInput | permissionRoleUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: permissionRoleCreateManyRoleInputEnvelope
    set?: permissionRoleWhereUniqueInput | permissionRoleWhereUniqueInput[]
    disconnect?: permissionRoleWhereUniqueInput | permissionRoleWhereUniqueInput[]
    delete?: permissionRoleWhereUniqueInput | permissionRoleWhereUniqueInput[]
    connect?: permissionRoleWhereUniqueInput | permissionRoleWhereUniqueInput[]
    update?: permissionRoleUpdateWithWhereUniqueWithoutRoleInput | permissionRoleUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: permissionRoleUpdateManyWithWhereWithoutRoleInput | permissionRoleUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: permissionRoleScalarWhereInput | permissionRoleScalarWhereInput[]
  }

  export type permissionCreateNestedOneWithoutPermissionRolesInput = {
    create?: XOR<permissionCreateWithoutPermissionRolesInput, permissionUncheckedCreateWithoutPermissionRolesInput>
    connectOrCreate?: permissionCreateOrConnectWithoutPermissionRolesInput
    connect?: permissionWhereUniqueInput
  }

  export type roleCreateNestedOneWithoutPermissionRolesInput = {
    create?: XOR<roleCreateWithoutPermissionRolesInput, roleUncheckedCreateWithoutPermissionRolesInput>
    connectOrCreate?: roleCreateOrConnectWithoutPermissionRolesInput
    connect?: roleWhereUniqueInput
  }

  export type permissionUpdateOneRequiredWithoutPermissionRolesNestedInput = {
    create?: XOR<permissionCreateWithoutPermissionRolesInput, permissionUncheckedCreateWithoutPermissionRolesInput>
    connectOrCreate?: permissionCreateOrConnectWithoutPermissionRolesInput
    upsert?: permissionUpsertWithoutPermissionRolesInput
    connect?: permissionWhereUniqueInput
    update?: XOR<XOR<permissionUpdateToOneWithWhereWithoutPermissionRolesInput, permissionUpdateWithoutPermissionRolesInput>, permissionUncheckedUpdateWithoutPermissionRolesInput>
  }

  export type roleUpdateOneRequiredWithoutPermissionRolesNestedInput = {
    create?: XOR<roleCreateWithoutPermissionRolesInput, roleUncheckedCreateWithoutPermissionRolesInput>
    connectOrCreate?: roleCreateOrConnectWithoutPermissionRolesInput
    upsert?: roleUpsertWithoutPermissionRolesInput
    connect?: roleWhereUniqueInput
    update?: XOR<XOR<roleUpdateToOneWithWhereWithoutPermissionRolesInput, roleUpdateWithoutPermissionRolesInput>, roleUncheckedUpdateWithoutPermissionRolesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type studentExamCreateWithoutStudentInput = {
    createAt?: Date | string
    updateAt?: Date | string
    exam: examCreateNestedOneWithoutStudentExamsInput
  }

  export type studentExamUncheckedCreateWithoutStudentInput = {
    id?: number
    ExamId: number
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type studentExamCreateOrConnectWithoutStudentInput = {
    where: studentExamWhereUniqueInput
    create: XOR<studentExamCreateWithoutStudentInput, studentExamUncheckedCreateWithoutStudentInput>
  }

  export type studentExamCreateManyStudentInputEnvelope = {
    data: studentExamCreateManyStudentInput | studentExamCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type payExamCreateWithoutStudentInput = {
    date: Date | string
    amount: number
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type payExamUncheckedCreateWithoutStudentInput = {
    id?: number
    date: Date | string
    amount: number
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type payExamCreateOrConnectWithoutStudentInput = {
    where: payExamWhereUniqueInput
    create: XOR<payExamCreateWithoutStudentInput, payExamUncheckedCreateWithoutStudentInput>
  }

  export type payExamCreateManyStudentInputEnvelope = {
    data: payExamCreateManyStudentInput | payExamCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type studentExamUpsertWithWhereUniqueWithoutStudentInput = {
    where: studentExamWhereUniqueInput
    update: XOR<studentExamUpdateWithoutStudentInput, studentExamUncheckedUpdateWithoutStudentInput>
    create: XOR<studentExamCreateWithoutStudentInput, studentExamUncheckedCreateWithoutStudentInput>
  }

  export type studentExamUpdateWithWhereUniqueWithoutStudentInput = {
    where: studentExamWhereUniqueInput
    data: XOR<studentExamUpdateWithoutStudentInput, studentExamUncheckedUpdateWithoutStudentInput>
  }

  export type studentExamUpdateManyWithWhereWithoutStudentInput = {
    where: studentExamScalarWhereInput
    data: XOR<studentExamUpdateManyMutationInput, studentExamUncheckedUpdateManyWithoutStudentInput>
  }

  export type studentExamScalarWhereInput = {
    AND?: studentExamScalarWhereInput | studentExamScalarWhereInput[]
    OR?: studentExamScalarWhereInput[]
    NOT?: studentExamScalarWhereInput | studentExamScalarWhereInput[]
    id?: IntFilter<"studentExam"> | number
    StudentId?: IntFilter<"studentExam"> | number
    ExamId?: IntFilter<"studentExam"> | number
    createAt?: DateTimeFilter<"studentExam"> | Date | string
    updateAt?: DateTimeFilter<"studentExam"> | Date | string
  }

  export type payExamUpsertWithWhereUniqueWithoutStudentInput = {
    where: payExamWhereUniqueInput
    update: XOR<payExamUpdateWithoutStudentInput, payExamUncheckedUpdateWithoutStudentInput>
    create: XOR<payExamCreateWithoutStudentInput, payExamUncheckedCreateWithoutStudentInput>
  }

  export type payExamUpdateWithWhereUniqueWithoutStudentInput = {
    where: payExamWhereUniqueInput
    data: XOR<payExamUpdateWithoutStudentInput, payExamUncheckedUpdateWithoutStudentInput>
  }

  export type payExamUpdateManyWithWhereWithoutStudentInput = {
    where: payExamScalarWhereInput
    data: XOR<payExamUpdateManyMutationInput, payExamUncheckedUpdateManyWithoutStudentInput>
  }

  export type payExamScalarWhereInput = {
    AND?: payExamScalarWhereInput | payExamScalarWhereInput[]
    OR?: payExamScalarWhereInput[]
    NOT?: payExamScalarWhereInput | payExamScalarWhereInput[]
    id?: IntFilter<"payExam"> | number
    date?: DateTimeFilter<"payExam"> | Date | string
    amount?: FloatFilter<"payExam"> | number
    StudentId?: IntFilter<"payExam"> | number
    createAt?: DateTimeFilter<"payExam"> | Date | string
    updateAt?: DateTimeFilter<"payExam"> | Date | string
  }

  export type studentExamCreateWithoutExamInput = {
    createAt?: Date | string
    updateAt?: Date | string
    student: studentCreateNestedOneWithoutStudentExamsInput
  }

  export type studentExamUncheckedCreateWithoutExamInput = {
    id?: number
    StudentId: number
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type studentExamCreateOrConnectWithoutExamInput = {
    where: studentExamWhereUniqueInput
    create: XOR<studentExamCreateWithoutExamInput, studentExamUncheckedCreateWithoutExamInput>
  }

  export type studentExamCreateManyExamInputEnvelope = {
    data: studentExamCreateManyExamInput | studentExamCreateManyExamInput[]
    skipDuplicates?: boolean
  }

  export type categoryCreateWithoutExamInput = {
    nom: string
    createAt?: Date | string
    updateAt?: Date | string
    questions?: questionCreateNestedManyWithoutCategoryInput
  }

  export type categoryUncheckedCreateWithoutExamInput = {
    id?: number
    nom: string
    createAt?: Date | string
    updateAt?: Date | string
    questions?: questionUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type categoryCreateOrConnectWithoutExamInput = {
    where: categoryWhereUniqueInput
    create: XOR<categoryCreateWithoutExamInput, categoryUncheckedCreateWithoutExamInput>
  }

  export type categoryCreateManyExamInputEnvelope = {
    data: categoryCreateManyExamInput | categoryCreateManyExamInput[]
    skipDuplicates?: boolean
  }

  export type studentExamUpsertWithWhereUniqueWithoutExamInput = {
    where: studentExamWhereUniqueInput
    update: XOR<studentExamUpdateWithoutExamInput, studentExamUncheckedUpdateWithoutExamInput>
    create: XOR<studentExamCreateWithoutExamInput, studentExamUncheckedCreateWithoutExamInput>
  }

  export type studentExamUpdateWithWhereUniqueWithoutExamInput = {
    where: studentExamWhereUniqueInput
    data: XOR<studentExamUpdateWithoutExamInput, studentExamUncheckedUpdateWithoutExamInput>
  }

  export type studentExamUpdateManyWithWhereWithoutExamInput = {
    where: studentExamScalarWhereInput
    data: XOR<studentExamUpdateManyMutationInput, studentExamUncheckedUpdateManyWithoutExamInput>
  }

  export type categoryUpsertWithWhereUniqueWithoutExamInput = {
    where: categoryWhereUniqueInput
    update: XOR<categoryUpdateWithoutExamInput, categoryUncheckedUpdateWithoutExamInput>
    create: XOR<categoryCreateWithoutExamInput, categoryUncheckedCreateWithoutExamInput>
  }

  export type categoryUpdateWithWhereUniqueWithoutExamInput = {
    where: categoryWhereUniqueInput
    data: XOR<categoryUpdateWithoutExamInput, categoryUncheckedUpdateWithoutExamInput>
  }

  export type categoryUpdateManyWithWhereWithoutExamInput = {
    where: categoryScalarWhereInput
    data: XOR<categoryUpdateManyMutationInput, categoryUncheckedUpdateManyWithoutExamInput>
  }

  export type categoryScalarWhereInput = {
    AND?: categoryScalarWhereInput | categoryScalarWhereInput[]
    OR?: categoryScalarWhereInput[]
    NOT?: categoryScalarWhereInput | categoryScalarWhereInput[]
    id?: IntFilter<"category"> | number
    nom?: StringFilter<"category"> | string
    ExamId?: IntFilter<"category"> | number
    createAt?: DateTimeFilter<"category"> | Date | string
    updateAt?: DateTimeFilter<"category"> | Date | string
  }

  export type examCreateWithoutCategoriesInput = {
    titre: string
    createAt?: Date | string
    updateAt?: Date | string
    studentExams?: studentExamCreateNestedManyWithoutExamInput
  }

  export type examUncheckedCreateWithoutCategoriesInput = {
    id?: number
    titre: string
    createAt?: Date | string
    updateAt?: Date | string
    studentExams?: studentExamUncheckedCreateNestedManyWithoutExamInput
  }

  export type examCreateOrConnectWithoutCategoriesInput = {
    where: examWhereUniqueInput
    create: XOR<examCreateWithoutCategoriesInput, examUncheckedCreateWithoutCategoriesInput>
  }

  export type questionCreateWithoutCategoryInput = {
    titre: string
    createAt?: Date | string
    updateAt?: Date | string
    responses?: responseCreateNestedManyWithoutQuestionInput
  }

  export type questionUncheckedCreateWithoutCategoryInput = {
    id?: number
    titre: string
    createAt?: Date | string
    updateAt?: Date | string
    responses?: responseUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type questionCreateOrConnectWithoutCategoryInput = {
    where: questionWhereUniqueInput
    create: XOR<questionCreateWithoutCategoryInput, questionUncheckedCreateWithoutCategoryInput>
  }

  export type questionCreateManyCategoryInputEnvelope = {
    data: questionCreateManyCategoryInput | questionCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type examUpsertWithoutCategoriesInput = {
    update: XOR<examUpdateWithoutCategoriesInput, examUncheckedUpdateWithoutCategoriesInput>
    create: XOR<examCreateWithoutCategoriesInput, examUncheckedCreateWithoutCategoriesInput>
    where?: examWhereInput
  }

  export type examUpdateToOneWithWhereWithoutCategoriesInput = {
    where?: examWhereInput
    data: XOR<examUpdateWithoutCategoriesInput, examUncheckedUpdateWithoutCategoriesInput>
  }

  export type examUpdateWithoutCategoriesInput = {
    titre?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    studentExams?: studentExamUpdateManyWithoutExamNestedInput
  }

  export type examUncheckedUpdateWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    studentExams?: studentExamUncheckedUpdateManyWithoutExamNestedInput
  }

  export type questionUpsertWithWhereUniqueWithoutCategoryInput = {
    where: questionWhereUniqueInput
    update: XOR<questionUpdateWithoutCategoryInput, questionUncheckedUpdateWithoutCategoryInput>
    create: XOR<questionCreateWithoutCategoryInput, questionUncheckedCreateWithoutCategoryInput>
  }

  export type questionUpdateWithWhereUniqueWithoutCategoryInput = {
    where: questionWhereUniqueInput
    data: XOR<questionUpdateWithoutCategoryInput, questionUncheckedUpdateWithoutCategoryInput>
  }

  export type questionUpdateManyWithWhereWithoutCategoryInput = {
    where: questionScalarWhereInput
    data: XOR<questionUpdateManyMutationInput, questionUncheckedUpdateManyWithoutCategoryInput>
  }

  export type questionScalarWhereInput = {
    AND?: questionScalarWhereInput | questionScalarWhereInput[]
    OR?: questionScalarWhereInput[]
    NOT?: questionScalarWhereInput | questionScalarWhereInput[]
    id?: IntFilter<"question"> | number
    titre?: StringFilter<"question"> | string
    CategoryId?: IntFilter<"question"> | number
    createAt?: DateTimeFilter<"question"> | Date | string
    updateAt?: DateTimeFilter<"question"> | Date | string
  }

  export type categoryCreateWithoutQuestionsInput = {
    nom: string
    createAt?: Date | string
    updateAt?: Date | string
    exam: examCreateNestedOneWithoutCategoriesInput
  }

  export type categoryUncheckedCreateWithoutQuestionsInput = {
    id?: number
    nom: string
    ExamId: number
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type categoryCreateOrConnectWithoutQuestionsInput = {
    where: categoryWhereUniqueInput
    create: XOR<categoryCreateWithoutQuestionsInput, categoryUncheckedCreateWithoutQuestionsInput>
  }

  export type responseCreateWithoutQuestionInput = {
    titre: string
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type responseUncheckedCreateWithoutQuestionInput = {
    id?: number
    titre: string
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type responseCreateOrConnectWithoutQuestionInput = {
    where: responseWhereUniqueInput
    create: XOR<responseCreateWithoutQuestionInput, responseUncheckedCreateWithoutQuestionInput>
  }

  export type responseCreateManyQuestionInputEnvelope = {
    data: responseCreateManyQuestionInput | responseCreateManyQuestionInput[]
    skipDuplicates?: boolean
  }

  export type categoryUpsertWithoutQuestionsInput = {
    update: XOR<categoryUpdateWithoutQuestionsInput, categoryUncheckedUpdateWithoutQuestionsInput>
    create: XOR<categoryCreateWithoutQuestionsInput, categoryUncheckedCreateWithoutQuestionsInput>
    where?: categoryWhereInput
  }

  export type categoryUpdateToOneWithWhereWithoutQuestionsInput = {
    where?: categoryWhereInput
    data: XOR<categoryUpdateWithoutQuestionsInput, categoryUncheckedUpdateWithoutQuestionsInput>
  }

  export type categoryUpdateWithoutQuestionsInput = {
    nom?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exam?: examUpdateOneRequiredWithoutCategoriesNestedInput
  }

  export type categoryUncheckedUpdateWithoutQuestionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    ExamId?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type responseUpsertWithWhereUniqueWithoutQuestionInput = {
    where: responseWhereUniqueInput
    update: XOR<responseUpdateWithoutQuestionInput, responseUncheckedUpdateWithoutQuestionInput>
    create: XOR<responseCreateWithoutQuestionInput, responseUncheckedCreateWithoutQuestionInput>
  }

  export type responseUpdateWithWhereUniqueWithoutQuestionInput = {
    where: responseWhereUniqueInput
    data: XOR<responseUpdateWithoutQuestionInput, responseUncheckedUpdateWithoutQuestionInput>
  }

  export type responseUpdateManyWithWhereWithoutQuestionInput = {
    where: responseScalarWhereInput
    data: XOR<responseUpdateManyMutationInput, responseUncheckedUpdateManyWithoutQuestionInput>
  }

  export type responseScalarWhereInput = {
    AND?: responseScalarWhereInput | responseScalarWhereInput[]
    OR?: responseScalarWhereInput[]
    NOT?: responseScalarWhereInput | responseScalarWhereInput[]
    id?: IntFilter<"response"> | number
    titre?: StringFilter<"response"> | string
    QuestionId?: IntFilter<"response"> | number
    createAt?: DateTimeFilter<"response"> | Date | string
    updateAt?: DateTimeFilter<"response"> | Date | string
  }

  export type questionCreateWithoutResponsesInput = {
    titre: string
    createAt?: Date | string
    updateAt?: Date | string
    category: categoryCreateNestedOneWithoutQuestionsInput
  }

  export type questionUncheckedCreateWithoutResponsesInput = {
    id?: number
    titre: string
    CategoryId: number
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type questionCreateOrConnectWithoutResponsesInput = {
    where: questionWhereUniqueInput
    create: XOR<questionCreateWithoutResponsesInput, questionUncheckedCreateWithoutResponsesInput>
  }

  export type questionUpsertWithoutResponsesInput = {
    update: XOR<questionUpdateWithoutResponsesInput, questionUncheckedUpdateWithoutResponsesInput>
    create: XOR<questionCreateWithoutResponsesInput, questionUncheckedCreateWithoutResponsesInput>
    where?: questionWhereInput
  }

  export type questionUpdateToOneWithWhereWithoutResponsesInput = {
    where?: questionWhereInput
    data: XOR<questionUpdateWithoutResponsesInput, questionUncheckedUpdateWithoutResponsesInput>
  }

  export type questionUpdateWithoutResponsesInput = {
    titre?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: categoryUpdateOneRequiredWithoutQuestionsNestedInput
  }

  export type questionUncheckedUpdateWithoutResponsesInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    CategoryId?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type studentCreateWithoutStudentExamsInput = {
    nom?: string | null
    prenom?: string | null
    email: string
    password: string
    status: boolean
    createAt?: Date | string
    updateAt?: Date | string
    payExams?: payExamCreateNestedManyWithoutStudentInput
  }

  export type studentUncheckedCreateWithoutStudentExamsInput = {
    id?: number
    nom?: string | null
    prenom?: string | null
    email: string
    password: string
    status: boolean
    createAt?: Date | string
    updateAt?: Date | string
    payExams?: payExamUncheckedCreateNestedManyWithoutStudentInput
  }

  export type studentCreateOrConnectWithoutStudentExamsInput = {
    where: studentWhereUniqueInput
    create: XOR<studentCreateWithoutStudentExamsInput, studentUncheckedCreateWithoutStudentExamsInput>
  }

  export type examCreateWithoutStudentExamsInput = {
    titre: string
    createAt?: Date | string
    updateAt?: Date | string
    categories?: categoryCreateNestedManyWithoutExamInput
  }

  export type examUncheckedCreateWithoutStudentExamsInput = {
    id?: number
    titre: string
    createAt?: Date | string
    updateAt?: Date | string
    categories?: categoryUncheckedCreateNestedManyWithoutExamInput
  }

  export type examCreateOrConnectWithoutStudentExamsInput = {
    where: examWhereUniqueInput
    create: XOR<examCreateWithoutStudentExamsInput, examUncheckedCreateWithoutStudentExamsInput>
  }

  export type studentUpsertWithoutStudentExamsInput = {
    update: XOR<studentUpdateWithoutStudentExamsInput, studentUncheckedUpdateWithoutStudentExamsInput>
    create: XOR<studentCreateWithoutStudentExamsInput, studentUncheckedCreateWithoutStudentExamsInput>
    where?: studentWhereInput
  }

  export type studentUpdateToOneWithWhereWithoutStudentExamsInput = {
    where?: studentWhereInput
    data: XOR<studentUpdateWithoutStudentExamsInput, studentUncheckedUpdateWithoutStudentExamsInput>
  }

  export type studentUpdateWithoutStudentExamsInput = {
    nom?: NullableStringFieldUpdateOperationsInput | string | null
    prenom?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payExams?: payExamUpdateManyWithoutStudentNestedInput
  }

  export type studentUncheckedUpdateWithoutStudentExamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: NullableStringFieldUpdateOperationsInput | string | null
    prenom?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payExams?: payExamUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type examUpsertWithoutStudentExamsInput = {
    update: XOR<examUpdateWithoutStudentExamsInput, examUncheckedUpdateWithoutStudentExamsInput>
    create: XOR<examCreateWithoutStudentExamsInput, examUncheckedCreateWithoutStudentExamsInput>
    where?: examWhereInput
  }

  export type examUpdateToOneWithWhereWithoutStudentExamsInput = {
    where?: examWhereInput
    data: XOR<examUpdateWithoutStudentExamsInput, examUncheckedUpdateWithoutStudentExamsInput>
  }

  export type examUpdateWithoutStudentExamsInput = {
    titre?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: categoryUpdateManyWithoutExamNestedInput
  }

  export type examUncheckedUpdateWithoutStudentExamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: categoryUncheckedUpdateManyWithoutExamNestedInput
  }

  export type studentCreateWithoutPayExamsInput = {
    nom?: string | null
    prenom?: string | null
    email: string
    password: string
    status: boolean
    createAt?: Date | string
    updateAt?: Date | string
    studentExams?: studentExamCreateNestedManyWithoutStudentInput
  }

  export type studentUncheckedCreateWithoutPayExamsInput = {
    id?: number
    nom?: string | null
    prenom?: string | null
    email: string
    password: string
    status: boolean
    createAt?: Date | string
    updateAt?: Date | string
    studentExams?: studentExamUncheckedCreateNestedManyWithoutStudentInput
  }

  export type studentCreateOrConnectWithoutPayExamsInput = {
    where: studentWhereUniqueInput
    create: XOR<studentCreateWithoutPayExamsInput, studentUncheckedCreateWithoutPayExamsInput>
  }

  export type studentUpsertWithoutPayExamsInput = {
    update: XOR<studentUpdateWithoutPayExamsInput, studentUncheckedUpdateWithoutPayExamsInput>
    create: XOR<studentCreateWithoutPayExamsInput, studentUncheckedCreateWithoutPayExamsInput>
    where?: studentWhereInput
  }

  export type studentUpdateToOneWithWhereWithoutPayExamsInput = {
    where?: studentWhereInput
    data: XOR<studentUpdateWithoutPayExamsInput, studentUncheckedUpdateWithoutPayExamsInput>
  }

  export type studentUpdateWithoutPayExamsInput = {
    nom?: NullableStringFieldUpdateOperationsInput | string | null
    prenom?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    studentExams?: studentExamUpdateManyWithoutStudentNestedInput
  }

  export type studentUncheckedUpdateWithoutPayExamsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: NullableStringFieldUpdateOperationsInput | string | null
    prenom?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    studentExams?: studentExamUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type permissionRoleCreateWithoutPersmissionInput = {
    createAt?: Date | string
    updateAt?: Date | string
    role: roleCreateNestedOneWithoutPermissionRolesInput
  }

  export type permissionRoleUncheckedCreateWithoutPersmissionInput = {
    id?: number
    roleId: number
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type permissionRoleCreateOrConnectWithoutPersmissionInput = {
    where: permissionRoleWhereUniqueInput
    create: XOR<permissionRoleCreateWithoutPersmissionInput, permissionRoleUncheckedCreateWithoutPersmissionInput>
  }

  export type permissionRoleCreateManyPersmissionInputEnvelope = {
    data: permissionRoleCreateManyPersmissionInput | permissionRoleCreateManyPersmissionInput[]
    skipDuplicates?: boolean
  }

  export type permissionRoleUpsertWithWhereUniqueWithoutPersmissionInput = {
    where: permissionRoleWhereUniqueInput
    update: XOR<permissionRoleUpdateWithoutPersmissionInput, permissionRoleUncheckedUpdateWithoutPersmissionInput>
    create: XOR<permissionRoleCreateWithoutPersmissionInput, permissionRoleUncheckedCreateWithoutPersmissionInput>
  }

  export type permissionRoleUpdateWithWhereUniqueWithoutPersmissionInput = {
    where: permissionRoleWhereUniqueInput
    data: XOR<permissionRoleUpdateWithoutPersmissionInput, permissionRoleUncheckedUpdateWithoutPersmissionInput>
  }

  export type permissionRoleUpdateManyWithWhereWithoutPersmissionInput = {
    where: permissionRoleScalarWhereInput
    data: XOR<permissionRoleUpdateManyMutationInput, permissionRoleUncheckedUpdateManyWithoutPersmissionInput>
  }

  export type permissionRoleScalarWhereInput = {
    AND?: permissionRoleScalarWhereInput | permissionRoleScalarWhereInput[]
    OR?: permissionRoleScalarWhereInput[]
    NOT?: permissionRoleScalarWhereInput | permissionRoleScalarWhereInput[]
    id?: IntFilter<"permissionRole"> | number
    permissionId?: IntFilter<"permissionRole"> | number
    roleId?: IntFilter<"permissionRole"> | number
    createAt?: DateTimeFilter<"permissionRole"> | Date | string
    updateAt?: DateTimeFilter<"permissionRole"> | Date | string
  }

  export type permissionRoleCreateWithoutRoleInput = {
    createAt?: Date | string
    updateAt?: Date | string
    persmission: permissionCreateNestedOneWithoutPermissionRolesInput
  }

  export type permissionRoleUncheckedCreateWithoutRoleInput = {
    id?: number
    permissionId: number
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type permissionRoleCreateOrConnectWithoutRoleInput = {
    where: permissionRoleWhereUniqueInput
    create: XOR<permissionRoleCreateWithoutRoleInput, permissionRoleUncheckedCreateWithoutRoleInput>
  }

  export type permissionRoleCreateManyRoleInputEnvelope = {
    data: permissionRoleCreateManyRoleInput | permissionRoleCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type permissionRoleUpsertWithWhereUniqueWithoutRoleInput = {
    where: permissionRoleWhereUniqueInput
    update: XOR<permissionRoleUpdateWithoutRoleInput, permissionRoleUncheckedUpdateWithoutRoleInput>
    create: XOR<permissionRoleCreateWithoutRoleInput, permissionRoleUncheckedCreateWithoutRoleInput>
  }

  export type permissionRoleUpdateWithWhereUniqueWithoutRoleInput = {
    where: permissionRoleWhereUniqueInput
    data: XOR<permissionRoleUpdateWithoutRoleInput, permissionRoleUncheckedUpdateWithoutRoleInput>
  }

  export type permissionRoleUpdateManyWithWhereWithoutRoleInput = {
    where: permissionRoleScalarWhereInput
    data: XOR<permissionRoleUpdateManyMutationInput, permissionRoleUncheckedUpdateManyWithoutRoleInput>
  }

  export type permissionCreateWithoutPermissionRolesInput = {
    name: string
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type permissionUncheckedCreateWithoutPermissionRolesInput = {
    id?: number
    name: string
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type permissionCreateOrConnectWithoutPermissionRolesInput = {
    where: permissionWhereUniqueInput
    create: XOR<permissionCreateWithoutPermissionRolesInput, permissionUncheckedCreateWithoutPermissionRolesInput>
  }

  export type roleCreateWithoutPermissionRolesInput = {
    name: string
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type roleUncheckedCreateWithoutPermissionRolesInput = {
    id?: number
    name: string
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type roleCreateOrConnectWithoutPermissionRolesInput = {
    where: roleWhereUniqueInput
    create: XOR<roleCreateWithoutPermissionRolesInput, roleUncheckedCreateWithoutPermissionRolesInput>
  }

  export type permissionUpsertWithoutPermissionRolesInput = {
    update: XOR<permissionUpdateWithoutPermissionRolesInput, permissionUncheckedUpdateWithoutPermissionRolesInput>
    create: XOR<permissionCreateWithoutPermissionRolesInput, permissionUncheckedCreateWithoutPermissionRolesInput>
    where?: permissionWhereInput
  }

  export type permissionUpdateToOneWithWhereWithoutPermissionRolesInput = {
    where?: permissionWhereInput
    data: XOR<permissionUpdateWithoutPermissionRolesInput, permissionUncheckedUpdateWithoutPermissionRolesInput>
  }

  export type permissionUpdateWithoutPermissionRolesInput = {
    name?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type permissionUncheckedUpdateWithoutPermissionRolesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type roleUpsertWithoutPermissionRolesInput = {
    update: XOR<roleUpdateWithoutPermissionRolesInput, roleUncheckedUpdateWithoutPermissionRolesInput>
    create: XOR<roleCreateWithoutPermissionRolesInput, roleUncheckedCreateWithoutPermissionRolesInput>
    where?: roleWhereInput
  }

  export type roleUpdateToOneWithWhereWithoutPermissionRolesInput = {
    where?: roleWhereInput
    data: XOR<roleUpdateWithoutPermissionRolesInput, roleUncheckedUpdateWithoutPermissionRolesInput>
  }

  export type roleUpdateWithoutPermissionRolesInput = {
    name?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type roleUncheckedUpdateWithoutPermissionRolesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type studentExamCreateManyStudentInput = {
    id?: number
    ExamId: number
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type payExamCreateManyStudentInput = {
    id?: number
    date: Date | string
    amount: number
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type studentExamUpdateWithoutStudentInput = {
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    exam?: examUpdateOneRequiredWithoutStudentExamsNestedInput
  }

  export type studentExamUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    ExamId?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type studentExamUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    ExamId?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type payExamUpdateWithoutStudentInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type payExamUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type payExamUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: FloatFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type studentExamCreateManyExamInput = {
    id?: number
    StudentId: number
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type categoryCreateManyExamInput = {
    id?: number
    nom: string
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type studentExamUpdateWithoutExamInput = {
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: studentUpdateOneRequiredWithoutStudentExamsNestedInput
  }

  export type studentExamUncheckedUpdateWithoutExamInput = {
    id?: IntFieldUpdateOperationsInput | number
    StudentId?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type studentExamUncheckedUpdateManyWithoutExamInput = {
    id?: IntFieldUpdateOperationsInput | number
    StudentId?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type categoryUpdateWithoutExamInput = {
    nom?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: questionUpdateManyWithoutCategoryNestedInput
  }

  export type categoryUncheckedUpdateWithoutExamInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: questionUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type categoryUncheckedUpdateManyWithoutExamInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type questionCreateManyCategoryInput = {
    id?: number
    titre: string
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type questionUpdateWithoutCategoryInput = {
    titre?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    responses?: responseUpdateManyWithoutQuestionNestedInput
  }

  export type questionUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    responses?: responseUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type questionUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type responseCreateManyQuestionInput = {
    id?: number
    titre: string
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type responseUpdateWithoutQuestionInput = {
    titre?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type responseUncheckedUpdateWithoutQuestionInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type responseUncheckedUpdateManyWithoutQuestionInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type permissionRoleCreateManyPersmissionInput = {
    id?: number
    roleId: number
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type permissionRoleUpdateWithoutPersmissionInput = {
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    role?: roleUpdateOneRequiredWithoutPermissionRolesNestedInput
  }

  export type permissionRoleUncheckedUpdateWithoutPersmissionInput = {
    id?: IntFieldUpdateOperationsInput | number
    roleId?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type permissionRoleUncheckedUpdateManyWithoutPersmissionInput = {
    id?: IntFieldUpdateOperationsInput | number
    roleId?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type permissionRoleCreateManyRoleInput = {
    id?: number
    permissionId: number
    createAt?: Date | string
    updateAt?: Date | string
  }

  export type permissionRoleUpdateWithoutRoleInput = {
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    persmission?: permissionUpdateOneRequiredWithoutPermissionRolesNestedInput
  }

  export type permissionRoleUncheckedUpdateWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    permissionId?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type permissionRoleUncheckedUpdateManyWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    permissionId?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use StudentCountOutputTypeDefaultArgs instead
     */
    export type StudentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StudentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExamCountOutputTypeDefaultArgs instead
     */
    export type ExamCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExamCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryCountOutputTypeDefaultArgs instead
     */
    export type CategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QuestionCountOutputTypeDefaultArgs instead
     */
    export type QuestionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QuestionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PermissionCountOutputTypeDefaultArgs instead
     */
    export type PermissionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PermissionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoleCountOutputTypeDefaultArgs instead
     */
    export type RoleCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use userDefaultArgs instead
     */
    export type userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = userDefaultArgs<ExtArgs>
    /**
     * @deprecated Use studentDefaultArgs instead
     */
    export type studentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = studentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use examDefaultArgs instead
     */
    export type examArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = examDefaultArgs<ExtArgs>
    /**
     * @deprecated Use categoryDefaultArgs instead
     */
    export type categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = categoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use questionDefaultArgs instead
     */
    export type questionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = questionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use responseDefaultArgs instead
     */
    export type responseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = responseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use studentExamDefaultArgs instead
     */
    export type studentExamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = studentExamDefaultArgs<ExtArgs>
    /**
     * @deprecated Use payExamDefaultArgs instead
     */
    export type payExamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = payExamDefaultArgs<ExtArgs>
    /**
     * @deprecated Use permissionDefaultArgs instead
     */
    export type permissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = permissionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use roleDefaultArgs instead
     */
    export type roleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = roleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use permissionRoleDefaultArgs instead
     */
    export type permissionRoleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = permissionRoleDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}